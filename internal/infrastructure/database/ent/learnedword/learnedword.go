// Code generated by ent, DO NOT EDIT.

package learnedword

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/entity"
)

const (
	// Label holds the string label denoting the learnedword type in the database.
	Label = "learned_word"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTerm holds the string denoting the term field in the database.
	FieldTerm = "term"
	// FieldNormalized holds the string denoting the normalized field in the database.
	FieldNormalized = "normalized"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldMasteryListen holds the string denoting the mastery_listen field in the database.
	FieldMasteryListen = "mastery_listen"
	// FieldMasteryRead holds the string denoting the mastery_read field in the database.
	FieldMasteryRead = "mastery_read"
	// FieldMasterySpell holds the string denoting the mastery_spell field in the database.
	FieldMasterySpell = "mastery_spell"
	// FieldMasteryPronounce holds the string denoting the mastery_pronounce field in the database.
	FieldMasteryPronounce = "mastery_pronounce"
	// FieldMasteryUse holds the string denoting the mastery_use field in the database.
	FieldMasteryUse = "mastery_use"
	// FieldMasteryOverall holds the string denoting the mastery_overall field in the database.
	FieldMasteryOverall = "mastery_overall"
	// FieldReviewLastReviewAt holds the string denoting the review_last_review_at field in the database.
	FieldReviewLastReviewAt = "review_last_review_at"
	// FieldReviewNextReviewAt holds the string denoting the review_next_review_at field in the database.
	FieldReviewNextReviewAt = "review_next_review_at"
	// FieldReviewIntervalDays holds the string denoting the review_interval_days field in the database.
	FieldReviewIntervalDays = "review_interval_days"
	// FieldReviewFailCount holds the string denoting the review_fail_count field in the database.
	FieldReviewFailCount = "review_fail_count"
	// FieldQueryCount holds the string denoting the query_count field in the database.
	FieldQueryCount = "query_count"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldSentences holds the string denoting the sentences field in the database.
	FieldSentences = "sentences"
	// FieldRelations holds the string denoting the relations field in the database.
	FieldRelations = "relations"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the learnedword in the database.
	Table = "learned_words"
)

// Columns holds all SQL columns for learnedword fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTerm,
	FieldNormalized,
	FieldLanguage,
	FieldMasteryListen,
	FieldMasteryRead,
	FieldMasterySpell,
	FieldMasteryPronounce,
	FieldMasteryUse,
	FieldMasteryOverall,
	FieldReviewLastReviewAt,
	FieldReviewNextReviewAt,
	FieldReviewIntervalDays,
	FieldReviewFailCount,
	FieldQueryCount,
	FieldNotes,
	FieldSentences,
	FieldRelations,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TermValidator is a validator for the "term" field. It is called by the builders before save.
	TermValidator func(string) error
	// DefaultNormalized holds the default value on creation for the "normalized" field.
	DefaultNormalized string
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultMasteryListen holds the default value on creation for the "mastery_listen" field.
	DefaultMasteryListen int16
	// DefaultMasteryRead holds the default value on creation for the "mastery_read" field.
	DefaultMasteryRead int16
	// DefaultMasterySpell holds the default value on creation for the "mastery_spell" field.
	DefaultMasterySpell int16
	// DefaultMasteryPronounce holds the default value on creation for the "mastery_pronounce" field.
	DefaultMasteryPronounce int16
	// DefaultMasteryUse holds the default value on creation for the "mastery_use" field.
	DefaultMasteryUse int16
	// DefaultMasteryOverall holds the default value on creation for the "mastery_overall" field.
	DefaultMasteryOverall int32
	// DefaultReviewIntervalDays holds the default value on creation for the "review_interval_days" field.
	DefaultReviewIntervalDays int32
	// DefaultReviewFailCount holds the default value on creation for the "review_fail_count" field.
	DefaultReviewFailCount int32
	// DefaultQueryCount holds the default value on creation for the "query_count" field.
	DefaultQueryCount int64
	// DefaultSentences holds the default value on creation for the "sentences" field.
	DefaultSentences []entity.Sentence
	// DefaultRelations holds the default value on creation for the "relations" field.
	DefaultRelations []entity.LearnedWordRelation
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the LearnedWord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTerm orders the results by the term field.
func ByTerm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerm, opts...).ToFunc()
}

// ByNormalized orders the results by the normalized field.
func ByNormalized(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalized, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByMasteryListen orders the results by the mastery_listen field.
func ByMasteryListen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMasteryListen, opts...).ToFunc()
}

// ByMasteryRead orders the results by the mastery_read field.
func ByMasteryRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMasteryRead, opts...).ToFunc()
}

// ByMasterySpell orders the results by the mastery_spell field.
func ByMasterySpell(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMasterySpell, opts...).ToFunc()
}

// ByMasteryPronounce orders the results by the mastery_pronounce field.
func ByMasteryPronounce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMasteryPronounce, opts...).ToFunc()
}

// ByMasteryUse orders the results by the mastery_use field.
func ByMasteryUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMasteryUse, opts...).ToFunc()
}

// ByMasteryOverall orders the results by the mastery_overall field.
func ByMasteryOverall(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMasteryOverall, opts...).ToFunc()
}

// ByReviewLastReviewAt orders the results by the review_last_review_at field.
func ByReviewLastReviewAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewLastReviewAt, opts...).ToFunc()
}

// ByReviewNextReviewAt orders the results by the review_next_review_at field.
func ByReviewNextReviewAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewNextReviewAt, opts...).ToFunc()
}

// ByReviewIntervalDays orders the results by the review_interval_days field.
func ByReviewIntervalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewIntervalDays, opts...).ToFunc()
}

// ByReviewFailCount orders the results by the review_fail_count field.
func ByReviewFailCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewFailCount, opts...).ToFunc()
}

// ByQueryCount orders the results by the query_count field.
func ByQueryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueryCount, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
