// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/userword"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/types"
)

// UserWordCreate is the builder for creating a UserWord entity.
type UserWordCreate struct {
	config
	mutation *UserWordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uwc *UserWordCreate) SetUserID(i int64) *UserWordCreate {
	uwc.mutation.SetUserID(i)
	return uwc
}

// SetWord sets the "word" field.
func (uwc *UserWordCreate) SetWord(s string) *UserWordCreate {
	uwc.mutation.SetWord(s)
	return uwc
}

// SetLanguage sets the "language" field.
func (uwc *UserWordCreate) SetLanguage(s string) *UserWordCreate {
	uwc.mutation.SetLanguage(s)
	return uwc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableLanguage(s *string) *UserWordCreate {
	if s != nil {
		uwc.SetLanguage(*s)
	}
	return uwc
}

// SetMasteryListen sets the "mastery_listen" field.
func (uwc *UserWordCreate) SetMasteryListen(i int16) *UserWordCreate {
	uwc.mutation.SetMasteryListen(i)
	return uwc
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableMasteryListen(i *int16) *UserWordCreate {
	if i != nil {
		uwc.SetMasteryListen(*i)
	}
	return uwc
}

// SetMasteryRead sets the "mastery_read" field.
func (uwc *UserWordCreate) SetMasteryRead(i int16) *UserWordCreate {
	uwc.mutation.SetMasteryRead(i)
	return uwc
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableMasteryRead(i *int16) *UserWordCreate {
	if i != nil {
		uwc.SetMasteryRead(*i)
	}
	return uwc
}

// SetMasterySpell sets the "mastery_spell" field.
func (uwc *UserWordCreate) SetMasterySpell(i int16) *UserWordCreate {
	uwc.mutation.SetMasterySpell(i)
	return uwc
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableMasterySpell(i *int16) *UserWordCreate {
	if i != nil {
		uwc.SetMasterySpell(*i)
	}
	return uwc
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (uwc *UserWordCreate) SetMasteryPronounce(i int16) *UserWordCreate {
	uwc.mutation.SetMasteryPronounce(i)
	return uwc
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableMasteryPronounce(i *int16) *UserWordCreate {
	if i != nil {
		uwc.SetMasteryPronounce(*i)
	}
	return uwc
}

// SetMasteryUse sets the "mastery_use" field.
func (uwc *UserWordCreate) SetMasteryUse(i int16) *UserWordCreate {
	uwc.mutation.SetMasteryUse(i)
	return uwc
}

// SetNillableMasteryUse sets the "mastery_use" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableMasteryUse(i *int16) *UserWordCreate {
	if i != nil {
		uwc.SetMasteryUse(*i)
	}
	return uwc
}

// SetMasteryOverall sets the "mastery_overall" field.
func (uwc *UserWordCreate) SetMasteryOverall(i int32) *UserWordCreate {
	uwc.mutation.SetMasteryOverall(i)
	return uwc
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableMasteryOverall(i *int32) *UserWordCreate {
	if i != nil {
		uwc.SetMasteryOverall(*i)
	}
	return uwc
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (uwc *UserWordCreate) SetReviewLastReviewAt(t time.Time) *UserWordCreate {
	uwc.mutation.SetReviewLastReviewAt(t)
	return uwc
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableReviewLastReviewAt(t *time.Time) *UserWordCreate {
	if t != nil {
		uwc.SetReviewLastReviewAt(*t)
	}
	return uwc
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (uwc *UserWordCreate) SetReviewNextReviewAt(t time.Time) *UserWordCreate {
	uwc.mutation.SetReviewNextReviewAt(t)
	return uwc
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableReviewNextReviewAt(t *time.Time) *UserWordCreate {
	if t != nil {
		uwc.SetReviewNextReviewAt(*t)
	}
	return uwc
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (uwc *UserWordCreate) SetReviewIntervalDays(i int32) *UserWordCreate {
	uwc.mutation.SetReviewIntervalDays(i)
	return uwc
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableReviewIntervalDays(i *int32) *UserWordCreate {
	if i != nil {
		uwc.SetReviewIntervalDays(*i)
	}
	return uwc
}

// SetReviewFailCount sets the "review_fail_count" field.
func (uwc *UserWordCreate) SetReviewFailCount(i int32) *UserWordCreate {
	uwc.mutation.SetReviewFailCount(i)
	return uwc
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableReviewFailCount(i *int32) *UserWordCreate {
	if i != nil {
		uwc.SetReviewFailCount(*i)
	}
	return uwc
}

// SetQueryCount sets the "query_count" field.
func (uwc *UserWordCreate) SetQueryCount(i int64) *UserWordCreate {
	uwc.mutation.SetQueryCount(i)
	return uwc
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableQueryCount(i *int64) *UserWordCreate {
	if i != nil {
		uwc.SetQueryCount(*i)
	}
	return uwc
}

// SetNotes sets the "notes" field.
func (uwc *UserWordCreate) SetNotes(s string) *UserWordCreate {
	uwc.mutation.SetNotes(s)
	return uwc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableNotes(s *string) *UserWordCreate {
	if s != nil {
		uwc.SetNotes(*s)
	}
	return uwc
}

// SetSentences sets the "sentences" field.
func (uwc *UserWordCreate) SetSentences(ts types.UserSentences) *UserWordCreate {
	uwc.mutation.SetSentences(ts)
	return uwc
}

// SetRelations sets the "relations" field.
func (uwc *UserWordCreate) SetRelations(twr types.UserWordRelations) *UserWordCreate {
	uwc.mutation.SetRelations(twr)
	return uwc
}

// SetCreatedBy sets the "created_by" field.
func (uwc *UserWordCreate) SetCreatedBy(s string) *UserWordCreate {
	uwc.mutation.SetCreatedBy(s)
	return uwc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableCreatedBy(s *string) *UserWordCreate {
	if s != nil {
		uwc.SetCreatedBy(*s)
	}
	return uwc
}

// SetCreatedAt sets the "created_at" field.
func (uwc *UserWordCreate) SetCreatedAt(t time.Time) *UserWordCreate {
	uwc.mutation.SetCreatedAt(t)
	return uwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableCreatedAt(t *time.Time) *UserWordCreate {
	if t != nil {
		uwc.SetCreatedAt(*t)
	}
	return uwc
}

// SetUpdatedAt sets the "updated_at" field.
func (uwc *UserWordCreate) SetUpdatedAt(t time.Time) *UserWordCreate {
	uwc.mutation.SetUpdatedAt(t)
	return uwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uwc *UserWordCreate) SetNillableUpdatedAt(t *time.Time) *UserWordCreate {
	if t != nil {
		uwc.SetUpdatedAt(*t)
	}
	return uwc
}

// Mutation returns the UserWordMutation object of the builder.
func (uwc *UserWordCreate) Mutation() *UserWordMutation {
	return uwc.mutation
}

// Save creates the UserWord in the database.
func (uwc *UserWordCreate) Save(ctx context.Context) (*UserWord, error) {
	uwc.defaults()
	return withHooks(ctx, uwc.sqlSave, uwc.mutation, uwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uwc *UserWordCreate) SaveX(ctx context.Context) *UserWord {
	v, err := uwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwc *UserWordCreate) Exec(ctx context.Context) error {
	_, err := uwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwc *UserWordCreate) ExecX(ctx context.Context) {
	if err := uwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwc *UserWordCreate) defaults() {
	if _, ok := uwc.mutation.Language(); !ok {
		v := userword.DefaultLanguage
		uwc.mutation.SetLanguage(v)
	}
	if _, ok := uwc.mutation.MasteryListen(); !ok {
		v := userword.DefaultMasteryListen
		uwc.mutation.SetMasteryListen(v)
	}
	if _, ok := uwc.mutation.MasteryRead(); !ok {
		v := userword.DefaultMasteryRead
		uwc.mutation.SetMasteryRead(v)
	}
	if _, ok := uwc.mutation.MasterySpell(); !ok {
		v := userword.DefaultMasterySpell
		uwc.mutation.SetMasterySpell(v)
	}
	if _, ok := uwc.mutation.MasteryPronounce(); !ok {
		v := userword.DefaultMasteryPronounce
		uwc.mutation.SetMasteryPronounce(v)
	}
	if _, ok := uwc.mutation.MasteryUse(); !ok {
		v := userword.DefaultMasteryUse
		uwc.mutation.SetMasteryUse(v)
	}
	if _, ok := uwc.mutation.MasteryOverall(); !ok {
		v := userword.DefaultMasteryOverall
		uwc.mutation.SetMasteryOverall(v)
	}
	if _, ok := uwc.mutation.ReviewIntervalDays(); !ok {
		v := userword.DefaultReviewIntervalDays
		uwc.mutation.SetReviewIntervalDays(v)
	}
	if _, ok := uwc.mutation.ReviewFailCount(); !ok {
		v := userword.DefaultReviewFailCount
		uwc.mutation.SetReviewFailCount(v)
	}
	if _, ok := uwc.mutation.QueryCount(); !ok {
		v := userword.DefaultQueryCount
		uwc.mutation.SetQueryCount(v)
	}
	if _, ok := uwc.mutation.Sentences(); !ok {
		v := userword.DefaultSentences
		uwc.mutation.SetSentences(v)
	}
	if _, ok := uwc.mutation.Relations(); !ok {
		v := userword.DefaultRelations
		uwc.mutation.SetRelations(v)
	}
	if _, ok := uwc.mutation.CreatedBy(); !ok {
		v := userword.DefaultCreatedBy
		uwc.mutation.SetCreatedBy(v)
	}
	if _, ok := uwc.mutation.CreatedAt(); !ok {
		v := userword.DefaultCreatedAt()
		uwc.mutation.SetCreatedAt(v)
	}
	if _, ok := uwc.mutation.UpdatedAt(); !ok {
		v := userword.DefaultUpdatedAt()
		uwc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwc *UserWordCreate) check() error {
	if _, ok := uwc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserWord.user_id"`)}
	}
	if _, ok := uwc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "UserWord.word"`)}
	}
	if v, ok := uwc.mutation.Word(); ok {
		if err := userword.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "UserWord.word": %w`, err)}
		}
	}
	if _, ok := uwc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "UserWord.language"`)}
	}
	if _, ok := uwc.mutation.MasteryListen(); !ok {
		return &ValidationError{Name: "mastery_listen", err: errors.New(`ent: missing required field "UserWord.mastery_listen"`)}
	}
	if _, ok := uwc.mutation.MasteryRead(); !ok {
		return &ValidationError{Name: "mastery_read", err: errors.New(`ent: missing required field "UserWord.mastery_read"`)}
	}
	if _, ok := uwc.mutation.MasterySpell(); !ok {
		return &ValidationError{Name: "mastery_spell", err: errors.New(`ent: missing required field "UserWord.mastery_spell"`)}
	}
	if _, ok := uwc.mutation.MasteryPronounce(); !ok {
		return &ValidationError{Name: "mastery_pronounce", err: errors.New(`ent: missing required field "UserWord.mastery_pronounce"`)}
	}
	if _, ok := uwc.mutation.MasteryUse(); !ok {
		return &ValidationError{Name: "mastery_use", err: errors.New(`ent: missing required field "UserWord.mastery_use"`)}
	}
	if _, ok := uwc.mutation.MasteryOverall(); !ok {
		return &ValidationError{Name: "mastery_overall", err: errors.New(`ent: missing required field "UserWord.mastery_overall"`)}
	}
	if _, ok := uwc.mutation.ReviewIntervalDays(); !ok {
		return &ValidationError{Name: "review_interval_days", err: errors.New(`ent: missing required field "UserWord.review_interval_days"`)}
	}
	if _, ok := uwc.mutation.ReviewFailCount(); !ok {
		return &ValidationError{Name: "review_fail_count", err: errors.New(`ent: missing required field "UserWord.review_fail_count"`)}
	}
	if _, ok := uwc.mutation.QueryCount(); !ok {
		return &ValidationError{Name: "query_count", err: errors.New(`ent: missing required field "UserWord.query_count"`)}
	}
	if _, ok := uwc.mutation.Sentences(); !ok {
		return &ValidationError{Name: "sentences", err: errors.New(`ent: missing required field "UserWord.sentences"`)}
	}
	if _, ok := uwc.mutation.Relations(); !ok {
		return &ValidationError{Name: "relations", err: errors.New(`ent: missing required field "UserWord.relations"`)}
	}
	if _, ok := uwc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserWord.created_by"`)}
	}
	if _, ok := uwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserWord.created_at"`)}
	}
	if _, ok := uwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserWord.updated_at"`)}
	}
	return nil
}

func (uwc *UserWordCreate) sqlSave(ctx context.Context) (*UserWord, error) {
	if err := uwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uwc.mutation.id = &_node.ID
	uwc.mutation.done = true
	return _node, nil
}

func (uwc *UserWordCreate) createSpec() (*UserWord, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWord{config: uwc.config}
		_spec = sqlgraph.NewCreateSpec(userword.Table, sqlgraph.NewFieldSpec(userword.FieldID, field.TypeInt))
	)
	if value, ok := uwc.mutation.UserID(); ok {
		_spec.SetField(userword.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := uwc.mutation.Word(); ok {
		_spec.SetField(userword.FieldWord, field.TypeString, value)
		_node.Word = value
	}
	if value, ok := uwc.mutation.Language(); ok {
		_spec.SetField(userword.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := uwc.mutation.MasteryListen(); ok {
		_spec.SetField(userword.FieldMasteryListen, field.TypeInt16, value)
		_node.MasteryListen = value
	}
	if value, ok := uwc.mutation.MasteryRead(); ok {
		_spec.SetField(userword.FieldMasteryRead, field.TypeInt16, value)
		_node.MasteryRead = value
	}
	if value, ok := uwc.mutation.MasterySpell(); ok {
		_spec.SetField(userword.FieldMasterySpell, field.TypeInt16, value)
		_node.MasterySpell = value
	}
	if value, ok := uwc.mutation.MasteryPronounce(); ok {
		_spec.SetField(userword.FieldMasteryPronounce, field.TypeInt16, value)
		_node.MasteryPronounce = value
	}
	if value, ok := uwc.mutation.MasteryUse(); ok {
		_spec.SetField(userword.FieldMasteryUse, field.TypeInt16, value)
		_node.MasteryUse = value
	}
	if value, ok := uwc.mutation.MasteryOverall(); ok {
		_spec.SetField(userword.FieldMasteryOverall, field.TypeInt32, value)
		_node.MasteryOverall = value
	}
	if value, ok := uwc.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(userword.FieldReviewLastReviewAt, field.TypeTime, value)
		_node.ReviewLastReviewAt = &value
	}
	if value, ok := uwc.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(userword.FieldReviewNextReviewAt, field.TypeTime, value)
		_node.ReviewNextReviewAt = &value
	}
	if value, ok := uwc.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(userword.FieldReviewIntervalDays, field.TypeInt32, value)
		_node.ReviewIntervalDays = value
	}
	if value, ok := uwc.mutation.ReviewFailCount(); ok {
		_spec.SetField(userword.FieldReviewFailCount, field.TypeInt32, value)
		_node.ReviewFailCount = value
	}
	if value, ok := uwc.mutation.QueryCount(); ok {
		_spec.SetField(userword.FieldQueryCount, field.TypeInt64, value)
		_node.QueryCount = value
	}
	if value, ok := uwc.mutation.Notes(); ok {
		_spec.SetField(userword.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := uwc.mutation.Sentences(); ok {
		_spec.SetField(userword.FieldSentences, field.TypeJSON, value)
		_node.Sentences = value
	}
	if value, ok := uwc.mutation.Relations(); ok {
		_spec.SetField(userword.FieldRelations, field.TypeJSON, value)
		_node.Relations = value
	}
	if value, ok := uwc.mutation.CreatedBy(); ok {
		_spec.SetField(userword.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := uwc.mutation.CreatedAt(); ok {
		_spec.SetField(userword.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uwc.mutation.UpdatedAt(); ok {
		_spec.SetField(userword.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UserWordCreateBulk is the builder for creating many UserWord entities in bulk.
type UserWordCreateBulk struct {
	config
	err      error
	builders []*UserWordCreate
}

// Save creates the UserWord entities in the database.
func (uwcb *UserWordCreateBulk) Save(ctx context.Context) ([]*UserWord, error) {
	if uwcb.err != nil {
		return nil, uwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uwcb.builders))
	nodes := make([]*UserWord, len(uwcb.builders))
	mutators := make([]Mutator, len(uwcb.builders))
	for i := range uwcb.builders {
		func(i int, root context.Context) {
			builder := uwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwcb *UserWordCreateBulk) SaveX(ctx context.Context) []*UserWord {
	v, err := uwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwcb *UserWordCreateBulk) Exec(ctx context.Context) error {
	_, err := uwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwcb *UserWordCreateBulk) ExecX(ctx context.Context) {
	if err := uwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
