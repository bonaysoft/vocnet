// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/userword"
)

// UserWordUpdate is the builder for updating UserWord entities.
type UserWordUpdate struct {
	config
	hooks    []Hook
	mutation *UserWordMutation
}

// Where appends a list predicates to the UserWordUpdate builder.
func (uwu *UserWordUpdate) Where(ps ...predicate.UserWord) *UserWordUpdate {
	uwu.mutation.Where(ps...)
	return uwu
}

// SetUserID sets the "user_id" field.
func (uwu *UserWordUpdate) SetUserID(i int64) *UserWordUpdate {
	uwu.mutation.ResetUserID()
	uwu.mutation.SetUserID(i)
	return uwu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableUserID(i *int64) *UserWordUpdate {
	if i != nil {
		uwu.SetUserID(*i)
	}
	return uwu
}

// AddUserID adds i to the "user_id" field.
func (uwu *UserWordUpdate) AddUserID(i int64) *UserWordUpdate {
	uwu.mutation.AddUserID(i)
	return uwu
}

// SetWord sets the "word" field.
func (uwu *UserWordUpdate) SetWord(s string) *UserWordUpdate {
	uwu.mutation.SetWord(s)
	return uwu
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableWord(s *string) *UserWordUpdate {
	if s != nil {
		uwu.SetWord(*s)
	}
	return uwu
}

// SetNormalized sets the "normalized" field.
func (uwu *UserWordUpdate) SetNormalized(s string) *UserWordUpdate {
	uwu.mutation.SetNormalized(s)
	return uwu
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableNormalized(s *string) *UserWordUpdate {
	if s != nil {
		uwu.SetNormalized(*s)
	}
	return uwu
}

// SetLanguage sets the "language" field.
func (uwu *UserWordUpdate) SetLanguage(s string) *UserWordUpdate {
	uwu.mutation.SetLanguage(s)
	return uwu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableLanguage(s *string) *UserWordUpdate {
	if s != nil {
		uwu.SetLanguage(*s)
	}
	return uwu
}

// SetMasteryListen sets the "mastery_listen" field.
func (uwu *UserWordUpdate) SetMasteryListen(i int16) *UserWordUpdate {
	uwu.mutation.ResetMasteryListen()
	uwu.mutation.SetMasteryListen(i)
	return uwu
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableMasteryListen(i *int16) *UserWordUpdate {
	if i != nil {
		uwu.SetMasteryListen(*i)
	}
	return uwu
}

// AddMasteryListen adds i to the "mastery_listen" field.
func (uwu *UserWordUpdate) AddMasteryListen(i int16) *UserWordUpdate {
	uwu.mutation.AddMasteryListen(i)
	return uwu
}

// SetMasteryRead sets the "mastery_read" field.
func (uwu *UserWordUpdate) SetMasteryRead(i int16) *UserWordUpdate {
	uwu.mutation.ResetMasteryRead()
	uwu.mutation.SetMasteryRead(i)
	return uwu
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableMasteryRead(i *int16) *UserWordUpdate {
	if i != nil {
		uwu.SetMasteryRead(*i)
	}
	return uwu
}

// AddMasteryRead adds i to the "mastery_read" field.
func (uwu *UserWordUpdate) AddMasteryRead(i int16) *UserWordUpdate {
	uwu.mutation.AddMasteryRead(i)
	return uwu
}

// SetMasterySpell sets the "mastery_spell" field.
func (uwu *UserWordUpdate) SetMasterySpell(i int16) *UserWordUpdate {
	uwu.mutation.ResetMasterySpell()
	uwu.mutation.SetMasterySpell(i)
	return uwu
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableMasterySpell(i *int16) *UserWordUpdate {
	if i != nil {
		uwu.SetMasterySpell(*i)
	}
	return uwu
}

// AddMasterySpell adds i to the "mastery_spell" field.
func (uwu *UserWordUpdate) AddMasterySpell(i int16) *UserWordUpdate {
	uwu.mutation.AddMasterySpell(i)
	return uwu
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (uwu *UserWordUpdate) SetMasteryPronounce(i int16) *UserWordUpdate {
	uwu.mutation.ResetMasteryPronounce()
	uwu.mutation.SetMasteryPronounce(i)
	return uwu
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableMasteryPronounce(i *int16) *UserWordUpdate {
	if i != nil {
		uwu.SetMasteryPronounce(*i)
	}
	return uwu
}

// AddMasteryPronounce adds i to the "mastery_pronounce" field.
func (uwu *UserWordUpdate) AddMasteryPronounce(i int16) *UserWordUpdate {
	uwu.mutation.AddMasteryPronounce(i)
	return uwu
}

// SetMasteryUse sets the "mastery_use" field.
func (uwu *UserWordUpdate) SetMasteryUse(i int16) *UserWordUpdate {
	uwu.mutation.ResetMasteryUse()
	uwu.mutation.SetMasteryUse(i)
	return uwu
}

// SetNillableMasteryUse sets the "mastery_use" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableMasteryUse(i *int16) *UserWordUpdate {
	if i != nil {
		uwu.SetMasteryUse(*i)
	}
	return uwu
}

// AddMasteryUse adds i to the "mastery_use" field.
func (uwu *UserWordUpdate) AddMasteryUse(i int16) *UserWordUpdate {
	uwu.mutation.AddMasteryUse(i)
	return uwu
}

// SetMasteryOverall sets the "mastery_overall" field.
func (uwu *UserWordUpdate) SetMasteryOverall(i int32) *UserWordUpdate {
	uwu.mutation.ResetMasteryOverall()
	uwu.mutation.SetMasteryOverall(i)
	return uwu
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableMasteryOverall(i *int32) *UserWordUpdate {
	if i != nil {
		uwu.SetMasteryOverall(*i)
	}
	return uwu
}

// AddMasteryOverall adds i to the "mastery_overall" field.
func (uwu *UserWordUpdate) AddMasteryOverall(i int32) *UserWordUpdate {
	uwu.mutation.AddMasteryOverall(i)
	return uwu
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (uwu *UserWordUpdate) SetReviewLastReviewAt(t time.Time) *UserWordUpdate {
	uwu.mutation.SetReviewLastReviewAt(t)
	return uwu
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableReviewLastReviewAt(t *time.Time) *UserWordUpdate {
	if t != nil {
		uwu.SetReviewLastReviewAt(*t)
	}
	return uwu
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (uwu *UserWordUpdate) ClearReviewLastReviewAt() *UserWordUpdate {
	uwu.mutation.ClearReviewLastReviewAt()
	return uwu
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (uwu *UserWordUpdate) SetReviewNextReviewAt(t time.Time) *UserWordUpdate {
	uwu.mutation.SetReviewNextReviewAt(t)
	return uwu
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableReviewNextReviewAt(t *time.Time) *UserWordUpdate {
	if t != nil {
		uwu.SetReviewNextReviewAt(*t)
	}
	return uwu
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (uwu *UserWordUpdate) ClearReviewNextReviewAt() *UserWordUpdate {
	uwu.mutation.ClearReviewNextReviewAt()
	return uwu
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (uwu *UserWordUpdate) SetReviewIntervalDays(i int32) *UserWordUpdate {
	uwu.mutation.ResetReviewIntervalDays()
	uwu.mutation.SetReviewIntervalDays(i)
	return uwu
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableReviewIntervalDays(i *int32) *UserWordUpdate {
	if i != nil {
		uwu.SetReviewIntervalDays(*i)
	}
	return uwu
}

// AddReviewIntervalDays adds i to the "review_interval_days" field.
func (uwu *UserWordUpdate) AddReviewIntervalDays(i int32) *UserWordUpdate {
	uwu.mutation.AddReviewIntervalDays(i)
	return uwu
}

// SetReviewFailCount sets the "review_fail_count" field.
func (uwu *UserWordUpdate) SetReviewFailCount(i int32) *UserWordUpdate {
	uwu.mutation.ResetReviewFailCount()
	uwu.mutation.SetReviewFailCount(i)
	return uwu
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableReviewFailCount(i *int32) *UserWordUpdate {
	if i != nil {
		uwu.SetReviewFailCount(*i)
	}
	return uwu
}

// AddReviewFailCount adds i to the "review_fail_count" field.
func (uwu *UserWordUpdate) AddReviewFailCount(i int32) *UserWordUpdate {
	uwu.mutation.AddReviewFailCount(i)
	return uwu
}

// SetQueryCount sets the "query_count" field.
func (uwu *UserWordUpdate) SetQueryCount(i int64) *UserWordUpdate {
	uwu.mutation.ResetQueryCount()
	uwu.mutation.SetQueryCount(i)
	return uwu
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableQueryCount(i *int64) *UserWordUpdate {
	if i != nil {
		uwu.SetQueryCount(*i)
	}
	return uwu
}

// AddQueryCount adds i to the "query_count" field.
func (uwu *UserWordUpdate) AddQueryCount(i int64) *UserWordUpdate {
	uwu.mutation.AddQueryCount(i)
	return uwu
}

// SetNotes sets the "notes" field.
func (uwu *UserWordUpdate) SetNotes(s string) *UserWordUpdate {
	uwu.mutation.SetNotes(s)
	return uwu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableNotes(s *string) *UserWordUpdate {
	if s != nil {
		uwu.SetNotes(*s)
	}
	return uwu
}

// ClearNotes clears the value of the "notes" field.
func (uwu *UserWordUpdate) ClearNotes() *UserWordUpdate {
	uwu.mutation.ClearNotes()
	return uwu
}

// SetSentences sets the "sentences" field.
func (uwu *UserWordUpdate) SetSentences(e []entity.Sentence) *UserWordUpdate {
	uwu.mutation.SetSentences(e)
	return uwu
}

// AppendSentences appends e to the "sentences" field.
func (uwu *UserWordUpdate) AppendSentences(e []entity.Sentence) *UserWordUpdate {
	uwu.mutation.AppendSentences(e)
	return uwu
}

// SetRelations sets the "relations" field.
func (uwu *UserWordUpdate) SetRelations(ewr []entity.UserWordRelation) *UserWordUpdate {
	uwu.mutation.SetRelations(ewr)
	return uwu
}

// AppendRelations appends ewr to the "relations" field.
func (uwu *UserWordUpdate) AppendRelations(ewr []entity.UserWordRelation) *UserWordUpdate {
	uwu.mutation.AppendRelations(ewr)
	return uwu
}

// SetCreatedBy sets the "created_by" field.
func (uwu *UserWordUpdate) SetCreatedBy(s string) *UserWordUpdate {
	uwu.mutation.SetCreatedBy(s)
	return uwu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uwu *UserWordUpdate) SetNillableCreatedBy(s *string) *UserWordUpdate {
	if s != nil {
		uwu.SetCreatedBy(*s)
	}
	return uwu
}

// SetUpdatedAt sets the "updated_at" field.
func (uwu *UserWordUpdate) SetUpdatedAt(t time.Time) *UserWordUpdate {
	uwu.mutation.SetUpdatedAt(t)
	return uwu
}

// Mutation returns the UserWordMutation object of the builder.
func (uwu *UserWordUpdate) Mutation() *UserWordMutation {
	return uwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uwu *UserWordUpdate) Save(ctx context.Context) (int, error) {
	uwu.defaults()
	return withHooks(ctx, uwu.sqlSave, uwu.mutation, uwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uwu *UserWordUpdate) SaveX(ctx context.Context) int {
	affected, err := uwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uwu *UserWordUpdate) Exec(ctx context.Context) error {
	_, err := uwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwu *UserWordUpdate) ExecX(ctx context.Context) {
	if err := uwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwu *UserWordUpdate) defaults() {
	if _, ok := uwu.mutation.UpdatedAt(); !ok {
		v := userword.UpdateDefaultUpdatedAt()
		uwu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwu *UserWordUpdate) check() error {
	if v, ok := uwu.mutation.Word(); ok {
		if err := userword.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "UserWord.word": %w`, err)}
		}
	}
	return nil
}

func (uwu *UserWordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userword.Table, userword.Columns, sqlgraph.NewFieldSpec(userword.FieldID, field.TypeInt))
	if ps := uwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwu.mutation.UserID(); ok {
		_spec.SetField(userword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.AddedUserID(); ok {
		_spec.AddField(userword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.Word(); ok {
		_spec.SetField(userword.FieldWord, field.TypeString, value)
	}
	if value, ok := uwu.mutation.Normalized(); ok {
		_spec.SetField(userword.FieldNormalized, field.TypeString, value)
	}
	if value, ok := uwu.mutation.Language(); ok {
		_spec.SetField(userword.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uwu.mutation.MasteryListen(); ok {
		_spec.SetField(userword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.AddedMasteryListen(); ok {
		_spec.AddField(userword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.MasteryRead(); ok {
		_spec.SetField(userword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.AddedMasteryRead(); ok {
		_spec.AddField(userword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.MasterySpell(); ok {
		_spec.SetField(userword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.AddedMasterySpell(); ok {
		_spec.AddField(userword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.MasteryPronounce(); ok {
		_spec.SetField(userword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.AddedMasteryPronounce(); ok {
		_spec.AddField(userword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.MasteryUse(); ok {
		_spec.SetField(userword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.AddedMasteryUse(); ok {
		_spec.AddField(userword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := uwu.mutation.MasteryOverall(); ok {
		_spec.SetField(userword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := uwu.mutation.AddedMasteryOverall(); ok {
		_spec.AddField(userword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := uwu.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(userword.FieldReviewLastReviewAt, field.TypeTime, value)
	}
	if uwu.mutation.ReviewLastReviewAtCleared() {
		_spec.ClearField(userword.FieldReviewLastReviewAt, field.TypeTime)
	}
	if value, ok := uwu.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(userword.FieldReviewNextReviewAt, field.TypeTime, value)
	}
	if uwu.mutation.ReviewNextReviewAtCleared() {
		_spec.ClearField(userword.FieldReviewNextReviewAt, field.TypeTime)
	}
	if value, ok := uwu.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(userword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := uwu.mutation.AddedReviewIntervalDays(); ok {
		_spec.AddField(userword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := uwu.mutation.ReviewFailCount(); ok {
		_spec.SetField(userword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := uwu.mutation.AddedReviewFailCount(); ok {
		_spec.AddField(userword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := uwu.mutation.QueryCount(); ok {
		_spec.SetField(userword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.AddedQueryCount(); ok {
		_spec.AddField(userword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.Notes(); ok {
		_spec.SetField(userword.FieldNotes, field.TypeString, value)
	}
	if uwu.mutation.NotesCleared() {
		_spec.ClearField(userword.FieldNotes, field.TypeString)
	}
	if value, ok := uwu.mutation.Sentences(); ok {
		_spec.SetField(userword.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := uwu.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userword.FieldSentences, value)
		})
	}
	if value, ok := uwu.mutation.Relations(); ok {
		_spec.SetField(userword.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := uwu.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userword.FieldRelations, value)
		})
	}
	if value, ok := uwu.mutation.CreatedBy(); ok {
		_spec.SetField(userword.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := uwu.mutation.UpdatedAt(); ok {
		_spec.SetField(userword.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uwu.mutation.done = true
	return n, nil
}

// UserWordUpdateOne is the builder for updating a single UserWord entity.
type UserWordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserWordMutation
}

// SetUserID sets the "user_id" field.
func (uwuo *UserWordUpdateOne) SetUserID(i int64) *UserWordUpdateOne {
	uwuo.mutation.ResetUserID()
	uwuo.mutation.SetUserID(i)
	return uwuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableUserID(i *int64) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetUserID(*i)
	}
	return uwuo
}

// AddUserID adds i to the "user_id" field.
func (uwuo *UserWordUpdateOne) AddUserID(i int64) *UserWordUpdateOne {
	uwuo.mutation.AddUserID(i)
	return uwuo
}

// SetWord sets the "word" field.
func (uwuo *UserWordUpdateOne) SetWord(s string) *UserWordUpdateOne {
	uwuo.mutation.SetWord(s)
	return uwuo
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableWord(s *string) *UserWordUpdateOne {
	if s != nil {
		uwuo.SetWord(*s)
	}
	return uwuo
}

// SetNormalized sets the "normalized" field.
func (uwuo *UserWordUpdateOne) SetNormalized(s string) *UserWordUpdateOne {
	uwuo.mutation.SetNormalized(s)
	return uwuo
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableNormalized(s *string) *UserWordUpdateOne {
	if s != nil {
		uwuo.SetNormalized(*s)
	}
	return uwuo
}

// SetLanguage sets the "language" field.
func (uwuo *UserWordUpdateOne) SetLanguage(s string) *UserWordUpdateOne {
	uwuo.mutation.SetLanguage(s)
	return uwuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableLanguage(s *string) *UserWordUpdateOne {
	if s != nil {
		uwuo.SetLanguage(*s)
	}
	return uwuo
}

// SetMasteryListen sets the "mastery_listen" field.
func (uwuo *UserWordUpdateOne) SetMasteryListen(i int16) *UserWordUpdateOne {
	uwuo.mutation.ResetMasteryListen()
	uwuo.mutation.SetMasteryListen(i)
	return uwuo
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableMasteryListen(i *int16) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetMasteryListen(*i)
	}
	return uwuo
}

// AddMasteryListen adds i to the "mastery_listen" field.
func (uwuo *UserWordUpdateOne) AddMasteryListen(i int16) *UserWordUpdateOne {
	uwuo.mutation.AddMasteryListen(i)
	return uwuo
}

// SetMasteryRead sets the "mastery_read" field.
func (uwuo *UserWordUpdateOne) SetMasteryRead(i int16) *UserWordUpdateOne {
	uwuo.mutation.ResetMasteryRead()
	uwuo.mutation.SetMasteryRead(i)
	return uwuo
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableMasteryRead(i *int16) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetMasteryRead(*i)
	}
	return uwuo
}

// AddMasteryRead adds i to the "mastery_read" field.
func (uwuo *UserWordUpdateOne) AddMasteryRead(i int16) *UserWordUpdateOne {
	uwuo.mutation.AddMasteryRead(i)
	return uwuo
}

// SetMasterySpell sets the "mastery_spell" field.
func (uwuo *UserWordUpdateOne) SetMasterySpell(i int16) *UserWordUpdateOne {
	uwuo.mutation.ResetMasterySpell()
	uwuo.mutation.SetMasterySpell(i)
	return uwuo
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableMasterySpell(i *int16) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetMasterySpell(*i)
	}
	return uwuo
}

// AddMasterySpell adds i to the "mastery_spell" field.
func (uwuo *UserWordUpdateOne) AddMasterySpell(i int16) *UserWordUpdateOne {
	uwuo.mutation.AddMasterySpell(i)
	return uwuo
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (uwuo *UserWordUpdateOne) SetMasteryPronounce(i int16) *UserWordUpdateOne {
	uwuo.mutation.ResetMasteryPronounce()
	uwuo.mutation.SetMasteryPronounce(i)
	return uwuo
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableMasteryPronounce(i *int16) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetMasteryPronounce(*i)
	}
	return uwuo
}

// AddMasteryPronounce adds i to the "mastery_pronounce" field.
func (uwuo *UserWordUpdateOne) AddMasteryPronounce(i int16) *UserWordUpdateOne {
	uwuo.mutation.AddMasteryPronounce(i)
	return uwuo
}

// SetMasteryUse sets the "mastery_use" field.
func (uwuo *UserWordUpdateOne) SetMasteryUse(i int16) *UserWordUpdateOne {
	uwuo.mutation.ResetMasteryUse()
	uwuo.mutation.SetMasteryUse(i)
	return uwuo
}

// SetNillableMasteryUse sets the "mastery_use" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableMasteryUse(i *int16) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetMasteryUse(*i)
	}
	return uwuo
}

// AddMasteryUse adds i to the "mastery_use" field.
func (uwuo *UserWordUpdateOne) AddMasteryUse(i int16) *UserWordUpdateOne {
	uwuo.mutation.AddMasteryUse(i)
	return uwuo
}

// SetMasteryOverall sets the "mastery_overall" field.
func (uwuo *UserWordUpdateOne) SetMasteryOverall(i int32) *UserWordUpdateOne {
	uwuo.mutation.ResetMasteryOverall()
	uwuo.mutation.SetMasteryOverall(i)
	return uwuo
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableMasteryOverall(i *int32) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetMasteryOverall(*i)
	}
	return uwuo
}

// AddMasteryOverall adds i to the "mastery_overall" field.
func (uwuo *UserWordUpdateOne) AddMasteryOverall(i int32) *UserWordUpdateOne {
	uwuo.mutation.AddMasteryOverall(i)
	return uwuo
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (uwuo *UserWordUpdateOne) SetReviewLastReviewAt(t time.Time) *UserWordUpdateOne {
	uwuo.mutation.SetReviewLastReviewAt(t)
	return uwuo
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableReviewLastReviewAt(t *time.Time) *UserWordUpdateOne {
	if t != nil {
		uwuo.SetReviewLastReviewAt(*t)
	}
	return uwuo
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (uwuo *UserWordUpdateOne) ClearReviewLastReviewAt() *UserWordUpdateOne {
	uwuo.mutation.ClearReviewLastReviewAt()
	return uwuo
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (uwuo *UserWordUpdateOne) SetReviewNextReviewAt(t time.Time) *UserWordUpdateOne {
	uwuo.mutation.SetReviewNextReviewAt(t)
	return uwuo
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableReviewNextReviewAt(t *time.Time) *UserWordUpdateOne {
	if t != nil {
		uwuo.SetReviewNextReviewAt(*t)
	}
	return uwuo
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (uwuo *UserWordUpdateOne) ClearReviewNextReviewAt() *UserWordUpdateOne {
	uwuo.mutation.ClearReviewNextReviewAt()
	return uwuo
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (uwuo *UserWordUpdateOne) SetReviewIntervalDays(i int32) *UserWordUpdateOne {
	uwuo.mutation.ResetReviewIntervalDays()
	uwuo.mutation.SetReviewIntervalDays(i)
	return uwuo
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableReviewIntervalDays(i *int32) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetReviewIntervalDays(*i)
	}
	return uwuo
}

// AddReviewIntervalDays adds i to the "review_interval_days" field.
func (uwuo *UserWordUpdateOne) AddReviewIntervalDays(i int32) *UserWordUpdateOne {
	uwuo.mutation.AddReviewIntervalDays(i)
	return uwuo
}

// SetReviewFailCount sets the "review_fail_count" field.
func (uwuo *UserWordUpdateOne) SetReviewFailCount(i int32) *UserWordUpdateOne {
	uwuo.mutation.ResetReviewFailCount()
	uwuo.mutation.SetReviewFailCount(i)
	return uwuo
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableReviewFailCount(i *int32) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetReviewFailCount(*i)
	}
	return uwuo
}

// AddReviewFailCount adds i to the "review_fail_count" field.
func (uwuo *UserWordUpdateOne) AddReviewFailCount(i int32) *UserWordUpdateOne {
	uwuo.mutation.AddReviewFailCount(i)
	return uwuo
}

// SetQueryCount sets the "query_count" field.
func (uwuo *UserWordUpdateOne) SetQueryCount(i int64) *UserWordUpdateOne {
	uwuo.mutation.ResetQueryCount()
	uwuo.mutation.SetQueryCount(i)
	return uwuo
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableQueryCount(i *int64) *UserWordUpdateOne {
	if i != nil {
		uwuo.SetQueryCount(*i)
	}
	return uwuo
}

// AddQueryCount adds i to the "query_count" field.
func (uwuo *UserWordUpdateOne) AddQueryCount(i int64) *UserWordUpdateOne {
	uwuo.mutation.AddQueryCount(i)
	return uwuo
}

// SetNotes sets the "notes" field.
func (uwuo *UserWordUpdateOne) SetNotes(s string) *UserWordUpdateOne {
	uwuo.mutation.SetNotes(s)
	return uwuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableNotes(s *string) *UserWordUpdateOne {
	if s != nil {
		uwuo.SetNotes(*s)
	}
	return uwuo
}

// ClearNotes clears the value of the "notes" field.
func (uwuo *UserWordUpdateOne) ClearNotes() *UserWordUpdateOne {
	uwuo.mutation.ClearNotes()
	return uwuo
}

// SetSentences sets the "sentences" field.
func (uwuo *UserWordUpdateOne) SetSentences(e []entity.Sentence) *UserWordUpdateOne {
	uwuo.mutation.SetSentences(e)
	return uwuo
}

// AppendSentences appends e to the "sentences" field.
func (uwuo *UserWordUpdateOne) AppendSentences(e []entity.Sentence) *UserWordUpdateOne {
	uwuo.mutation.AppendSentences(e)
	return uwuo
}

// SetRelations sets the "relations" field.
func (uwuo *UserWordUpdateOne) SetRelations(ewr []entity.UserWordRelation) *UserWordUpdateOne {
	uwuo.mutation.SetRelations(ewr)
	return uwuo
}

// AppendRelations appends ewr to the "relations" field.
func (uwuo *UserWordUpdateOne) AppendRelations(ewr []entity.UserWordRelation) *UserWordUpdateOne {
	uwuo.mutation.AppendRelations(ewr)
	return uwuo
}

// SetCreatedBy sets the "created_by" field.
func (uwuo *UserWordUpdateOne) SetCreatedBy(s string) *UserWordUpdateOne {
	uwuo.mutation.SetCreatedBy(s)
	return uwuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uwuo *UserWordUpdateOne) SetNillableCreatedBy(s *string) *UserWordUpdateOne {
	if s != nil {
		uwuo.SetCreatedBy(*s)
	}
	return uwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uwuo *UserWordUpdateOne) SetUpdatedAt(t time.Time) *UserWordUpdateOne {
	uwuo.mutation.SetUpdatedAt(t)
	return uwuo
}

// Mutation returns the UserWordMutation object of the builder.
func (uwuo *UserWordUpdateOne) Mutation() *UserWordMutation {
	return uwuo.mutation
}

// Where appends a list predicates to the UserWordUpdate builder.
func (uwuo *UserWordUpdateOne) Where(ps ...predicate.UserWord) *UserWordUpdateOne {
	uwuo.mutation.Where(ps...)
	return uwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uwuo *UserWordUpdateOne) Select(field string, fields ...string) *UserWordUpdateOne {
	uwuo.fields = append([]string{field}, fields...)
	return uwuo
}

// Save executes the query and returns the updated UserWord entity.
func (uwuo *UserWordUpdateOne) Save(ctx context.Context) (*UserWord, error) {
	uwuo.defaults()
	return withHooks(ctx, uwuo.sqlSave, uwuo.mutation, uwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uwuo *UserWordUpdateOne) SaveX(ctx context.Context) *UserWord {
	node, err := uwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uwuo *UserWordUpdateOne) Exec(ctx context.Context) error {
	_, err := uwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwuo *UserWordUpdateOne) ExecX(ctx context.Context) {
	if err := uwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwuo *UserWordUpdateOne) defaults() {
	if _, ok := uwuo.mutation.UpdatedAt(); !ok {
		v := userword.UpdateDefaultUpdatedAt()
		uwuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwuo *UserWordUpdateOne) check() error {
	if v, ok := uwuo.mutation.Word(); ok {
		if err := userword.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "UserWord.word": %w`, err)}
		}
	}
	return nil
}

func (uwuo *UserWordUpdateOne) sqlSave(ctx context.Context) (_node *UserWord, err error) {
	if err := uwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userword.Table, userword.Columns, sqlgraph.NewFieldSpec(userword.FieldID, field.TypeInt))
	id, ok := uwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserWord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userword.FieldID)
		for _, f := range fields {
			if !userword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwuo.mutation.UserID(); ok {
		_spec.SetField(userword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.AddedUserID(); ok {
		_spec.AddField(userword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.Word(); ok {
		_spec.SetField(userword.FieldWord, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.Normalized(); ok {
		_spec.SetField(userword.FieldNormalized, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.Language(); ok {
		_spec.SetField(userword.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.MasteryListen(); ok {
		_spec.SetField(userword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.AddedMasteryListen(); ok {
		_spec.AddField(userword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.MasteryRead(); ok {
		_spec.SetField(userword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.AddedMasteryRead(); ok {
		_spec.AddField(userword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.MasterySpell(); ok {
		_spec.SetField(userword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.AddedMasterySpell(); ok {
		_spec.AddField(userword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.MasteryPronounce(); ok {
		_spec.SetField(userword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.AddedMasteryPronounce(); ok {
		_spec.AddField(userword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.MasteryUse(); ok {
		_spec.SetField(userword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.AddedMasteryUse(); ok {
		_spec.AddField(userword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := uwuo.mutation.MasteryOverall(); ok {
		_spec.SetField(userword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := uwuo.mutation.AddedMasteryOverall(); ok {
		_spec.AddField(userword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := uwuo.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(userword.FieldReviewLastReviewAt, field.TypeTime, value)
	}
	if uwuo.mutation.ReviewLastReviewAtCleared() {
		_spec.ClearField(userword.FieldReviewLastReviewAt, field.TypeTime)
	}
	if value, ok := uwuo.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(userword.FieldReviewNextReviewAt, field.TypeTime, value)
	}
	if uwuo.mutation.ReviewNextReviewAtCleared() {
		_spec.ClearField(userword.FieldReviewNextReviewAt, field.TypeTime)
	}
	if value, ok := uwuo.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(userword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := uwuo.mutation.AddedReviewIntervalDays(); ok {
		_spec.AddField(userword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := uwuo.mutation.ReviewFailCount(); ok {
		_spec.SetField(userword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := uwuo.mutation.AddedReviewFailCount(); ok {
		_spec.AddField(userword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := uwuo.mutation.QueryCount(); ok {
		_spec.SetField(userword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.AddedQueryCount(); ok {
		_spec.AddField(userword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.Notes(); ok {
		_spec.SetField(userword.FieldNotes, field.TypeString, value)
	}
	if uwuo.mutation.NotesCleared() {
		_spec.ClearField(userword.FieldNotes, field.TypeString)
	}
	if value, ok := uwuo.mutation.Sentences(); ok {
		_spec.SetField(userword.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := uwuo.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userword.FieldSentences, value)
		})
	}
	if value, ok := uwuo.mutation.Relations(); ok {
		_spec.SetField(userword.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := uwuo.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userword.FieldRelations, value)
		})
	}
	if value, ok := uwuo.mutation.CreatedBy(); ok {
		_spec.SetField(userword.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userword.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &UserWord{config: uwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uwuo.mutation.done = true
	return _node, nil
}
