// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedlexeme"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/word"
)

// LearnedLexeme is the model entity for the LearnedLexeme schema.
type LearnedLexeme struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Term holds the value of the "term" field.
	Term string `json:"term,omitempty"`
	// Normalized holds the value of the "normalized" field.
	Normalized string `json:"normalized,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// WordID holds the value of the "word_id" field.
	WordID *int `json:"word_id,omitempty"`
	// MasteryListen holds the value of the "mastery_listen" field.
	MasteryListen int16 `json:"mastery_listen,omitempty"`
	// MasteryRead holds the value of the "mastery_read" field.
	MasteryRead int16 `json:"mastery_read,omitempty"`
	// MasterySpell holds the value of the "mastery_spell" field.
	MasterySpell int16 `json:"mastery_spell,omitempty"`
	// MasteryPronounce holds the value of the "mastery_pronounce" field.
	MasteryPronounce int16 `json:"mastery_pronounce,omitempty"`
	// MasteryOverall holds the value of the "mastery_overall" field.
	MasteryOverall int32 `json:"mastery_overall,omitempty"`
	// ReviewLastReviewAt holds the value of the "review_last_review_at" field.
	ReviewLastReviewAt *time.Time `json:"review_last_review_at,omitempty"`
	// ReviewNextReviewAt holds the value of the "review_next_review_at" field.
	ReviewNextReviewAt *time.Time `json:"review_next_review_at,omitempty"`
	// ReviewIntervalDays holds the value of the "review_interval_days" field.
	ReviewIntervalDays int32 `json:"review_interval_days,omitempty"`
	// ReviewFailCount holds the value of the "review_fail_count" field.
	ReviewFailCount int32 `json:"review_fail_count,omitempty"`
	// QueryCount holds the value of the "query_count" field.
	QueryCount int64 `json:"query_count,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Sentences holds the value of the "sentences" field.
	Sentences []entity.Sentence `json:"sentences,omitempty"`
	// Relations holds the value of the "relations" field.
	Relations []entity.LearnedLexemeRelation `json:"relations,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LearnedLexemeQuery when eager-loading is set.
	Edges        LearnedLexemeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LearnedLexemeEdges holds the relations/edges for other nodes in the graph.
type LearnedLexemeEdges struct {
	// Word holds the value of the word edge.
	Word *Word `json:"word,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WordOrErr returns the Word value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LearnedLexemeEdges) WordOrErr() (*Word, error) {
	if e.Word != nil {
		return e.Word, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: word.Label}
	}
	return nil, &NotLoadedError{edge: "word"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LearnedLexeme) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case learnedlexeme.FieldSentences, learnedlexeme.FieldRelations, learnedlexeme.FieldTags:
			values[i] = new([]byte)
		case learnedlexeme.FieldID, learnedlexeme.FieldUserID, learnedlexeme.FieldWordID, learnedlexeme.FieldMasteryListen, learnedlexeme.FieldMasteryRead, learnedlexeme.FieldMasterySpell, learnedlexeme.FieldMasteryPronounce, learnedlexeme.FieldMasteryOverall, learnedlexeme.FieldReviewIntervalDays, learnedlexeme.FieldReviewFailCount, learnedlexeme.FieldQueryCount:
			values[i] = new(sql.NullInt64)
		case learnedlexeme.FieldTerm, learnedlexeme.FieldNormalized, learnedlexeme.FieldLanguage, learnedlexeme.FieldNotes, learnedlexeme.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case learnedlexeme.FieldReviewLastReviewAt, learnedlexeme.FieldReviewNextReviewAt, learnedlexeme.FieldCreatedAt, learnedlexeme.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LearnedLexeme fields.
func (ll *LearnedLexeme) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case learnedlexeme.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ll.ID = int(value.Int64)
		case learnedlexeme.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ll.UserID = value.Int64
			}
		case learnedlexeme.FieldTerm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field term", values[i])
			} else if value.Valid {
				ll.Term = value.String
			}
		case learnedlexeme.FieldNormalized:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field normalized", values[i])
			} else if value.Valid {
				ll.Normalized = value.String
			}
		case learnedlexeme.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				ll.Language = value.String
			}
		case learnedlexeme.FieldWordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field word_id", values[i])
			} else if value.Valid {
				ll.WordID = new(int)
				*ll.WordID = int(value.Int64)
			}
		case learnedlexeme.FieldMasteryListen:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_listen", values[i])
			} else if value.Valid {
				ll.MasteryListen = int16(value.Int64)
			}
		case learnedlexeme.FieldMasteryRead:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_read", values[i])
			} else if value.Valid {
				ll.MasteryRead = int16(value.Int64)
			}
		case learnedlexeme.FieldMasterySpell:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_spell", values[i])
			} else if value.Valid {
				ll.MasterySpell = int16(value.Int64)
			}
		case learnedlexeme.FieldMasteryPronounce:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_pronounce", values[i])
			} else if value.Valid {
				ll.MasteryPronounce = int16(value.Int64)
			}
		case learnedlexeme.FieldMasteryOverall:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_overall", values[i])
			} else if value.Valid {
				ll.MasteryOverall = int32(value.Int64)
			}
		case learnedlexeme.FieldReviewLastReviewAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_last_review_at", values[i])
			} else if value.Valid {
				ll.ReviewLastReviewAt = new(time.Time)
				*ll.ReviewLastReviewAt = value.Time
			}
		case learnedlexeme.FieldReviewNextReviewAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_next_review_at", values[i])
			} else if value.Valid {
				ll.ReviewNextReviewAt = new(time.Time)
				*ll.ReviewNextReviewAt = value.Time
			}
		case learnedlexeme.FieldReviewIntervalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_interval_days", values[i])
			} else if value.Valid {
				ll.ReviewIntervalDays = int32(value.Int64)
			}
		case learnedlexeme.FieldReviewFailCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_fail_count", values[i])
			} else if value.Valid {
				ll.ReviewFailCount = int32(value.Int64)
			}
		case learnedlexeme.FieldQueryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field query_count", values[i])
			} else if value.Valid {
				ll.QueryCount = value.Int64
			}
		case learnedlexeme.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				ll.Notes = new(string)
				*ll.Notes = value.String
			}
		case learnedlexeme.FieldSentences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sentences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ll.Sentences); err != nil {
					return fmt.Errorf("unmarshal field sentences: %w", err)
				}
			}
		case learnedlexeme.FieldRelations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field relations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ll.Relations); err != nil {
					return fmt.Errorf("unmarshal field relations: %w", err)
				}
			}
		case learnedlexeme.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ll.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case learnedlexeme.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ll.CreatedBy = value.String
			}
		case learnedlexeme.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ll.CreatedAt = value.Time
			}
		case learnedlexeme.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ll.UpdatedAt = value.Time
			}
		default:
			ll.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LearnedLexeme.
// This includes values selected through modifiers, order, etc.
func (ll *LearnedLexeme) Value(name string) (ent.Value, error) {
	return ll.selectValues.Get(name)
}

// QueryWord queries the "word" edge of the LearnedLexeme entity.
func (ll *LearnedLexeme) QueryWord() *WordQuery {
	return NewLearnedLexemeClient(ll.config).QueryWord(ll)
}

// Update returns a builder for updating this LearnedLexeme.
// Note that you need to call LearnedLexeme.Unwrap() before calling this method if this LearnedLexeme
// was returned from a transaction, and the transaction was committed or rolled back.
func (ll *LearnedLexeme) Update() *LearnedLexemeUpdateOne {
	return NewLearnedLexemeClient(ll.config).UpdateOne(ll)
}

// Unwrap unwraps the LearnedLexeme entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ll *LearnedLexeme) Unwrap() *LearnedLexeme {
	_tx, ok := ll.config.driver.(*txDriver)
	if !ok {
		panic("ent: LearnedLexeme is not a transactional entity")
	}
	ll.config.driver = _tx.drv
	return ll
}

// String implements the fmt.Stringer.
func (ll *LearnedLexeme) String() string {
	var builder strings.Builder
	builder.WriteString("LearnedLexeme(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ll.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ll.UserID))
	builder.WriteString(", ")
	builder.WriteString("term=")
	builder.WriteString(ll.Term)
	builder.WriteString(", ")
	builder.WriteString("normalized=")
	builder.WriteString(ll.Normalized)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(ll.Language)
	builder.WriteString(", ")
	if v := ll.WordID; v != nil {
		builder.WriteString("word_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("mastery_listen=")
	builder.WriteString(fmt.Sprintf("%v", ll.MasteryListen))
	builder.WriteString(", ")
	builder.WriteString("mastery_read=")
	builder.WriteString(fmt.Sprintf("%v", ll.MasteryRead))
	builder.WriteString(", ")
	builder.WriteString("mastery_spell=")
	builder.WriteString(fmt.Sprintf("%v", ll.MasterySpell))
	builder.WriteString(", ")
	builder.WriteString("mastery_pronounce=")
	builder.WriteString(fmt.Sprintf("%v", ll.MasteryPronounce))
	builder.WriteString(", ")
	builder.WriteString("mastery_overall=")
	builder.WriteString(fmt.Sprintf("%v", ll.MasteryOverall))
	builder.WriteString(", ")
	if v := ll.ReviewLastReviewAt; v != nil {
		builder.WriteString("review_last_review_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ll.ReviewNextReviewAt; v != nil {
		builder.WriteString("review_next_review_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("review_interval_days=")
	builder.WriteString(fmt.Sprintf("%v", ll.ReviewIntervalDays))
	builder.WriteString(", ")
	builder.WriteString("review_fail_count=")
	builder.WriteString(fmt.Sprintf("%v", ll.ReviewFailCount))
	builder.WriteString(", ")
	builder.WriteString("query_count=")
	builder.WriteString(fmt.Sprintf("%v", ll.QueryCount))
	builder.WriteString(", ")
	if v := ll.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("sentences=")
	builder.WriteString(fmt.Sprintf("%v", ll.Sentences))
	builder.WriteString(", ")
	builder.WriteString("relations=")
	builder.WriteString(fmt.Sprintf("%v", ll.Relations))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ll.Tags))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ll.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ll.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ll.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LearnedLexemes is a parsable slice of LearnedLexeme.
type LearnedLexemes []*LearnedLexeme
