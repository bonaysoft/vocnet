// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// LearnedWordsColumns holds the columns for the "learned_words" table.
	LearnedWordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt64},
		{Name: "term", Type: field.TypeString},
		{Name: "normalized", Type: field.TypeString, Default: ""},
		{Name: "language", Type: field.TypeString, Default: "en"},
		{Name: "mastery_listen", Type: field.TypeInt16, Default: 0},
		{Name: "mastery_read", Type: field.TypeInt16, Default: 0},
		{Name: "mastery_spell", Type: field.TypeInt16, Default: 0},
		{Name: "mastery_pronounce", Type: field.TypeInt16, Default: 0},
		{Name: "mastery_overall", Type: field.TypeInt32, Default: 0},
		{Name: "review_last_review_at", Type: field.TypeTime, Nullable: true},
		{Name: "review_next_review_at", Type: field.TypeTime, Nullable: true},
		{Name: "review_interval_days", Type: field.TypeInt32, Default: 0},
		{Name: "review_fail_count", Type: field.TypeInt32, Default: 0},
		{Name: "query_count", Type: field.TypeInt64, Default: 0},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "sentences", Type: field.TypeJSON},
		{Name: "relations", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON, SchemaType: map[string]string{"postgres": "jsonb"}},
		{Name: "created_by", Type: field.TypeString, Default: ""},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "word_id", Type: field.TypeInt, Nullable: true},
	}
	// LearnedWordsTable holds the schema information for the "learned_words" table.
	LearnedWordsTable = &schema.Table{
		Name:       "learned_words",
		Columns:    LearnedWordsColumns,
		PrimaryKey: []*schema.Column{LearnedWordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "learned_words_words_learned_lexemes",
				Columns:    []*schema.Column{LearnedWordsColumns[22]},
				RefColumns: []*schema.Column{WordsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "learnedlexeme_user_id_language_term",
				Unique:  true,
				Columns: []*schema.Column{LearnedWordsColumns[1], LearnedWordsColumns[4], LearnedWordsColumns[2]},
			},
			{
				Name:    "learnedlexeme_language_normalized",
				Unique:  false,
				Columns: []*schema.Column{LearnedWordsColumns[4], LearnedWordsColumns[3]},
			},
		},
	}
	// WordsColumns holds the columns for the "words" table.
	WordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "text", Type: field.TypeString},
		{Name: "normalized", Type: field.TypeString, Default: ""},
		{Name: "language", Type: field.TypeString, Default: "en"},
		{Name: "word_type", Type: field.TypeString, Default: "lemma"},
		{Name: "lemma", Type: field.TypeString, Nullable: true},
		{Name: "phonetics", Type: field.TypeJSON},
		{Name: "definitions", Type: field.TypeJSON},
		{Name: "phrases", Type: field.TypeJSON},
		{Name: "sentences", Type: field.TypeJSON},
		{Name: "relations", Type: field.TypeJSON},
		{Name: "categories", Type: field.TypeJSON, SchemaType: map[string]string{"postgres": "jsonb"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// WordsTable holds the schema information for the "words" table.
	WordsTable = &schema.Table{
		Name:       "words",
		Columns:    WordsColumns,
		PrimaryKey: []*schema.Column{WordsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "word_language_text",
				Unique:  true,
				Columns: []*schema.Column{WordsColumns[3], WordsColumns[1]},
			},
			{
				Name:    "word_language_normalized",
				Unique:  false,
				Columns: []*schema.Column{WordsColumns[3], WordsColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		LearnedWordsTable,
		WordsTable,
	}
)

func init() {
	LearnedWordsTable.ForeignKeys[0].RefTable = WordsTable
	LearnedWordsTable.Annotation = &entsql.Annotation{
		Table: "learned_words",
	}
	WordsTable.Annotation = &entsql.Annotation{
		Table: "words",
	}
	WordsTable.Annotation.Checks = map[string]string{
		"chk_words_lemma_ref": "((word_type = 'lemma' AND lemma IS NULL) OR (word_type <> 'lemma' AND lemma IS NOT NULL))",
	}
}
