// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedword"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
)

// LearnedWordUpdate is the builder for updating LearnedWord entities.
type LearnedWordUpdate struct {
	config
	hooks    []Hook
	mutation *LearnedWordMutation
}

// Where appends a list predicates to the LearnedWordUpdate builder.
func (lwu *LearnedWordUpdate) Where(ps ...predicate.LearnedWord) *LearnedWordUpdate {
	lwu.mutation.Where(ps...)
	return lwu
}

// SetUserID sets the "user_id" field.
func (lwu *LearnedWordUpdate) SetUserID(i int64) *LearnedWordUpdate {
	lwu.mutation.ResetUserID()
	lwu.mutation.SetUserID(i)
	return lwu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableUserID(i *int64) *LearnedWordUpdate {
	if i != nil {
		lwu.SetUserID(*i)
	}
	return lwu
}

// AddUserID adds i to the "user_id" field.
func (lwu *LearnedWordUpdate) AddUserID(i int64) *LearnedWordUpdate {
	lwu.mutation.AddUserID(i)
	return lwu
}

// SetTerm sets the "term" field.
func (lwu *LearnedWordUpdate) SetTerm(s string) *LearnedWordUpdate {
	lwu.mutation.SetTerm(s)
	return lwu
}

// SetNillableTerm sets the "term" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableTerm(s *string) *LearnedWordUpdate {
	if s != nil {
		lwu.SetTerm(*s)
	}
	return lwu
}

// SetNormalized sets the "normalized" field.
func (lwu *LearnedWordUpdate) SetNormalized(s string) *LearnedWordUpdate {
	lwu.mutation.SetNormalized(s)
	return lwu
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableNormalized(s *string) *LearnedWordUpdate {
	if s != nil {
		lwu.SetNormalized(*s)
	}
	return lwu
}

// SetLanguage sets the "language" field.
func (lwu *LearnedWordUpdate) SetLanguage(s string) *LearnedWordUpdate {
	lwu.mutation.SetLanguage(s)
	return lwu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableLanguage(s *string) *LearnedWordUpdate {
	if s != nil {
		lwu.SetLanguage(*s)
	}
	return lwu
}

// SetMasteryListen sets the "mastery_listen" field.
func (lwu *LearnedWordUpdate) SetMasteryListen(i int16) *LearnedWordUpdate {
	lwu.mutation.ResetMasteryListen()
	lwu.mutation.SetMasteryListen(i)
	return lwu
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableMasteryListen(i *int16) *LearnedWordUpdate {
	if i != nil {
		lwu.SetMasteryListen(*i)
	}
	return lwu
}

// AddMasteryListen adds i to the "mastery_listen" field.
func (lwu *LearnedWordUpdate) AddMasteryListen(i int16) *LearnedWordUpdate {
	lwu.mutation.AddMasteryListen(i)
	return lwu
}

// SetMasteryRead sets the "mastery_read" field.
func (lwu *LearnedWordUpdate) SetMasteryRead(i int16) *LearnedWordUpdate {
	lwu.mutation.ResetMasteryRead()
	lwu.mutation.SetMasteryRead(i)
	return lwu
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableMasteryRead(i *int16) *LearnedWordUpdate {
	if i != nil {
		lwu.SetMasteryRead(*i)
	}
	return lwu
}

// AddMasteryRead adds i to the "mastery_read" field.
func (lwu *LearnedWordUpdate) AddMasteryRead(i int16) *LearnedWordUpdate {
	lwu.mutation.AddMasteryRead(i)
	return lwu
}

// SetMasterySpell sets the "mastery_spell" field.
func (lwu *LearnedWordUpdate) SetMasterySpell(i int16) *LearnedWordUpdate {
	lwu.mutation.ResetMasterySpell()
	lwu.mutation.SetMasterySpell(i)
	return lwu
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableMasterySpell(i *int16) *LearnedWordUpdate {
	if i != nil {
		lwu.SetMasterySpell(*i)
	}
	return lwu
}

// AddMasterySpell adds i to the "mastery_spell" field.
func (lwu *LearnedWordUpdate) AddMasterySpell(i int16) *LearnedWordUpdate {
	lwu.mutation.AddMasterySpell(i)
	return lwu
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (lwu *LearnedWordUpdate) SetMasteryPronounce(i int16) *LearnedWordUpdate {
	lwu.mutation.ResetMasteryPronounce()
	lwu.mutation.SetMasteryPronounce(i)
	return lwu
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableMasteryPronounce(i *int16) *LearnedWordUpdate {
	if i != nil {
		lwu.SetMasteryPronounce(*i)
	}
	return lwu
}

// AddMasteryPronounce adds i to the "mastery_pronounce" field.
func (lwu *LearnedWordUpdate) AddMasteryPronounce(i int16) *LearnedWordUpdate {
	lwu.mutation.AddMasteryPronounce(i)
	return lwu
}

// SetMasteryUse sets the "mastery_use" field.
func (lwu *LearnedWordUpdate) SetMasteryUse(i int16) *LearnedWordUpdate {
	lwu.mutation.ResetMasteryUse()
	lwu.mutation.SetMasteryUse(i)
	return lwu
}

// SetNillableMasteryUse sets the "mastery_use" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableMasteryUse(i *int16) *LearnedWordUpdate {
	if i != nil {
		lwu.SetMasteryUse(*i)
	}
	return lwu
}

// AddMasteryUse adds i to the "mastery_use" field.
func (lwu *LearnedWordUpdate) AddMasteryUse(i int16) *LearnedWordUpdate {
	lwu.mutation.AddMasteryUse(i)
	return lwu
}

// SetMasteryOverall sets the "mastery_overall" field.
func (lwu *LearnedWordUpdate) SetMasteryOverall(i int32) *LearnedWordUpdate {
	lwu.mutation.ResetMasteryOverall()
	lwu.mutation.SetMasteryOverall(i)
	return lwu
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableMasteryOverall(i *int32) *LearnedWordUpdate {
	if i != nil {
		lwu.SetMasteryOverall(*i)
	}
	return lwu
}

// AddMasteryOverall adds i to the "mastery_overall" field.
func (lwu *LearnedWordUpdate) AddMasteryOverall(i int32) *LearnedWordUpdate {
	lwu.mutation.AddMasteryOverall(i)
	return lwu
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (lwu *LearnedWordUpdate) SetReviewLastReviewAt(t time.Time) *LearnedWordUpdate {
	lwu.mutation.SetReviewLastReviewAt(t)
	return lwu
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableReviewLastReviewAt(t *time.Time) *LearnedWordUpdate {
	if t != nil {
		lwu.SetReviewLastReviewAt(*t)
	}
	return lwu
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (lwu *LearnedWordUpdate) ClearReviewLastReviewAt() *LearnedWordUpdate {
	lwu.mutation.ClearReviewLastReviewAt()
	return lwu
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (lwu *LearnedWordUpdate) SetReviewNextReviewAt(t time.Time) *LearnedWordUpdate {
	lwu.mutation.SetReviewNextReviewAt(t)
	return lwu
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableReviewNextReviewAt(t *time.Time) *LearnedWordUpdate {
	if t != nil {
		lwu.SetReviewNextReviewAt(*t)
	}
	return lwu
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (lwu *LearnedWordUpdate) ClearReviewNextReviewAt() *LearnedWordUpdate {
	lwu.mutation.ClearReviewNextReviewAt()
	return lwu
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (lwu *LearnedWordUpdate) SetReviewIntervalDays(i int32) *LearnedWordUpdate {
	lwu.mutation.ResetReviewIntervalDays()
	lwu.mutation.SetReviewIntervalDays(i)
	return lwu
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableReviewIntervalDays(i *int32) *LearnedWordUpdate {
	if i != nil {
		lwu.SetReviewIntervalDays(*i)
	}
	return lwu
}

// AddReviewIntervalDays adds i to the "review_interval_days" field.
func (lwu *LearnedWordUpdate) AddReviewIntervalDays(i int32) *LearnedWordUpdate {
	lwu.mutation.AddReviewIntervalDays(i)
	return lwu
}

// SetReviewFailCount sets the "review_fail_count" field.
func (lwu *LearnedWordUpdate) SetReviewFailCount(i int32) *LearnedWordUpdate {
	lwu.mutation.ResetReviewFailCount()
	lwu.mutation.SetReviewFailCount(i)
	return lwu
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableReviewFailCount(i *int32) *LearnedWordUpdate {
	if i != nil {
		lwu.SetReviewFailCount(*i)
	}
	return lwu
}

// AddReviewFailCount adds i to the "review_fail_count" field.
func (lwu *LearnedWordUpdate) AddReviewFailCount(i int32) *LearnedWordUpdate {
	lwu.mutation.AddReviewFailCount(i)
	return lwu
}

// SetQueryCount sets the "query_count" field.
func (lwu *LearnedWordUpdate) SetQueryCount(i int64) *LearnedWordUpdate {
	lwu.mutation.ResetQueryCount()
	lwu.mutation.SetQueryCount(i)
	return lwu
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableQueryCount(i *int64) *LearnedWordUpdate {
	if i != nil {
		lwu.SetQueryCount(*i)
	}
	return lwu
}

// AddQueryCount adds i to the "query_count" field.
func (lwu *LearnedWordUpdate) AddQueryCount(i int64) *LearnedWordUpdate {
	lwu.mutation.AddQueryCount(i)
	return lwu
}

// SetNotes sets the "notes" field.
func (lwu *LearnedWordUpdate) SetNotes(s string) *LearnedWordUpdate {
	lwu.mutation.SetNotes(s)
	return lwu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableNotes(s *string) *LearnedWordUpdate {
	if s != nil {
		lwu.SetNotes(*s)
	}
	return lwu
}

// ClearNotes clears the value of the "notes" field.
func (lwu *LearnedWordUpdate) ClearNotes() *LearnedWordUpdate {
	lwu.mutation.ClearNotes()
	return lwu
}

// SetSentences sets the "sentences" field.
func (lwu *LearnedWordUpdate) SetSentences(e []entity.Sentence) *LearnedWordUpdate {
	lwu.mutation.SetSentences(e)
	return lwu
}

// AppendSentences appends e to the "sentences" field.
func (lwu *LearnedWordUpdate) AppendSentences(e []entity.Sentence) *LearnedWordUpdate {
	lwu.mutation.AppendSentences(e)
	return lwu
}

// SetRelations sets the "relations" field.
func (lwu *LearnedWordUpdate) SetRelations(ewr []entity.LearnedWordRelation) *LearnedWordUpdate {
	lwu.mutation.SetRelations(ewr)
	return lwu
}

// AppendRelations appends ewr to the "relations" field.
func (lwu *LearnedWordUpdate) AppendRelations(ewr []entity.LearnedWordRelation) *LearnedWordUpdate {
	lwu.mutation.AppendRelations(ewr)
	return lwu
}

// SetCreatedBy sets the "created_by" field.
func (lwu *LearnedWordUpdate) SetCreatedBy(s string) *LearnedWordUpdate {
	lwu.mutation.SetCreatedBy(s)
	return lwu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lwu *LearnedWordUpdate) SetNillableCreatedBy(s *string) *LearnedWordUpdate {
	if s != nil {
		lwu.SetCreatedBy(*s)
	}
	return lwu
}

// SetUpdatedAt sets the "updated_at" field.
func (lwu *LearnedWordUpdate) SetUpdatedAt(t time.Time) *LearnedWordUpdate {
	lwu.mutation.SetUpdatedAt(t)
	return lwu
}

// Mutation returns the LearnedWordMutation object of the builder.
func (lwu *LearnedWordUpdate) Mutation() *LearnedWordMutation {
	return lwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lwu *LearnedWordUpdate) Save(ctx context.Context) (int, error) {
	lwu.defaults()
	return withHooks(ctx, lwu.sqlSave, lwu.mutation, lwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lwu *LearnedWordUpdate) SaveX(ctx context.Context) int {
	affected, err := lwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lwu *LearnedWordUpdate) Exec(ctx context.Context) error {
	_, err := lwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lwu *LearnedWordUpdate) ExecX(ctx context.Context) {
	if err := lwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lwu *LearnedWordUpdate) defaults() {
	if _, ok := lwu.mutation.UpdatedAt(); !ok {
		v := learnedword.UpdateDefaultUpdatedAt()
		lwu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lwu *LearnedWordUpdate) check() error {
	if v, ok := lwu.mutation.Term(); ok {
		if err := learnedword.TermValidator(v); err != nil {
			return &ValidationError{Name: "term", err: fmt.Errorf(`ent: validator failed for field "LearnedWord.term": %w`, err)}
		}
	}
	return nil
}

func (lwu *LearnedWordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(learnedword.Table, learnedword.Columns, sqlgraph.NewFieldSpec(learnedword.FieldID, field.TypeInt))
	if ps := lwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lwu.mutation.UserID(); ok {
		_spec.SetField(learnedword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := lwu.mutation.AddedUserID(); ok {
		_spec.AddField(learnedword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := lwu.mutation.Term(); ok {
		_spec.SetField(learnedword.FieldTerm, field.TypeString, value)
	}
	if value, ok := lwu.mutation.Normalized(); ok {
		_spec.SetField(learnedword.FieldNormalized, field.TypeString, value)
	}
	if value, ok := lwu.mutation.Language(); ok {
		_spec.SetField(learnedword.FieldLanguage, field.TypeString, value)
	}
	if value, ok := lwu.mutation.MasteryListen(); ok {
		_spec.SetField(learnedword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.AddedMasteryListen(); ok {
		_spec.AddField(learnedword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.MasteryRead(); ok {
		_spec.SetField(learnedword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.AddedMasteryRead(); ok {
		_spec.AddField(learnedword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.MasterySpell(); ok {
		_spec.SetField(learnedword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.AddedMasterySpell(); ok {
		_spec.AddField(learnedword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.MasteryPronounce(); ok {
		_spec.SetField(learnedword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.AddedMasteryPronounce(); ok {
		_spec.AddField(learnedword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.MasteryUse(); ok {
		_spec.SetField(learnedword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.AddedMasteryUse(); ok {
		_spec.AddField(learnedword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := lwu.mutation.MasteryOverall(); ok {
		_spec.SetField(learnedword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := lwu.mutation.AddedMasteryOverall(); ok {
		_spec.AddField(learnedword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := lwu.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(learnedword.FieldReviewLastReviewAt, field.TypeTime, value)
	}
	if lwu.mutation.ReviewLastReviewAtCleared() {
		_spec.ClearField(learnedword.FieldReviewLastReviewAt, field.TypeTime)
	}
	if value, ok := lwu.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(learnedword.FieldReviewNextReviewAt, field.TypeTime, value)
	}
	if lwu.mutation.ReviewNextReviewAtCleared() {
		_spec.ClearField(learnedword.FieldReviewNextReviewAt, field.TypeTime)
	}
	if value, ok := lwu.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(learnedword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := lwu.mutation.AddedReviewIntervalDays(); ok {
		_spec.AddField(learnedword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := lwu.mutation.ReviewFailCount(); ok {
		_spec.SetField(learnedword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := lwu.mutation.AddedReviewFailCount(); ok {
		_spec.AddField(learnedword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := lwu.mutation.QueryCount(); ok {
		_spec.SetField(learnedword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := lwu.mutation.AddedQueryCount(); ok {
		_spec.AddField(learnedword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := lwu.mutation.Notes(); ok {
		_spec.SetField(learnedword.FieldNotes, field.TypeString, value)
	}
	if lwu.mutation.NotesCleared() {
		_spec.ClearField(learnedword.FieldNotes, field.TypeString)
	}
	if value, ok := lwu.mutation.Sentences(); ok {
		_spec.SetField(learnedword.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := lwu.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedword.FieldSentences, value)
		})
	}
	if value, ok := lwu.mutation.Relations(); ok {
		_spec.SetField(learnedword.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := lwu.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedword.FieldRelations, value)
		})
	}
	if value, ok := lwu.mutation.CreatedBy(); ok {
		_spec.SetField(learnedword.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := lwu.mutation.UpdatedAt(); ok {
		_spec.SetField(learnedword.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{learnedword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lwu.mutation.done = true
	return n, nil
}

// LearnedWordUpdateOne is the builder for updating a single LearnedWord entity.
type LearnedWordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LearnedWordMutation
}

// SetUserID sets the "user_id" field.
func (lwuo *LearnedWordUpdateOne) SetUserID(i int64) *LearnedWordUpdateOne {
	lwuo.mutation.ResetUserID()
	lwuo.mutation.SetUserID(i)
	return lwuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableUserID(i *int64) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetUserID(*i)
	}
	return lwuo
}

// AddUserID adds i to the "user_id" field.
func (lwuo *LearnedWordUpdateOne) AddUserID(i int64) *LearnedWordUpdateOne {
	lwuo.mutation.AddUserID(i)
	return lwuo
}

// SetTerm sets the "term" field.
func (lwuo *LearnedWordUpdateOne) SetTerm(s string) *LearnedWordUpdateOne {
	lwuo.mutation.SetTerm(s)
	return lwuo
}

// SetNillableTerm sets the "term" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableTerm(s *string) *LearnedWordUpdateOne {
	if s != nil {
		lwuo.SetTerm(*s)
	}
	return lwuo
}

// SetNormalized sets the "normalized" field.
func (lwuo *LearnedWordUpdateOne) SetNormalized(s string) *LearnedWordUpdateOne {
	lwuo.mutation.SetNormalized(s)
	return lwuo
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableNormalized(s *string) *LearnedWordUpdateOne {
	if s != nil {
		lwuo.SetNormalized(*s)
	}
	return lwuo
}

// SetLanguage sets the "language" field.
func (lwuo *LearnedWordUpdateOne) SetLanguage(s string) *LearnedWordUpdateOne {
	lwuo.mutation.SetLanguage(s)
	return lwuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableLanguage(s *string) *LearnedWordUpdateOne {
	if s != nil {
		lwuo.SetLanguage(*s)
	}
	return lwuo
}

// SetMasteryListen sets the "mastery_listen" field.
func (lwuo *LearnedWordUpdateOne) SetMasteryListen(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.ResetMasteryListen()
	lwuo.mutation.SetMasteryListen(i)
	return lwuo
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableMasteryListen(i *int16) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetMasteryListen(*i)
	}
	return lwuo
}

// AddMasteryListen adds i to the "mastery_listen" field.
func (lwuo *LearnedWordUpdateOne) AddMasteryListen(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.AddMasteryListen(i)
	return lwuo
}

// SetMasteryRead sets the "mastery_read" field.
func (lwuo *LearnedWordUpdateOne) SetMasteryRead(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.ResetMasteryRead()
	lwuo.mutation.SetMasteryRead(i)
	return lwuo
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableMasteryRead(i *int16) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetMasteryRead(*i)
	}
	return lwuo
}

// AddMasteryRead adds i to the "mastery_read" field.
func (lwuo *LearnedWordUpdateOne) AddMasteryRead(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.AddMasteryRead(i)
	return lwuo
}

// SetMasterySpell sets the "mastery_spell" field.
func (lwuo *LearnedWordUpdateOne) SetMasterySpell(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.ResetMasterySpell()
	lwuo.mutation.SetMasterySpell(i)
	return lwuo
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableMasterySpell(i *int16) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetMasterySpell(*i)
	}
	return lwuo
}

// AddMasterySpell adds i to the "mastery_spell" field.
func (lwuo *LearnedWordUpdateOne) AddMasterySpell(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.AddMasterySpell(i)
	return lwuo
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (lwuo *LearnedWordUpdateOne) SetMasteryPronounce(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.ResetMasteryPronounce()
	lwuo.mutation.SetMasteryPronounce(i)
	return lwuo
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableMasteryPronounce(i *int16) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetMasteryPronounce(*i)
	}
	return lwuo
}

// AddMasteryPronounce adds i to the "mastery_pronounce" field.
func (lwuo *LearnedWordUpdateOne) AddMasteryPronounce(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.AddMasteryPronounce(i)
	return lwuo
}

// SetMasteryUse sets the "mastery_use" field.
func (lwuo *LearnedWordUpdateOne) SetMasteryUse(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.ResetMasteryUse()
	lwuo.mutation.SetMasteryUse(i)
	return lwuo
}

// SetNillableMasteryUse sets the "mastery_use" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableMasteryUse(i *int16) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetMasteryUse(*i)
	}
	return lwuo
}

// AddMasteryUse adds i to the "mastery_use" field.
func (lwuo *LearnedWordUpdateOne) AddMasteryUse(i int16) *LearnedWordUpdateOne {
	lwuo.mutation.AddMasteryUse(i)
	return lwuo
}

// SetMasteryOverall sets the "mastery_overall" field.
func (lwuo *LearnedWordUpdateOne) SetMasteryOverall(i int32) *LearnedWordUpdateOne {
	lwuo.mutation.ResetMasteryOverall()
	lwuo.mutation.SetMasteryOverall(i)
	return lwuo
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableMasteryOverall(i *int32) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetMasteryOverall(*i)
	}
	return lwuo
}

// AddMasteryOverall adds i to the "mastery_overall" field.
func (lwuo *LearnedWordUpdateOne) AddMasteryOverall(i int32) *LearnedWordUpdateOne {
	lwuo.mutation.AddMasteryOverall(i)
	return lwuo
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (lwuo *LearnedWordUpdateOne) SetReviewLastReviewAt(t time.Time) *LearnedWordUpdateOne {
	lwuo.mutation.SetReviewLastReviewAt(t)
	return lwuo
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableReviewLastReviewAt(t *time.Time) *LearnedWordUpdateOne {
	if t != nil {
		lwuo.SetReviewLastReviewAt(*t)
	}
	return lwuo
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (lwuo *LearnedWordUpdateOne) ClearReviewLastReviewAt() *LearnedWordUpdateOne {
	lwuo.mutation.ClearReviewLastReviewAt()
	return lwuo
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (lwuo *LearnedWordUpdateOne) SetReviewNextReviewAt(t time.Time) *LearnedWordUpdateOne {
	lwuo.mutation.SetReviewNextReviewAt(t)
	return lwuo
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableReviewNextReviewAt(t *time.Time) *LearnedWordUpdateOne {
	if t != nil {
		lwuo.SetReviewNextReviewAt(*t)
	}
	return lwuo
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (lwuo *LearnedWordUpdateOne) ClearReviewNextReviewAt() *LearnedWordUpdateOne {
	lwuo.mutation.ClearReviewNextReviewAt()
	return lwuo
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (lwuo *LearnedWordUpdateOne) SetReviewIntervalDays(i int32) *LearnedWordUpdateOne {
	lwuo.mutation.ResetReviewIntervalDays()
	lwuo.mutation.SetReviewIntervalDays(i)
	return lwuo
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableReviewIntervalDays(i *int32) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetReviewIntervalDays(*i)
	}
	return lwuo
}

// AddReviewIntervalDays adds i to the "review_interval_days" field.
func (lwuo *LearnedWordUpdateOne) AddReviewIntervalDays(i int32) *LearnedWordUpdateOne {
	lwuo.mutation.AddReviewIntervalDays(i)
	return lwuo
}

// SetReviewFailCount sets the "review_fail_count" field.
func (lwuo *LearnedWordUpdateOne) SetReviewFailCount(i int32) *LearnedWordUpdateOne {
	lwuo.mutation.ResetReviewFailCount()
	lwuo.mutation.SetReviewFailCount(i)
	return lwuo
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableReviewFailCount(i *int32) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetReviewFailCount(*i)
	}
	return lwuo
}

// AddReviewFailCount adds i to the "review_fail_count" field.
func (lwuo *LearnedWordUpdateOne) AddReviewFailCount(i int32) *LearnedWordUpdateOne {
	lwuo.mutation.AddReviewFailCount(i)
	return lwuo
}

// SetQueryCount sets the "query_count" field.
func (lwuo *LearnedWordUpdateOne) SetQueryCount(i int64) *LearnedWordUpdateOne {
	lwuo.mutation.ResetQueryCount()
	lwuo.mutation.SetQueryCount(i)
	return lwuo
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableQueryCount(i *int64) *LearnedWordUpdateOne {
	if i != nil {
		lwuo.SetQueryCount(*i)
	}
	return lwuo
}

// AddQueryCount adds i to the "query_count" field.
func (lwuo *LearnedWordUpdateOne) AddQueryCount(i int64) *LearnedWordUpdateOne {
	lwuo.mutation.AddQueryCount(i)
	return lwuo
}

// SetNotes sets the "notes" field.
func (lwuo *LearnedWordUpdateOne) SetNotes(s string) *LearnedWordUpdateOne {
	lwuo.mutation.SetNotes(s)
	return lwuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableNotes(s *string) *LearnedWordUpdateOne {
	if s != nil {
		lwuo.SetNotes(*s)
	}
	return lwuo
}

// ClearNotes clears the value of the "notes" field.
func (lwuo *LearnedWordUpdateOne) ClearNotes() *LearnedWordUpdateOne {
	lwuo.mutation.ClearNotes()
	return lwuo
}

// SetSentences sets the "sentences" field.
func (lwuo *LearnedWordUpdateOne) SetSentences(e []entity.Sentence) *LearnedWordUpdateOne {
	lwuo.mutation.SetSentences(e)
	return lwuo
}

// AppendSentences appends e to the "sentences" field.
func (lwuo *LearnedWordUpdateOne) AppendSentences(e []entity.Sentence) *LearnedWordUpdateOne {
	lwuo.mutation.AppendSentences(e)
	return lwuo
}

// SetRelations sets the "relations" field.
func (lwuo *LearnedWordUpdateOne) SetRelations(ewr []entity.LearnedWordRelation) *LearnedWordUpdateOne {
	lwuo.mutation.SetRelations(ewr)
	return lwuo
}

// AppendRelations appends ewr to the "relations" field.
func (lwuo *LearnedWordUpdateOne) AppendRelations(ewr []entity.LearnedWordRelation) *LearnedWordUpdateOne {
	lwuo.mutation.AppendRelations(ewr)
	return lwuo
}

// SetCreatedBy sets the "created_by" field.
func (lwuo *LearnedWordUpdateOne) SetCreatedBy(s string) *LearnedWordUpdateOne {
	lwuo.mutation.SetCreatedBy(s)
	return lwuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lwuo *LearnedWordUpdateOne) SetNillableCreatedBy(s *string) *LearnedWordUpdateOne {
	if s != nil {
		lwuo.SetCreatedBy(*s)
	}
	return lwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lwuo *LearnedWordUpdateOne) SetUpdatedAt(t time.Time) *LearnedWordUpdateOne {
	lwuo.mutation.SetUpdatedAt(t)
	return lwuo
}

// Mutation returns the LearnedWordMutation object of the builder.
func (lwuo *LearnedWordUpdateOne) Mutation() *LearnedWordMutation {
	return lwuo.mutation
}

// Where appends a list predicates to the LearnedWordUpdate builder.
func (lwuo *LearnedWordUpdateOne) Where(ps ...predicate.LearnedWord) *LearnedWordUpdateOne {
	lwuo.mutation.Where(ps...)
	return lwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lwuo *LearnedWordUpdateOne) Select(field string, fields ...string) *LearnedWordUpdateOne {
	lwuo.fields = append([]string{field}, fields...)
	return lwuo
}

// Save executes the query and returns the updated LearnedWord entity.
func (lwuo *LearnedWordUpdateOne) Save(ctx context.Context) (*LearnedWord, error) {
	lwuo.defaults()
	return withHooks(ctx, lwuo.sqlSave, lwuo.mutation, lwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lwuo *LearnedWordUpdateOne) SaveX(ctx context.Context) *LearnedWord {
	node, err := lwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lwuo *LearnedWordUpdateOne) Exec(ctx context.Context) error {
	_, err := lwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lwuo *LearnedWordUpdateOne) ExecX(ctx context.Context) {
	if err := lwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lwuo *LearnedWordUpdateOne) defaults() {
	if _, ok := lwuo.mutation.UpdatedAt(); !ok {
		v := learnedword.UpdateDefaultUpdatedAt()
		lwuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lwuo *LearnedWordUpdateOne) check() error {
	if v, ok := lwuo.mutation.Term(); ok {
		if err := learnedword.TermValidator(v); err != nil {
			return &ValidationError{Name: "term", err: fmt.Errorf(`ent: validator failed for field "LearnedWord.term": %w`, err)}
		}
	}
	return nil
}

func (lwuo *LearnedWordUpdateOne) sqlSave(ctx context.Context) (_node *LearnedWord, err error) {
	if err := lwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(learnedword.Table, learnedword.Columns, sqlgraph.NewFieldSpec(learnedword.FieldID, field.TypeInt))
	id, ok := lwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LearnedWord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, learnedword.FieldID)
		for _, f := range fields {
			if !learnedword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != learnedword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lwuo.mutation.UserID(); ok {
		_spec.SetField(learnedword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := lwuo.mutation.AddedUserID(); ok {
		_spec.AddField(learnedword.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := lwuo.mutation.Term(); ok {
		_spec.SetField(learnedword.FieldTerm, field.TypeString, value)
	}
	if value, ok := lwuo.mutation.Normalized(); ok {
		_spec.SetField(learnedword.FieldNormalized, field.TypeString, value)
	}
	if value, ok := lwuo.mutation.Language(); ok {
		_spec.SetField(learnedword.FieldLanguage, field.TypeString, value)
	}
	if value, ok := lwuo.mutation.MasteryListen(); ok {
		_spec.SetField(learnedword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.AddedMasteryListen(); ok {
		_spec.AddField(learnedword.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.MasteryRead(); ok {
		_spec.SetField(learnedword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.AddedMasteryRead(); ok {
		_spec.AddField(learnedword.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.MasterySpell(); ok {
		_spec.SetField(learnedword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.AddedMasterySpell(); ok {
		_spec.AddField(learnedword.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.MasteryPronounce(); ok {
		_spec.SetField(learnedword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.AddedMasteryPronounce(); ok {
		_spec.AddField(learnedword.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.MasteryUse(); ok {
		_spec.SetField(learnedword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.AddedMasteryUse(); ok {
		_spec.AddField(learnedword.FieldMasteryUse, field.TypeInt16, value)
	}
	if value, ok := lwuo.mutation.MasteryOverall(); ok {
		_spec.SetField(learnedword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := lwuo.mutation.AddedMasteryOverall(); ok {
		_spec.AddField(learnedword.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := lwuo.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(learnedword.FieldReviewLastReviewAt, field.TypeTime, value)
	}
	if lwuo.mutation.ReviewLastReviewAtCleared() {
		_spec.ClearField(learnedword.FieldReviewLastReviewAt, field.TypeTime)
	}
	if value, ok := lwuo.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(learnedword.FieldReviewNextReviewAt, field.TypeTime, value)
	}
	if lwuo.mutation.ReviewNextReviewAtCleared() {
		_spec.ClearField(learnedword.FieldReviewNextReviewAt, field.TypeTime)
	}
	if value, ok := lwuo.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(learnedword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := lwuo.mutation.AddedReviewIntervalDays(); ok {
		_spec.AddField(learnedword.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := lwuo.mutation.ReviewFailCount(); ok {
		_spec.SetField(learnedword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := lwuo.mutation.AddedReviewFailCount(); ok {
		_spec.AddField(learnedword.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := lwuo.mutation.QueryCount(); ok {
		_spec.SetField(learnedword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := lwuo.mutation.AddedQueryCount(); ok {
		_spec.AddField(learnedword.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := lwuo.mutation.Notes(); ok {
		_spec.SetField(learnedword.FieldNotes, field.TypeString, value)
	}
	if lwuo.mutation.NotesCleared() {
		_spec.ClearField(learnedword.FieldNotes, field.TypeString)
	}
	if value, ok := lwuo.mutation.Sentences(); ok {
		_spec.SetField(learnedword.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := lwuo.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedword.FieldSentences, value)
		})
	}
	if value, ok := lwuo.mutation.Relations(); ok {
		_spec.SetField(learnedword.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := lwuo.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedword.FieldRelations, value)
		})
	}
	if value, ok := lwuo.mutation.CreatedBy(); ok {
		_spec.SetField(learnedword.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := lwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(learnedword.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &LearnedWord{config: lwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{learnedword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lwuo.mutation.done = true
	return _node, nil
}
