// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedlexeme"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/word"
)

// LearnedLexemeCreate is the builder for creating a LearnedLexeme entity.
type LearnedLexemeCreate struct {
	config
	mutation *LearnedLexemeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (llc *LearnedLexemeCreate) SetUserID(i int64) *LearnedLexemeCreate {
	llc.mutation.SetUserID(i)
	return llc
}

// SetTerm sets the "term" field.
func (llc *LearnedLexemeCreate) SetTerm(s string) *LearnedLexemeCreate {
	llc.mutation.SetTerm(s)
	return llc
}

// SetNormalized sets the "normalized" field.
func (llc *LearnedLexemeCreate) SetNormalized(s string) *LearnedLexemeCreate {
	llc.mutation.SetNormalized(s)
	return llc
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableNormalized(s *string) *LearnedLexemeCreate {
	if s != nil {
		llc.SetNormalized(*s)
	}
	return llc
}

// SetLanguage sets the "language" field.
func (llc *LearnedLexemeCreate) SetLanguage(s string) *LearnedLexemeCreate {
	llc.mutation.SetLanguage(s)
	return llc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableLanguage(s *string) *LearnedLexemeCreate {
	if s != nil {
		llc.SetLanguage(*s)
	}
	return llc
}

// SetWordID sets the "word_id" field.
func (llc *LearnedLexemeCreate) SetWordID(i int) *LearnedLexemeCreate {
	llc.mutation.SetWordID(i)
	return llc
}

// SetNillableWordID sets the "word_id" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableWordID(i *int) *LearnedLexemeCreate {
	if i != nil {
		llc.SetWordID(*i)
	}
	return llc
}

// SetMasteryListen sets the "mastery_listen" field.
func (llc *LearnedLexemeCreate) SetMasteryListen(i int16) *LearnedLexemeCreate {
	llc.mutation.SetMasteryListen(i)
	return llc
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableMasteryListen(i *int16) *LearnedLexemeCreate {
	if i != nil {
		llc.SetMasteryListen(*i)
	}
	return llc
}

// SetMasteryRead sets the "mastery_read" field.
func (llc *LearnedLexemeCreate) SetMasteryRead(i int16) *LearnedLexemeCreate {
	llc.mutation.SetMasteryRead(i)
	return llc
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableMasteryRead(i *int16) *LearnedLexemeCreate {
	if i != nil {
		llc.SetMasteryRead(*i)
	}
	return llc
}

// SetMasterySpell sets the "mastery_spell" field.
func (llc *LearnedLexemeCreate) SetMasterySpell(i int16) *LearnedLexemeCreate {
	llc.mutation.SetMasterySpell(i)
	return llc
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableMasterySpell(i *int16) *LearnedLexemeCreate {
	if i != nil {
		llc.SetMasterySpell(*i)
	}
	return llc
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (llc *LearnedLexemeCreate) SetMasteryPronounce(i int16) *LearnedLexemeCreate {
	llc.mutation.SetMasteryPronounce(i)
	return llc
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableMasteryPronounce(i *int16) *LearnedLexemeCreate {
	if i != nil {
		llc.SetMasteryPronounce(*i)
	}
	return llc
}

// SetMasteryOverall sets the "mastery_overall" field.
func (llc *LearnedLexemeCreate) SetMasteryOverall(i int32) *LearnedLexemeCreate {
	llc.mutation.SetMasteryOverall(i)
	return llc
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableMasteryOverall(i *int32) *LearnedLexemeCreate {
	if i != nil {
		llc.SetMasteryOverall(*i)
	}
	return llc
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (llc *LearnedLexemeCreate) SetReviewLastReviewAt(t time.Time) *LearnedLexemeCreate {
	llc.mutation.SetReviewLastReviewAt(t)
	return llc
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableReviewLastReviewAt(t *time.Time) *LearnedLexemeCreate {
	if t != nil {
		llc.SetReviewLastReviewAt(*t)
	}
	return llc
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (llc *LearnedLexemeCreate) SetReviewNextReviewAt(t time.Time) *LearnedLexemeCreate {
	llc.mutation.SetReviewNextReviewAt(t)
	return llc
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableReviewNextReviewAt(t *time.Time) *LearnedLexemeCreate {
	if t != nil {
		llc.SetReviewNextReviewAt(*t)
	}
	return llc
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (llc *LearnedLexemeCreate) SetReviewIntervalDays(i int32) *LearnedLexemeCreate {
	llc.mutation.SetReviewIntervalDays(i)
	return llc
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableReviewIntervalDays(i *int32) *LearnedLexemeCreate {
	if i != nil {
		llc.SetReviewIntervalDays(*i)
	}
	return llc
}

// SetReviewFailCount sets the "review_fail_count" field.
func (llc *LearnedLexemeCreate) SetReviewFailCount(i int32) *LearnedLexemeCreate {
	llc.mutation.SetReviewFailCount(i)
	return llc
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableReviewFailCount(i *int32) *LearnedLexemeCreate {
	if i != nil {
		llc.SetReviewFailCount(*i)
	}
	return llc
}

// SetQueryCount sets the "query_count" field.
func (llc *LearnedLexemeCreate) SetQueryCount(i int64) *LearnedLexemeCreate {
	llc.mutation.SetQueryCount(i)
	return llc
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableQueryCount(i *int64) *LearnedLexemeCreate {
	if i != nil {
		llc.SetQueryCount(*i)
	}
	return llc
}

// SetNotes sets the "notes" field.
func (llc *LearnedLexemeCreate) SetNotes(s string) *LearnedLexemeCreate {
	llc.mutation.SetNotes(s)
	return llc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableNotes(s *string) *LearnedLexemeCreate {
	if s != nil {
		llc.SetNotes(*s)
	}
	return llc
}

// SetSentences sets the "sentences" field.
func (llc *LearnedLexemeCreate) SetSentences(e []entity.Sentence) *LearnedLexemeCreate {
	llc.mutation.SetSentences(e)
	return llc
}

// SetRelations sets the "relations" field.
func (llc *LearnedLexemeCreate) SetRelations(elr []entity.LearnedLexemeRelation) *LearnedLexemeCreate {
	llc.mutation.SetRelations(elr)
	return llc
}

// SetTags sets the "tags" field.
func (llc *LearnedLexemeCreate) SetTags(s []string) *LearnedLexemeCreate {
	llc.mutation.SetTags(s)
	return llc
}

// SetCreatedBy sets the "created_by" field.
func (llc *LearnedLexemeCreate) SetCreatedBy(s string) *LearnedLexemeCreate {
	llc.mutation.SetCreatedBy(s)
	return llc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableCreatedBy(s *string) *LearnedLexemeCreate {
	if s != nil {
		llc.SetCreatedBy(*s)
	}
	return llc
}

// SetCreatedAt sets the "created_at" field.
func (llc *LearnedLexemeCreate) SetCreatedAt(t time.Time) *LearnedLexemeCreate {
	llc.mutation.SetCreatedAt(t)
	return llc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableCreatedAt(t *time.Time) *LearnedLexemeCreate {
	if t != nil {
		llc.SetCreatedAt(*t)
	}
	return llc
}

// SetUpdatedAt sets the "updated_at" field.
func (llc *LearnedLexemeCreate) SetUpdatedAt(t time.Time) *LearnedLexemeCreate {
	llc.mutation.SetUpdatedAt(t)
	return llc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (llc *LearnedLexemeCreate) SetNillableUpdatedAt(t *time.Time) *LearnedLexemeCreate {
	if t != nil {
		llc.SetUpdatedAt(*t)
	}
	return llc
}

// SetWord sets the "word" edge to the Word entity.
func (llc *LearnedLexemeCreate) SetWord(w *Word) *LearnedLexemeCreate {
	return llc.SetWordID(w.ID)
}

// Mutation returns the LearnedLexemeMutation object of the builder.
func (llc *LearnedLexemeCreate) Mutation() *LearnedLexemeMutation {
	return llc.mutation
}

// Save creates the LearnedLexeme in the database.
func (llc *LearnedLexemeCreate) Save(ctx context.Context) (*LearnedLexeme, error) {
	llc.defaults()
	return withHooks(ctx, llc.sqlSave, llc.mutation, llc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (llc *LearnedLexemeCreate) SaveX(ctx context.Context) *LearnedLexeme {
	v, err := llc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llc *LearnedLexemeCreate) Exec(ctx context.Context) error {
	_, err := llc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llc *LearnedLexemeCreate) ExecX(ctx context.Context) {
	if err := llc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llc *LearnedLexemeCreate) defaults() {
	if _, ok := llc.mutation.Normalized(); !ok {
		v := learnedlexeme.DefaultNormalized
		llc.mutation.SetNormalized(v)
	}
	if _, ok := llc.mutation.Language(); !ok {
		v := learnedlexeme.DefaultLanguage
		llc.mutation.SetLanguage(v)
	}
	if _, ok := llc.mutation.MasteryListen(); !ok {
		v := learnedlexeme.DefaultMasteryListen
		llc.mutation.SetMasteryListen(v)
	}
	if _, ok := llc.mutation.MasteryRead(); !ok {
		v := learnedlexeme.DefaultMasteryRead
		llc.mutation.SetMasteryRead(v)
	}
	if _, ok := llc.mutation.MasterySpell(); !ok {
		v := learnedlexeme.DefaultMasterySpell
		llc.mutation.SetMasterySpell(v)
	}
	if _, ok := llc.mutation.MasteryPronounce(); !ok {
		v := learnedlexeme.DefaultMasteryPronounce
		llc.mutation.SetMasteryPronounce(v)
	}
	if _, ok := llc.mutation.MasteryOverall(); !ok {
		v := learnedlexeme.DefaultMasteryOverall
		llc.mutation.SetMasteryOverall(v)
	}
	if _, ok := llc.mutation.ReviewIntervalDays(); !ok {
		v := learnedlexeme.DefaultReviewIntervalDays
		llc.mutation.SetReviewIntervalDays(v)
	}
	if _, ok := llc.mutation.ReviewFailCount(); !ok {
		v := learnedlexeme.DefaultReviewFailCount
		llc.mutation.SetReviewFailCount(v)
	}
	if _, ok := llc.mutation.QueryCount(); !ok {
		v := learnedlexeme.DefaultQueryCount
		llc.mutation.SetQueryCount(v)
	}
	if _, ok := llc.mutation.Sentences(); !ok {
		v := learnedlexeme.DefaultSentences
		llc.mutation.SetSentences(v)
	}
	if _, ok := llc.mutation.Relations(); !ok {
		v := learnedlexeme.DefaultRelations
		llc.mutation.SetRelations(v)
	}
	if _, ok := llc.mutation.Tags(); !ok {
		v := learnedlexeme.DefaultTags
		llc.mutation.SetTags(v)
	}
	if _, ok := llc.mutation.CreatedBy(); !ok {
		v := learnedlexeme.DefaultCreatedBy
		llc.mutation.SetCreatedBy(v)
	}
	if _, ok := llc.mutation.CreatedAt(); !ok {
		v := learnedlexeme.DefaultCreatedAt()
		llc.mutation.SetCreatedAt(v)
	}
	if _, ok := llc.mutation.UpdatedAt(); !ok {
		v := learnedlexeme.DefaultUpdatedAt()
		llc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (llc *LearnedLexemeCreate) check() error {
	if _, ok := llc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LearnedLexeme.user_id"`)}
	}
	if _, ok := llc.mutation.Term(); !ok {
		return &ValidationError{Name: "term", err: errors.New(`ent: missing required field "LearnedLexeme.term"`)}
	}
	if v, ok := llc.mutation.Term(); ok {
		if err := learnedlexeme.TermValidator(v); err != nil {
			return &ValidationError{Name: "term", err: fmt.Errorf(`ent: validator failed for field "LearnedLexeme.term": %w`, err)}
		}
	}
	if _, ok := llc.mutation.Normalized(); !ok {
		return &ValidationError{Name: "normalized", err: errors.New(`ent: missing required field "LearnedLexeme.normalized"`)}
	}
	if _, ok := llc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "LearnedLexeme.language"`)}
	}
	if _, ok := llc.mutation.MasteryListen(); !ok {
		return &ValidationError{Name: "mastery_listen", err: errors.New(`ent: missing required field "LearnedLexeme.mastery_listen"`)}
	}
	if _, ok := llc.mutation.MasteryRead(); !ok {
		return &ValidationError{Name: "mastery_read", err: errors.New(`ent: missing required field "LearnedLexeme.mastery_read"`)}
	}
	if _, ok := llc.mutation.MasterySpell(); !ok {
		return &ValidationError{Name: "mastery_spell", err: errors.New(`ent: missing required field "LearnedLexeme.mastery_spell"`)}
	}
	if _, ok := llc.mutation.MasteryPronounce(); !ok {
		return &ValidationError{Name: "mastery_pronounce", err: errors.New(`ent: missing required field "LearnedLexeme.mastery_pronounce"`)}
	}
	if _, ok := llc.mutation.MasteryOverall(); !ok {
		return &ValidationError{Name: "mastery_overall", err: errors.New(`ent: missing required field "LearnedLexeme.mastery_overall"`)}
	}
	if _, ok := llc.mutation.ReviewIntervalDays(); !ok {
		return &ValidationError{Name: "review_interval_days", err: errors.New(`ent: missing required field "LearnedLexeme.review_interval_days"`)}
	}
	if _, ok := llc.mutation.ReviewFailCount(); !ok {
		return &ValidationError{Name: "review_fail_count", err: errors.New(`ent: missing required field "LearnedLexeme.review_fail_count"`)}
	}
	if _, ok := llc.mutation.QueryCount(); !ok {
		return &ValidationError{Name: "query_count", err: errors.New(`ent: missing required field "LearnedLexeme.query_count"`)}
	}
	if _, ok := llc.mutation.Sentences(); !ok {
		return &ValidationError{Name: "sentences", err: errors.New(`ent: missing required field "LearnedLexeme.sentences"`)}
	}
	if _, ok := llc.mutation.Relations(); !ok {
		return &ValidationError{Name: "relations", err: errors.New(`ent: missing required field "LearnedLexeme.relations"`)}
	}
	if _, ok := llc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "LearnedLexeme.tags"`)}
	}
	if _, ok := llc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "LearnedLexeme.created_by"`)}
	}
	if _, ok := llc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LearnedLexeme.created_at"`)}
	}
	if _, ok := llc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LearnedLexeme.updated_at"`)}
	}
	return nil
}

func (llc *LearnedLexemeCreate) sqlSave(ctx context.Context) (*LearnedLexeme, error) {
	if err := llc.check(); err != nil {
		return nil, err
	}
	_node, _spec := llc.createSpec()
	if err := sqlgraph.CreateNode(ctx, llc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	llc.mutation.id = &_node.ID
	llc.mutation.done = true
	return _node, nil
}

func (llc *LearnedLexemeCreate) createSpec() (*LearnedLexeme, *sqlgraph.CreateSpec) {
	var (
		_node = &LearnedLexeme{config: llc.config}
		_spec = sqlgraph.NewCreateSpec(learnedlexeme.Table, sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt))
	)
	_spec.OnConflict = llc.conflict
	if value, ok := llc.mutation.UserID(); ok {
		_spec.SetField(learnedlexeme.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := llc.mutation.Term(); ok {
		_spec.SetField(learnedlexeme.FieldTerm, field.TypeString, value)
		_node.Term = value
	}
	if value, ok := llc.mutation.Normalized(); ok {
		_spec.SetField(learnedlexeme.FieldNormalized, field.TypeString, value)
		_node.Normalized = value
	}
	if value, ok := llc.mutation.Language(); ok {
		_spec.SetField(learnedlexeme.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := llc.mutation.MasteryListen(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryListen, field.TypeInt16, value)
		_node.MasteryListen = value
	}
	if value, ok := llc.mutation.MasteryRead(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryRead, field.TypeInt16, value)
		_node.MasteryRead = value
	}
	if value, ok := llc.mutation.MasterySpell(); ok {
		_spec.SetField(learnedlexeme.FieldMasterySpell, field.TypeInt16, value)
		_node.MasterySpell = value
	}
	if value, ok := llc.mutation.MasteryPronounce(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryPronounce, field.TypeInt16, value)
		_node.MasteryPronounce = value
	}
	if value, ok := llc.mutation.MasteryOverall(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryOverall, field.TypeInt32, value)
		_node.MasteryOverall = value
	}
	if value, ok := llc.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(learnedlexeme.FieldReviewLastReviewAt, field.TypeTime, value)
		_node.ReviewLastReviewAt = &value
	}
	if value, ok := llc.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(learnedlexeme.FieldReviewNextReviewAt, field.TypeTime, value)
		_node.ReviewNextReviewAt = &value
	}
	if value, ok := llc.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(learnedlexeme.FieldReviewIntervalDays, field.TypeInt32, value)
		_node.ReviewIntervalDays = value
	}
	if value, ok := llc.mutation.ReviewFailCount(); ok {
		_spec.SetField(learnedlexeme.FieldReviewFailCount, field.TypeInt32, value)
		_node.ReviewFailCount = value
	}
	if value, ok := llc.mutation.QueryCount(); ok {
		_spec.SetField(learnedlexeme.FieldQueryCount, field.TypeInt64, value)
		_node.QueryCount = value
	}
	if value, ok := llc.mutation.Notes(); ok {
		_spec.SetField(learnedlexeme.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := llc.mutation.Sentences(); ok {
		_spec.SetField(learnedlexeme.FieldSentences, field.TypeJSON, value)
		_node.Sentences = value
	}
	if value, ok := llc.mutation.Relations(); ok {
		_spec.SetField(learnedlexeme.FieldRelations, field.TypeJSON, value)
		_node.Relations = value
	}
	if value, ok := llc.mutation.Tags(); ok {
		_spec.SetField(learnedlexeme.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := llc.mutation.CreatedBy(); ok {
		_spec.SetField(learnedlexeme.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := llc.mutation.CreatedAt(); ok {
		_spec.SetField(learnedlexeme.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := llc.mutation.UpdatedAt(); ok {
		_spec.SetField(learnedlexeme.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := llc.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learnedlexeme.WordTable,
			Columns: []string{learnedlexeme.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WordID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LearnedLexeme.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LearnedLexemeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (llc *LearnedLexemeCreate) OnConflict(opts ...sql.ConflictOption) *LearnedLexemeUpsertOne {
	llc.conflict = opts
	return &LearnedLexemeUpsertOne{
		create: llc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LearnedLexeme.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (llc *LearnedLexemeCreate) OnConflictColumns(columns ...string) *LearnedLexemeUpsertOne {
	llc.conflict = append(llc.conflict, sql.ConflictColumns(columns...))
	return &LearnedLexemeUpsertOne{
		create: llc,
	}
}

type (
	// LearnedLexemeUpsertOne is the builder for "upsert"-ing
	//  one LearnedLexeme node.
	LearnedLexemeUpsertOne struct {
		create *LearnedLexemeCreate
	}

	// LearnedLexemeUpsert is the "OnConflict" setter.
	LearnedLexemeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *LearnedLexemeUpsert) SetUserID(v int64) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateUserID() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *LearnedLexemeUpsert) AddUserID(v int64) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldUserID, v)
	return u
}

// SetTerm sets the "term" field.
func (u *LearnedLexemeUpsert) SetTerm(v string) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldTerm, v)
	return u
}

// UpdateTerm sets the "term" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateTerm() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldTerm)
	return u
}

// SetNormalized sets the "normalized" field.
func (u *LearnedLexemeUpsert) SetNormalized(v string) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldNormalized, v)
	return u
}

// UpdateNormalized sets the "normalized" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateNormalized() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldNormalized)
	return u
}

// SetLanguage sets the "language" field.
func (u *LearnedLexemeUpsert) SetLanguage(v string) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateLanguage() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldLanguage)
	return u
}

// SetWordID sets the "word_id" field.
func (u *LearnedLexemeUpsert) SetWordID(v int) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldWordID, v)
	return u
}

// UpdateWordID sets the "word_id" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateWordID() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldWordID)
	return u
}

// ClearWordID clears the value of the "word_id" field.
func (u *LearnedLexemeUpsert) ClearWordID() *LearnedLexemeUpsert {
	u.SetNull(learnedlexeme.FieldWordID)
	return u
}

// SetMasteryListen sets the "mastery_listen" field.
func (u *LearnedLexemeUpsert) SetMasteryListen(v int16) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldMasteryListen, v)
	return u
}

// UpdateMasteryListen sets the "mastery_listen" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateMasteryListen() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldMasteryListen)
	return u
}

// AddMasteryListen adds v to the "mastery_listen" field.
func (u *LearnedLexemeUpsert) AddMasteryListen(v int16) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldMasteryListen, v)
	return u
}

// SetMasteryRead sets the "mastery_read" field.
func (u *LearnedLexemeUpsert) SetMasteryRead(v int16) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldMasteryRead, v)
	return u
}

// UpdateMasteryRead sets the "mastery_read" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateMasteryRead() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldMasteryRead)
	return u
}

// AddMasteryRead adds v to the "mastery_read" field.
func (u *LearnedLexemeUpsert) AddMasteryRead(v int16) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldMasteryRead, v)
	return u
}

// SetMasterySpell sets the "mastery_spell" field.
func (u *LearnedLexemeUpsert) SetMasterySpell(v int16) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldMasterySpell, v)
	return u
}

// UpdateMasterySpell sets the "mastery_spell" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateMasterySpell() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldMasterySpell)
	return u
}

// AddMasterySpell adds v to the "mastery_spell" field.
func (u *LearnedLexemeUpsert) AddMasterySpell(v int16) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldMasterySpell, v)
	return u
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (u *LearnedLexemeUpsert) SetMasteryPronounce(v int16) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldMasteryPronounce, v)
	return u
}

// UpdateMasteryPronounce sets the "mastery_pronounce" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateMasteryPronounce() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldMasteryPronounce)
	return u
}

// AddMasteryPronounce adds v to the "mastery_pronounce" field.
func (u *LearnedLexemeUpsert) AddMasteryPronounce(v int16) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldMasteryPronounce, v)
	return u
}

// SetMasteryOverall sets the "mastery_overall" field.
func (u *LearnedLexemeUpsert) SetMasteryOverall(v int32) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldMasteryOverall, v)
	return u
}

// UpdateMasteryOverall sets the "mastery_overall" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateMasteryOverall() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldMasteryOverall)
	return u
}

// AddMasteryOverall adds v to the "mastery_overall" field.
func (u *LearnedLexemeUpsert) AddMasteryOverall(v int32) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldMasteryOverall, v)
	return u
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (u *LearnedLexemeUpsert) SetReviewLastReviewAt(v time.Time) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldReviewLastReviewAt, v)
	return u
}

// UpdateReviewLastReviewAt sets the "review_last_review_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateReviewLastReviewAt() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldReviewLastReviewAt)
	return u
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (u *LearnedLexemeUpsert) ClearReviewLastReviewAt() *LearnedLexemeUpsert {
	u.SetNull(learnedlexeme.FieldReviewLastReviewAt)
	return u
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (u *LearnedLexemeUpsert) SetReviewNextReviewAt(v time.Time) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldReviewNextReviewAt, v)
	return u
}

// UpdateReviewNextReviewAt sets the "review_next_review_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateReviewNextReviewAt() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldReviewNextReviewAt)
	return u
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (u *LearnedLexemeUpsert) ClearReviewNextReviewAt() *LearnedLexemeUpsert {
	u.SetNull(learnedlexeme.FieldReviewNextReviewAt)
	return u
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (u *LearnedLexemeUpsert) SetReviewIntervalDays(v int32) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldReviewIntervalDays, v)
	return u
}

// UpdateReviewIntervalDays sets the "review_interval_days" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateReviewIntervalDays() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldReviewIntervalDays)
	return u
}

// AddReviewIntervalDays adds v to the "review_interval_days" field.
func (u *LearnedLexemeUpsert) AddReviewIntervalDays(v int32) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldReviewIntervalDays, v)
	return u
}

// SetReviewFailCount sets the "review_fail_count" field.
func (u *LearnedLexemeUpsert) SetReviewFailCount(v int32) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldReviewFailCount, v)
	return u
}

// UpdateReviewFailCount sets the "review_fail_count" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateReviewFailCount() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldReviewFailCount)
	return u
}

// AddReviewFailCount adds v to the "review_fail_count" field.
func (u *LearnedLexemeUpsert) AddReviewFailCount(v int32) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldReviewFailCount, v)
	return u
}

// SetQueryCount sets the "query_count" field.
func (u *LearnedLexemeUpsert) SetQueryCount(v int64) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldQueryCount, v)
	return u
}

// UpdateQueryCount sets the "query_count" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateQueryCount() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldQueryCount)
	return u
}

// AddQueryCount adds v to the "query_count" field.
func (u *LearnedLexemeUpsert) AddQueryCount(v int64) *LearnedLexemeUpsert {
	u.Add(learnedlexeme.FieldQueryCount, v)
	return u
}

// SetNotes sets the "notes" field.
func (u *LearnedLexemeUpsert) SetNotes(v string) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateNotes() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *LearnedLexemeUpsert) ClearNotes() *LearnedLexemeUpsert {
	u.SetNull(learnedlexeme.FieldNotes)
	return u
}

// SetSentences sets the "sentences" field.
func (u *LearnedLexemeUpsert) SetSentences(v []entity.Sentence) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldSentences, v)
	return u
}

// UpdateSentences sets the "sentences" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateSentences() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldSentences)
	return u
}

// SetRelations sets the "relations" field.
func (u *LearnedLexemeUpsert) SetRelations(v []entity.LearnedLexemeRelation) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldRelations, v)
	return u
}

// UpdateRelations sets the "relations" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateRelations() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldRelations)
	return u
}

// SetTags sets the "tags" field.
func (u *LearnedLexemeUpsert) SetTags(v []string) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateTags() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldTags)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LearnedLexemeUpsert) SetCreatedBy(v string) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateCreatedBy() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldCreatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LearnedLexemeUpsert) SetUpdatedAt(v time.Time) *LearnedLexemeUpsert {
	u.Set(learnedlexeme.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsert) UpdateUpdatedAt() *LearnedLexemeUpsert {
	u.SetExcluded(learnedlexeme.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.LearnedLexeme.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LearnedLexemeUpsertOne) UpdateNewValues() *LearnedLexemeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(learnedlexeme.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LearnedLexeme.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LearnedLexemeUpsertOne) Ignore() *LearnedLexemeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LearnedLexemeUpsertOne) DoNothing() *LearnedLexemeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LearnedLexemeCreate.OnConflict
// documentation for more info.
func (u *LearnedLexemeUpsertOne) Update(set func(*LearnedLexemeUpsert)) *LearnedLexemeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LearnedLexemeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *LearnedLexemeUpsertOne) SetUserID(v int64) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *LearnedLexemeUpsertOne) AddUserID(v int64) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateUserID() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateUserID()
	})
}

// SetTerm sets the "term" field.
func (u *LearnedLexemeUpsertOne) SetTerm(v string) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetTerm(v)
	})
}

// UpdateTerm sets the "term" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateTerm() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateTerm()
	})
}

// SetNormalized sets the "normalized" field.
func (u *LearnedLexemeUpsertOne) SetNormalized(v string) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetNormalized(v)
	})
}

// UpdateNormalized sets the "normalized" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateNormalized() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateNormalized()
	})
}

// SetLanguage sets the "language" field.
func (u *LearnedLexemeUpsertOne) SetLanguage(v string) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateLanguage() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateLanguage()
	})
}

// SetWordID sets the "word_id" field.
func (u *LearnedLexemeUpsertOne) SetWordID(v int) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetWordID(v)
	})
}

// UpdateWordID sets the "word_id" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateWordID() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateWordID()
	})
}

// ClearWordID clears the value of the "word_id" field.
func (u *LearnedLexemeUpsertOne) ClearWordID() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearWordID()
	})
}

// SetMasteryListen sets the "mastery_listen" field.
func (u *LearnedLexemeUpsertOne) SetMasteryListen(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryListen(v)
	})
}

// AddMasteryListen adds v to the "mastery_listen" field.
func (u *LearnedLexemeUpsertOne) AddMasteryListen(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryListen(v)
	})
}

// UpdateMasteryListen sets the "mastery_listen" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateMasteryListen() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryListen()
	})
}

// SetMasteryRead sets the "mastery_read" field.
func (u *LearnedLexemeUpsertOne) SetMasteryRead(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryRead(v)
	})
}

// AddMasteryRead adds v to the "mastery_read" field.
func (u *LearnedLexemeUpsertOne) AddMasteryRead(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryRead(v)
	})
}

// UpdateMasteryRead sets the "mastery_read" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateMasteryRead() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryRead()
	})
}

// SetMasterySpell sets the "mastery_spell" field.
func (u *LearnedLexemeUpsertOne) SetMasterySpell(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasterySpell(v)
	})
}

// AddMasterySpell adds v to the "mastery_spell" field.
func (u *LearnedLexemeUpsertOne) AddMasterySpell(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasterySpell(v)
	})
}

// UpdateMasterySpell sets the "mastery_spell" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateMasterySpell() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasterySpell()
	})
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (u *LearnedLexemeUpsertOne) SetMasteryPronounce(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryPronounce(v)
	})
}

// AddMasteryPronounce adds v to the "mastery_pronounce" field.
func (u *LearnedLexemeUpsertOne) AddMasteryPronounce(v int16) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryPronounce(v)
	})
}

// UpdateMasteryPronounce sets the "mastery_pronounce" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateMasteryPronounce() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryPronounce()
	})
}

// SetMasteryOverall sets the "mastery_overall" field.
func (u *LearnedLexemeUpsertOne) SetMasteryOverall(v int32) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryOverall(v)
	})
}

// AddMasteryOverall adds v to the "mastery_overall" field.
func (u *LearnedLexemeUpsertOne) AddMasteryOverall(v int32) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryOverall(v)
	})
}

// UpdateMasteryOverall sets the "mastery_overall" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateMasteryOverall() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryOverall()
	})
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (u *LearnedLexemeUpsertOne) SetReviewLastReviewAt(v time.Time) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewLastReviewAt(v)
	})
}

// UpdateReviewLastReviewAt sets the "review_last_review_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateReviewLastReviewAt() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewLastReviewAt()
	})
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (u *LearnedLexemeUpsertOne) ClearReviewLastReviewAt() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearReviewLastReviewAt()
	})
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (u *LearnedLexemeUpsertOne) SetReviewNextReviewAt(v time.Time) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewNextReviewAt(v)
	})
}

// UpdateReviewNextReviewAt sets the "review_next_review_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateReviewNextReviewAt() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewNextReviewAt()
	})
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (u *LearnedLexemeUpsertOne) ClearReviewNextReviewAt() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearReviewNextReviewAt()
	})
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (u *LearnedLexemeUpsertOne) SetReviewIntervalDays(v int32) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewIntervalDays(v)
	})
}

// AddReviewIntervalDays adds v to the "review_interval_days" field.
func (u *LearnedLexemeUpsertOne) AddReviewIntervalDays(v int32) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddReviewIntervalDays(v)
	})
}

// UpdateReviewIntervalDays sets the "review_interval_days" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateReviewIntervalDays() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewIntervalDays()
	})
}

// SetReviewFailCount sets the "review_fail_count" field.
func (u *LearnedLexemeUpsertOne) SetReviewFailCount(v int32) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewFailCount(v)
	})
}

// AddReviewFailCount adds v to the "review_fail_count" field.
func (u *LearnedLexemeUpsertOne) AddReviewFailCount(v int32) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddReviewFailCount(v)
	})
}

// UpdateReviewFailCount sets the "review_fail_count" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateReviewFailCount() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewFailCount()
	})
}

// SetQueryCount sets the "query_count" field.
func (u *LearnedLexemeUpsertOne) SetQueryCount(v int64) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetQueryCount(v)
	})
}

// AddQueryCount adds v to the "query_count" field.
func (u *LearnedLexemeUpsertOne) AddQueryCount(v int64) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddQueryCount(v)
	})
}

// UpdateQueryCount sets the "query_count" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateQueryCount() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateQueryCount()
	})
}

// SetNotes sets the "notes" field.
func (u *LearnedLexemeUpsertOne) SetNotes(v string) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateNotes() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *LearnedLexemeUpsertOne) ClearNotes() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearNotes()
	})
}

// SetSentences sets the "sentences" field.
func (u *LearnedLexemeUpsertOne) SetSentences(v []entity.Sentence) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetSentences(v)
	})
}

// UpdateSentences sets the "sentences" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateSentences() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateSentences()
	})
}

// SetRelations sets the "relations" field.
func (u *LearnedLexemeUpsertOne) SetRelations(v []entity.LearnedLexemeRelation) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetRelations(v)
	})
}

// UpdateRelations sets the "relations" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateRelations() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateRelations()
	})
}

// SetTags sets the "tags" field.
func (u *LearnedLexemeUpsertOne) SetTags(v []string) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateTags() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateTags()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *LearnedLexemeUpsertOne) SetCreatedBy(v string) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateCreatedBy() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LearnedLexemeUpsertOne) SetUpdatedAt(v time.Time) *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsertOne) UpdateUpdatedAt() *LearnedLexemeUpsertOne {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LearnedLexemeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LearnedLexemeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LearnedLexemeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LearnedLexemeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LearnedLexemeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LearnedLexemeCreateBulk is the builder for creating many LearnedLexeme entities in bulk.
type LearnedLexemeCreateBulk struct {
	config
	err      error
	builders []*LearnedLexemeCreate
	conflict []sql.ConflictOption
}

// Save creates the LearnedLexeme entities in the database.
func (llcb *LearnedLexemeCreateBulk) Save(ctx context.Context) ([]*LearnedLexeme, error) {
	if llcb.err != nil {
		return nil, llcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(llcb.builders))
	nodes := make([]*LearnedLexeme, len(llcb.builders))
	mutators := make([]Mutator, len(llcb.builders))
	for i := range llcb.builders {
		func(i int, root context.Context) {
			builder := llcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LearnedLexemeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, llcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = llcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, llcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, llcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (llcb *LearnedLexemeCreateBulk) SaveX(ctx context.Context) []*LearnedLexeme {
	v, err := llcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llcb *LearnedLexemeCreateBulk) Exec(ctx context.Context) error {
	_, err := llcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llcb *LearnedLexemeCreateBulk) ExecX(ctx context.Context) {
	if err := llcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LearnedLexeme.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LearnedLexemeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (llcb *LearnedLexemeCreateBulk) OnConflict(opts ...sql.ConflictOption) *LearnedLexemeUpsertBulk {
	llcb.conflict = opts
	return &LearnedLexemeUpsertBulk{
		create: llcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LearnedLexeme.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (llcb *LearnedLexemeCreateBulk) OnConflictColumns(columns ...string) *LearnedLexemeUpsertBulk {
	llcb.conflict = append(llcb.conflict, sql.ConflictColumns(columns...))
	return &LearnedLexemeUpsertBulk{
		create: llcb,
	}
}

// LearnedLexemeUpsertBulk is the builder for "upsert"-ing
// a bulk of LearnedLexeme nodes.
type LearnedLexemeUpsertBulk struct {
	create *LearnedLexemeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LearnedLexeme.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LearnedLexemeUpsertBulk) UpdateNewValues() *LearnedLexemeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(learnedlexeme.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LearnedLexeme.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LearnedLexemeUpsertBulk) Ignore() *LearnedLexemeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LearnedLexemeUpsertBulk) DoNothing() *LearnedLexemeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LearnedLexemeCreateBulk.OnConflict
// documentation for more info.
func (u *LearnedLexemeUpsertBulk) Update(set func(*LearnedLexemeUpsert)) *LearnedLexemeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LearnedLexemeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *LearnedLexemeUpsertBulk) SetUserID(v int64) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *LearnedLexemeUpsertBulk) AddUserID(v int64) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateUserID() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateUserID()
	})
}

// SetTerm sets the "term" field.
func (u *LearnedLexemeUpsertBulk) SetTerm(v string) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetTerm(v)
	})
}

// UpdateTerm sets the "term" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateTerm() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateTerm()
	})
}

// SetNormalized sets the "normalized" field.
func (u *LearnedLexemeUpsertBulk) SetNormalized(v string) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetNormalized(v)
	})
}

// UpdateNormalized sets the "normalized" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateNormalized() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateNormalized()
	})
}

// SetLanguage sets the "language" field.
func (u *LearnedLexemeUpsertBulk) SetLanguage(v string) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateLanguage() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateLanguage()
	})
}

// SetWordID sets the "word_id" field.
func (u *LearnedLexemeUpsertBulk) SetWordID(v int) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetWordID(v)
	})
}

// UpdateWordID sets the "word_id" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateWordID() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateWordID()
	})
}

// ClearWordID clears the value of the "word_id" field.
func (u *LearnedLexemeUpsertBulk) ClearWordID() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearWordID()
	})
}

// SetMasteryListen sets the "mastery_listen" field.
func (u *LearnedLexemeUpsertBulk) SetMasteryListen(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryListen(v)
	})
}

// AddMasteryListen adds v to the "mastery_listen" field.
func (u *LearnedLexemeUpsertBulk) AddMasteryListen(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryListen(v)
	})
}

// UpdateMasteryListen sets the "mastery_listen" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateMasteryListen() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryListen()
	})
}

// SetMasteryRead sets the "mastery_read" field.
func (u *LearnedLexemeUpsertBulk) SetMasteryRead(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryRead(v)
	})
}

// AddMasteryRead adds v to the "mastery_read" field.
func (u *LearnedLexemeUpsertBulk) AddMasteryRead(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryRead(v)
	})
}

// UpdateMasteryRead sets the "mastery_read" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateMasteryRead() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryRead()
	})
}

// SetMasterySpell sets the "mastery_spell" field.
func (u *LearnedLexemeUpsertBulk) SetMasterySpell(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasterySpell(v)
	})
}

// AddMasterySpell adds v to the "mastery_spell" field.
func (u *LearnedLexemeUpsertBulk) AddMasterySpell(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasterySpell(v)
	})
}

// UpdateMasterySpell sets the "mastery_spell" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateMasterySpell() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasterySpell()
	})
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (u *LearnedLexemeUpsertBulk) SetMasteryPronounce(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryPronounce(v)
	})
}

// AddMasteryPronounce adds v to the "mastery_pronounce" field.
func (u *LearnedLexemeUpsertBulk) AddMasteryPronounce(v int16) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryPronounce(v)
	})
}

// UpdateMasteryPronounce sets the "mastery_pronounce" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateMasteryPronounce() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryPronounce()
	})
}

// SetMasteryOverall sets the "mastery_overall" field.
func (u *LearnedLexemeUpsertBulk) SetMasteryOverall(v int32) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetMasteryOverall(v)
	})
}

// AddMasteryOverall adds v to the "mastery_overall" field.
func (u *LearnedLexemeUpsertBulk) AddMasteryOverall(v int32) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddMasteryOverall(v)
	})
}

// UpdateMasteryOverall sets the "mastery_overall" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateMasteryOverall() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateMasteryOverall()
	})
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (u *LearnedLexemeUpsertBulk) SetReviewLastReviewAt(v time.Time) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewLastReviewAt(v)
	})
}

// UpdateReviewLastReviewAt sets the "review_last_review_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateReviewLastReviewAt() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewLastReviewAt()
	})
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (u *LearnedLexemeUpsertBulk) ClearReviewLastReviewAt() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearReviewLastReviewAt()
	})
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (u *LearnedLexemeUpsertBulk) SetReviewNextReviewAt(v time.Time) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewNextReviewAt(v)
	})
}

// UpdateReviewNextReviewAt sets the "review_next_review_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateReviewNextReviewAt() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewNextReviewAt()
	})
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (u *LearnedLexemeUpsertBulk) ClearReviewNextReviewAt() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearReviewNextReviewAt()
	})
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (u *LearnedLexemeUpsertBulk) SetReviewIntervalDays(v int32) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewIntervalDays(v)
	})
}

// AddReviewIntervalDays adds v to the "review_interval_days" field.
func (u *LearnedLexemeUpsertBulk) AddReviewIntervalDays(v int32) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddReviewIntervalDays(v)
	})
}

// UpdateReviewIntervalDays sets the "review_interval_days" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateReviewIntervalDays() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewIntervalDays()
	})
}

// SetReviewFailCount sets the "review_fail_count" field.
func (u *LearnedLexemeUpsertBulk) SetReviewFailCount(v int32) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetReviewFailCount(v)
	})
}

// AddReviewFailCount adds v to the "review_fail_count" field.
func (u *LearnedLexemeUpsertBulk) AddReviewFailCount(v int32) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddReviewFailCount(v)
	})
}

// UpdateReviewFailCount sets the "review_fail_count" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateReviewFailCount() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateReviewFailCount()
	})
}

// SetQueryCount sets the "query_count" field.
func (u *LearnedLexemeUpsertBulk) SetQueryCount(v int64) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetQueryCount(v)
	})
}

// AddQueryCount adds v to the "query_count" field.
func (u *LearnedLexemeUpsertBulk) AddQueryCount(v int64) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.AddQueryCount(v)
	})
}

// UpdateQueryCount sets the "query_count" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateQueryCount() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateQueryCount()
	})
}

// SetNotes sets the "notes" field.
func (u *LearnedLexemeUpsertBulk) SetNotes(v string) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateNotes() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *LearnedLexemeUpsertBulk) ClearNotes() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.ClearNotes()
	})
}

// SetSentences sets the "sentences" field.
func (u *LearnedLexemeUpsertBulk) SetSentences(v []entity.Sentence) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetSentences(v)
	})
}

// UpdateSentences sets the "sentences" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateSentences() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateSentences()
	})
}

// SetRelations sets the "relations" field.
func (u *LearnedLexemeUpsertBulk) SetRelations(v []entity.LearnedLexemeRelation) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetRelations(v)
	})
}

// UpdateRelations sets the "relations" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateRelations() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateRelations()
	})
}

// SetTags sets the "tags" field.
func (u *LearnedLexemeUpsertBulk) SetTags(v []string) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateTags() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateTags()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *LearnedLexemeUpsertBulk) SetCreatedBy(v string) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateCreatedBy() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LearnedLexemeUpsertBulk) SetUpdatedAt(v time.Time) *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LearnedLexemeUpsertBulk) UpdateUpdatedAt() *LearnedLexemeUpsertBulk {
	return u.Update(func(s *LearnedLexemeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LearnedLexemeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LearnedLexemeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LearnedLexemeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LearnedLexemeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
