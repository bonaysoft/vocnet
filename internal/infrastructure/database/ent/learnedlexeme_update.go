// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedlexeme"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/word"
)

// LearnedLexemeUpdate is the builder for updating LearnedLexeme entities.
type LearnedLexemeUpdate struct {
	config
	hooks    []Hook
	mutation *LearnedLexemeMutation
}

// Where appends a list predicates to the LearnedLexemeUpdate builder.
func (llu *LearnedLexemeUpdate) Where(ps ...predicate.LearnedLexeme) *LearnedLexemeUpdate {
	llu.mutation.Where(ps...)
	return llu
}

// SetUserID sets the "user_id" field.
func (llu *LearnedLexemeUpdate) SetUserID(i int64) *LearnedLexemeUpdate {
	llu.mutation.ResetUserID()
	llu.mutation.SetUserID(i)
	return llu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableUserID(i *int64) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetUserID(*i)
	}
	return llu
}

// AddUserID adds i to the "user_id" field.
func (llu *LearnedLexemeUpdate) AddUserID(i int64) *LearnedLexemeUpdate {
	llu.mutation.AddUserID(i)
	return llu
}

// SetTerm sets the "term" field.
func (llu *LearnedLexemeUpdate) SetTerm(s string) *LearnedLexemeUpdate {
	llu.mutation.SetTerm(s)
	return llu
}

// SetNillableTerm sets the "term" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableTerm(s *string) *LearnedLexemeUpdate {
	if s != nil {
		llu.SetTerm(*s)
	}
	return llu
}

// SetNormalized sets the "normalized" field.
func (llu *LearnedLexemeUpdate) SetNormalized(s string) *LearnedLexemeUpdate {
	llu.mutation.SetNormalized(s)
	return llu
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableNormalized(s *string) *LearnedLexemeUpdate {
	if s != nil {
		llu.SetNormalized(*s)
	}
	return llu
}

// SetLanguage sets the "language" field.
func (llu *LearnedLexemeUpdate) SetLanguage(s string) *LearnedLexemeUpdate {
	llu.mutation.SetLanguage(s)
	return llu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableLanguage(s *string) *LearnedLexemeUpdate {
	if s != nil {
		llu.SetLanguage(*s)
	}
	return llu
}

// SetWordID sets the "word_id" field.
func (llu *LearnedLexemeUpdate) SetWordID(i int) *LearnedLexemeUpdate {
	llu.mutation.SetWordID(i)
	return llu
}

// SetNillableWordID sets the "word_id" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableWordID(i *int) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetWordID(*i)
	}
	return llu
}

// ClearWordID clears the value of the "word_id" field.
func (llu *LearnedLexemeUpdate) ClearWordID() *LearnedLexemeUpdate {
	llu.mutation.ClearWordID()
	return llu
}

// SetMasteryListen sets the "mastery_listen" field.
func (llu *LearnedLexemeUpdate) SetMasteryListen(i int16) *LearnedLexemeUpdate {
	llu.mutation.ResetMasteryListen()
	llu.mutation.SetMasteryListen(i)
	return llu
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableMasteryListen(i *int16) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetMasteryListen(*i)
	}
	return llu
}

// AddMasteryListen adds i to the "mastery_listen" field.
func (llu *LearnedLexemeUpdate) AddMasteryListen(i int16) *LearnedLexemeUpdate {
	llu.mutation.AddMasteryListen(i)
	return llu
}

// SetMasteryRead sets the "mastery_read" field.
func (llu *LearnedLexemeUpdate) SetMasteryRead(i int16) *LearnedLexemeUpdate {
	llu.mutation.ResetMasteryRead()
	llu.mutation.SetMasteryRead(i)
	return llu
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableMasteryRead(i *int16) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetMasteryRead(*i)
	}
	return llu
}

// AddMasteryRead adds i to the "mastery_read" field.
func (llu *LearnedLexemeUpdate) AddMasteryRead(i int16) *LearnedLexemeUpdate {
	llu.mutation.AddMasteryRead(i)
	return llu
}

// SetMasterySpell sets the "mastery_spell" field.
func (llu *LearnedLexemeUpdate) SetMasterySpell(i int16) *LearnedLexemeUpdate {
	llu.mutation.ResetMasterySpell()
	llu.mutation.SetMasterySpell(i)
	return llu
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableMasterySpell(i *int16) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetMasterySpell(*i)
	}
	return llu
}

// AddMasterySpell adds i to the "mastery_spell" field.
func (llu *LearnedLexemeUpdate) AddMasterySpell(i int16) *LearnedLexemeUpdate {
	llu.mutation.AddMasterySpell(i)
	return llu
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (llu *LearnedLexemeUpdate) SetMasteryPronounce(i int16) *LearnedLexemeUpdate {
	llu.mutation.ResetMasteryPronounce()
	llu.mutation.SetMasteryPronounce(i)
	return llu
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableMasteryPronounce(i *int16) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetMasteryPronounce(*i)
	}
	return llu
}

// AddMasteryPronounce adds i to the "mastery_pronounce" field.
func (llu *LearnedLexemeUpdate) AddMasteryPronounce(i int16) *LearnedLexemeUpdate {
	llu.mutation.AddMasteryPronounce(i)
	return llu
}

// SetMasteryOverall sets the "mastery_overall" field.
func (llu *LearnedLexemeUpdate) SetMasteryOverall(i int32) *LearnedLexemeUpdate {
	llu.mutation.ResetMasteryOverall()
	llu.mutation.SetMasteryOverall(i)
	return llu
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableMasteryOverall(i *int32) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetMasteryOverall(*i)
	}
	return llu
}

// AddMasteryOverall adds i to the "mastery_overall" field.
func (llu *LearnedLexemeUpdate) AddMasteryOverall(i int32) *LearnedLexemeUpdate {
	llu.mutation.AddMasteryOverall(i)
	return llu
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (llu *LearnedLexemeUpdate) SetReviewLastReviewAt(t time.Time) *LearnedLexemeUpdate {
	llu.mutation.SetReviewLastReviewAt(t)
	return llu
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableReviewLastReviewAt(t *time.Time) *LearnedLexemeUpdate {
	if t != nil {
		llu.SetReviewLastReviewAt(*t)
	}
	return llu
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (llu *LearnedLexemeUpdate) ClearReviewLastReviewAt() *LearnedLexemeUpdate {
	llu.mutation.ClearReviewLastReviewAt()
	return llu
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (llu *LearnedLexemeUpdate) SetReviewNextReviewAt(t time.Time) *LearnedLexemeUpdate {
	llu.mutation.SetReviewNextReviewAt(t)
	return llu
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableReviewNextReviewAt(t *time.Time) *LearnedLexemeUpdate {
	if t != nil {
		llu.SetReviewNextReviewAt(*t)
	}
	return llu
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (llu *LearnedLexemeUpdate) ClearReviewNextReviewAt() *LearnedLexemeUpdate {
	llu.mutation.ClearReviewNextReviewAt()
	return llu
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (llu *LearnedLexemeUpdate) SetReviewIntervalDays(i int32) *LearnedLexemeUpdate {
	llu.mutation.ResetReviewIntervalDays()
	llu.mutation.SetReviewIntervalDays(i)
	return llu
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableReviewIntervalDays(i *int32) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetReviewIntervalDays(*i)
	}
	return llu
}

// AddReviewIntervalDays adds i to the "review_interval_days" field.
func (llu *LearnedLexemeUpdate) AddReviewIntervalDays(i int32) *LearnedLexemeUpdate {
	llu.mutation.AddReviewIntervalDays(i)
	return llu
}

// SetReviewFailCount sets the "review_fail_count" field.
func (llu *LearnedLexemeUpdate) SetReviewFailCount(i int32) *LearnedLexemeUpdate {
	llu.mutation.ResetReviewFailCount()
	llu.mutation.SetReviewFailCount(i)
	return llu
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableReviewFailCount(i *int32) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetReviewFailCount(*i)
	}
	return llu
}

// AddReviewFailCount adds i to the "review_fail_count" field.
func (llu *LearnedLexemeUpdate) AddReviewFailCount(i int32) *LearnedLexemeUpdate {
	llu.mutation.AddReviewFailCount(i)
	return llu
}

// SetQueryCount sets the "query_count" field.
func (llu *LearnedLexemeUpdate) SetQueryCount(i int64) *LearnedLexemeUpdate {
	llu.mutation.ResetQueryCount()
	llu.mutation.SetQueryCount(i)
	return llu
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableQueryCount(i *int64) *LearnedLexemeUpdate {
	if i != nil {
		llu.SetQueryCount(*i)
	}
	return llu
}

// AddQueryCount adds i to the "query_count" field.
func (llu *LearnedLexemeUpdate) AddQueryCount(i int64) *LearnedLexemeUpdate {
	llu.mutation.AddQueryCount(i)
	return llu
}

// SetNotes sets the "notes" field.
func (llu *LearnedLexemeUpdate) SetNotes(s string) *LearnedLexemeUpdate {
	llu.mutation.SetNotes(s)
	return llu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableNotes(s *string) *LearnedLexemeUpdate {
	if s != nil {
		llu.SetNotes(*s)
	}
	return llu
}

// ClearNotes clears the value of the "notes" field.
func (llu *LearnedLexemeUpdate) ClearNotes() *LearnedLexemeUpdate {
	llu.mutation.ClearNotes()
	return llu
}

// SetSentences sets the "sentences" field.
func (llu *LearnedLexemeUpdate) SetSentences(e []entity.Sentence) *LearnedLexemeUpdate {
	llu.mutation.SetSentences(e)
	return llu
}

// AppendSentences appends e to the "sentences" field.
func (llu *LearnedLexemeUpdate) AppendSentences(e []entity.Sentence) *LearnedLexemeUpdate {
	llu.mutation.AppendSentences(e)
	return llu
}

// SetRelations sets the "relations" field.
func (llu *LearnedLexemeUpdate) SetRelations(elr []entity.LearnedLexemeRelation) *LearnedLexemeUpdate {
	llu.mutation.SetRelations(elr)
	return llu
}

// AppendRelations appends elr to the "relations" field.
func (llu *LearnedLexemeUpdate) AppendRelations(elr []entity.LearnedLexemeRelation) *LearnedLexemeUpdate {
	llu.mutation.AppendRelations(elr)
	return llu
}

// SetTags sets the "tags" field.
func (llu *LearnedLexemeUpdate) SetTags(s []string) *LearnedLexemeUpdate {
	llu.mutation.SetTags(s)
	return llu
}

// AppendTags appends s to the "tags" field.
func (llu *LearnedLexemeUpdate) AppendTags(s []string) *LearnedLexemeUpdate {
	llu.mutation.AppendTags(s)
	return llu
}

// SetCreatedBy sets the "created_by" field.
func (llu *LearnedLexemeUpdate) SetCreatedBy(s string) *LearnedLexemeUpdate {
	llu.mutation.SetCreatedBy(s)
	return llu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (llu *LearnedLexemeUpdate) SetNillableCreatedBy(s *string) *LearnedLexemeUpdate {
	if s != nil {
		llu.SetCreatedBy(*s)
	}
	return llu
}

// SetUpdatedAt sets the "updated_at" field.
func (llu *LearnedLexemeUpdate) SetUpdatedAt(t time.Time) *LearnedLexemeUpdate {
	llu.mutation.SetUpdatedAt(t)
	return llu
}

// SetWord sets the "word" edge to the Word entity.
func (llu *LearnedLexemeUpdate) SetWord(w *Word) *LearnedLexemeUpdate {
	return llu.SetWordID(w.ID)
}

// Mutation returns the LearnedLexemeMutation object of the builder.
func (llu *LearnedLexemeUpdate) Mutation() *LearnedLexemeMutation {
	return llu.mutation
}

// ClearWord clears the "word" edge to the Word entity.
func (llu *LearnedLexemeUpdate) ClearWord() *LearnedLexemeUpdate {
	llu.mutation.ClearWord()
	return llu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (llu *LearnedLexemeUpdate) Save(ctx context.Context) (int, error) {
	llu.defaults()
	return withHooks(ctx, llu.sqlSave, llu.mutation, llu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (llu *LearnedLexemeUpdate) SaveX(ctx context.Context) int {
	affected, err := llu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (llu *LearnedLexemeUpdate) Exec(ctx context.Context) error {
	_, err := llu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llu *LearnedLexemeUpdate) ExecX(ctx context.Context) {
	if err := llu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llu *LearnedLexemeUpdate) defaults() {
	if _, ok := llu.mutation.UpdatedAt(); !ok {
		v := learnedlexeme.UpdateDefaultUpdatedAt()
		llu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (llu *LearnedLexemeUpdate) check() error {
	if v, ok := llu.mutation.Term(); ok {
		if err := learnedlexeme.TermValidator(v); err != nil {
			return &ValidationError{Name: "term", err: fmt.Errorf(`ent: validator failed for field "LearnedLexeme.term": %w`, err)}
		}
	}
	return nil
}

func (llu *LearnedLexemeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := llu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(learnedlexeme.Table, learnedlexeme.Columns, sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt))
	if ps := llu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := llu.mutation.UserID(); ok {
		_spec.SetField(learnedlexeme.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := llu.mutation.AddedUserID(); ok {
		_spec.AddField(learnedlexeme.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := llu.mutation.Term(); ok {
		_spec.SetField(learnedlexeme.FieldTerm, field.TypeString, value)
	}
	if value, ok := llu.mutation.Normalized(); ok {
		_spec.SetField(learnedlexeme.FieldNormalized, field.TypeString, value)
	}
	if value, ok := llu.mutation.Language(); ok {
		_spec.SetField(learnedlexeme.FieldLanguage, field.TypeString, value)
	}
	if value, ok := llu.mutation.MasteryListen(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.AddedMasteryListen(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.MasteryRead(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.AddedMasteryRead(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.MasterySpell(); ok {
		_spec.SetField(learnedlexeme.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.AddedMasterySpell(); ok {
		_spec.AddField(learnedlexeme.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.MasteryPronounce(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.AddedMasteryPronounce(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := llu.mutation.MasteryOverall(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := llu.mutation.AddedMasteryOverall(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := llu.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(learnedlexeme.FieldReviewLastReviewAt, field.TypeTime, value)
	}
	if llu.mutation.ReviewLastReviewAtCleared() {
		_spec.ClearField(learnedlexeme.FieldReviewLastReviewAt, field.TypeTime)
	}
	if value, ok := llu.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(learnedlexeme.FieldReviewNextReviewAt, field.TypeTime, value)
	}
	if llu.mutation.ReviewNextReviewAtCleared() {
		_spec.ClearField(learnedlexeme.FieldReviewNextReviewAt, field.TypeTime)
	}
	if value, ok := llu.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(learnedlexeme.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := llu.mutation.AddedReviewIntervalDays(); ok {
		_spec.AddField(learnedlexeme.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := llu.mutation.ReviewFailCount(); ok {
		_spec.SetField(learnedlexeme.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := llu.mutation.AddedReviewFailCount(); ok {
		_spec.AddField(learnedlexeme.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := llu.mutation.QueryCount(); ok {
		_spec.SetField(learnedlexeme.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := llu.mutation.AddedQueryCount(); ok {
		_spec.AddField(learnedlexeme.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := llu.mutation.Notes(); ok {
		_spec.SetField(learnedlexeme.FieldNotes, field.TypeString, value)
	}
	if llu.mutation.NotesCleared() {
		_spec.ClearField(learnedlexeme.FieldNotes, field.TypeString)
	}
	if value, ok := llu.mutation.Sentences(); ok {
		_spec.SetField(learnedlexeme.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := llu.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedlexeme.FieldSentences, value)
		})
	}
	if value, ok := llu.mutation.Relations(); ok {
		_spec.SetField(learnedlexeme.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := llu.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedlexeme.FieldRelations, value)
		})
	}
	if value, ok := llu.mutation.Tags(); ok {
		_spec.SetField(learnedlexeme.FieldTags, field.TypeJSON, value)
	}
	if value, ok := llu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedlexeme.FieldTags, value)
		})
	}
	if value, ok := llu.mutation.CreatedBy(); ok {
		_spec.SetField(learnedlexeme.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := llu.mutation.UpdatedAt(); ok {
		_spec.SetField(learnedlexeme.FieldUpdatedAt, field.TypeTime, value)
	}
	if llu.mutation.WordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learnedlexeme.WordTable,
			Columns: []string{learnedlexeme.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := llu.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learnedlexeme.WordTable,
			Columns: []string{learnedlexeme.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, llu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{learnedlexeme.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	llu.mutation.done = true
	return n, nil
}

// LearnedLexemeUpdateOne is the builder for updating a single LearnedLexeme entity.
type LearnedLexemeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LearnedLexemeMutation
}

// SetUserID sets the "user_id" field.
func (lluo *LearnedLexemeUpdateOne) SetUserID(i int64) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetUserID()
	lluo.mutation.SetUserID(i)
	return lluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableUserID(i *int64) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetUserID(*i)
	}
	return lluo
}

// AddUserID adds i to the "user_id" field.
func (lluo *LearnedLexemeUpdateOne) AddUserID(i int64) *LearnedLexemeUpdateOne {
	lluo.mutation.AddUserID(i)
	return lluo
}

// SetTerm sets the "term" field.
func (lluo *LearnedLexemeUpdateOne) SetTerm(s string) *LearnedLexemeUpdateOne {
	lluo.mutation.SetTerm(s)
	return lluo
}

// SetNillableTerm sets the "term" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableTerm(s *string) *LearnedLexemeUpdateOne {
	if s != nil {
		lluo.SetTerm(*s)
	}
	return lluo
}

// SetNormalized sets the "normalized" field.
func (lluo *LearnedLexemeUpdateOne) SetNormalized(s string) *LearnedLexemeUpdateOne {
	lluo.mutation.SetNormalized(s)
	return lluo
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableNormalized(s *string) *LearnedLexemeUpdateOne {
	if s != nil {
		lluo.SetNormalized(*s)
	}
	return lluo
}

// SetLanguage sets the "language" field.
func (lluo *LearnedLexemeUpdateOne) SetLanguage(s string) *LearnedLexemeUpdateOne {
	lluo.mutation.SetLanguage(s)
	return lluo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableLanguage(s *string) *LearnedLexemeUpdateOne {
	if s != nil {
		lluo.SetLanguage(*s)
	}
	return lluo
}

// SetWordID sets the "word_id" field.
func (lluo *LearnedLexemeUpdateOne) SetWordID(i int) *LearnedLexemeUpdateOne {
	lluo.mutation.SetWordID(i)
	return lluo
}

// SetNillableWordID sets the "word_id" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableWordID(i *int) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetWordID(*i)
	}
	return lluo
}

// ClearWordID clears the value of the "word_id" field.
func (lluo *LearnedLexemeUpdateOne) ClearWordID() *LearnedLexemeUpdateOne {
	lluo.mutation.ClearWordID()
	return lluo
}

// SetMasteryListen sets the "mastery_listen" field.
func (lluo *LearnedLexemeUpdateOne) SetMasteryListen(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetMasteryListen()
	lluo.mutation.SetMasteryListen(i)
	return lluo
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableMasteryListen(i *int16) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetMasteryListen(*i)
	}
	return lluo
}

// AddMasteryListen adds i to the "mastery_listen" field.
func (lluo *LearnedLexemeUpdateOne) AddMasteryListen(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.AddMasteryListen(i)
	return lluo
}

// SetMasteryRead sets the "mastery_read" field.
func (lluo *LearnedLexemeUpdateOne) SetMasteryRead(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetMasteryRead()
	lluo.mutation.SetMasteryRead(i)
	return lluo
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableMasteryRead(i *int16) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetMasteryRead(*i)
	}
	return lluo
}

// AddMasteryRead adds i to the "mastery_read" field.
func (lluo *LearnedLexemeUpdateOne) AddMasteryRead(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.AddMasteryRead(i)
	return lluo
}

// SetMasterySpell sets the "mastery_spell" field.
func (lluo *LearnedLexemeUpdateOne) SetMasterySpell(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetMasterySpell()
	lluo.mutation.SetMasterySpell(i)
	return lluo
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableMasterySpell(i *int16) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetMasterySpell(*i)
	}
	return lluo
}

// AddMasterySpell adds i to the "mastery_spell" field.
func (lluo *LearnedLexemeUpdateOne) AddMasterySpell(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.AddMasterySpell(i)
	return lluo
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (lluo *LearnedLexemeUpdateOne) SetMasteryPronounce(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetMasteryPronounce()
	lluo.mutation.SetMasteryPronounce(i)
	return lluo
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableMasteryPronounce(i *int16) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetMasteryPronounce(*i)
	}
	return lluo
}

// AddMasteryPronounce adds i to the "mastery_pronounce" field.
func (lluo *LearnedLexemeUpdateOne) AddMasteryPronounce(i int16) *LearnedLexemeUpdateOne {
	lluo.mutation.AddMasteryPronounce(i)
	return lluo
}

// SetMasteryOverall sets the "mastery_overall" field.
func (lluo *LearnedLexemeUpdateOne) SetMasteryOverall(i int32) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetMasteryOverall()
	lluo.mutation.SetMasteryOverall(i)
	return lluo
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableMasteryOverall(i *int32) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetMasteryOverall(*i)
	}
	return lluo
}

// AddMasteryOverall adds i to the "mastery_overall" field.
func (lluo *LearnedLexemeUpdateOne) AddMasteryOverall(i int32) *LearnedLexemeUpdateOne {
	lluo.mutation.AddMasteryOverall(i)
	return lluo
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (lluo *LearnedLexemeUpdateOne) SetReviewLastReviewAt(t time.Time) *LearnedLexemeUpdateOne {
	lluo.mutation.SetReviewLastReviewAt(t)
	return lluo
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableReviewLastReviewAt(t *time.Time) *LearnedLexemeUpdateOne {
	if t != nil {
		lluo.SetReviewLastReviewAt(*t)
	}
	return lluo
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (lluo *LearnedLexemeUpdateOne) ClearReviewLastReviewAt() *LearnedLexemeUpdateOne {
	lluo.mutation.ClearReviewLastReviewAt()
	return lluo
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (lluo *LearnedLexemeUpdateOne) SetReviewNextReviewAt(t time.Time) *LearnedLexemeUpdateOne {
	lluo.mutation.SetReviewNextReviewAt(t)
	return lluo
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableReviewNextReviewAt(t *time.Time) *LearnedLexemeUpdateOne {
	if t != nil {
		lluo.SetReviewNextReviewAt(*t)
	}
	return lluo
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (lluo *LearnedLexemeUpdateOne) ClearReviewNextReviewAt() *LearnedLexemeUpdateOne {
	lluo.mutation.ClearReviewNextReviewAt()
	return lluo
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (lluo *LearnedLexemeUpdateOne) SetReviewIntervalDays(i int32) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetReviewIntervalDays()
	lluo.mutation.SetReviewIntervalDays(i)
	return lluo
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableReviewIntervalDays(i *int32) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetReviewIntervalDays(*i)
	}
	return lluo
}

// AddReviewIntervalDays adds i to the "review_interval_days" field.
func (lluo *LearnedLexemeUpdateOne) AddReviewIntervalDays(i int32) *LearnedLexemeUpdateOne {
	lluo.mutation.AddReviewIntervalDays(i)
	return lluo
}

// SetReviewFailCount sets the "review_fail_count" field.
func (lluo *LearnedLexemeUpdateOne) SetReviewFailCount(i int32) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetReviewFailCount()
	lluo.mutation.SetReviewFailCount(i)
	return lluo
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableReviewFailCount(i *int32) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetReviewFailCount(*i)
	}
	return lluo
}

// AddReviewFailCount adds i to the "review_fail_count" field.
func (lluo *LearnedLexemeUpdateOne) AddReviewFailCount(i int32) *LearnedLexemeUpdateOne {
	lluo.mutation.AddReviewFailCount(i)
	return lluo
}

// SetQueryCount sets the "query_count" field.
func (lluo *LearnedLexemeUpdateOne) SetQueryCount(i int64) *LearnedLexemeUpdateOne {
	lluo.mutation.ResetQueryCount()
	lluo.mutation.SetQueryCount(i)
	return lluo
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableQueryCount(i *int64) *LearnedLexemeUpdateOne {
	if i != nil {
		lluo.SetQueryCount(*i)
	}
	return lluo
}

// AddQueryCount adds i to the "query_count" field.
func (lluo *LearnedLexemeUpdateOne) AddQueryCount(i int64) *LearnedLexemeUpdateOne {
	lluo.mutation.AddQueryCount(i)
	return lluo
}

// SetNotes sets the "notes" field.
func (lluo *LearnedLexemeUpdateOne) SetNotes(s string) *LearnedLexemeUpdateOne {
	lluo.mutation.SetNotes(s)
	return lluo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableNotes(s *string) *LearnedLexemeUpdateOne {
	if s != nil {
		lluo.SetNotes(*s)
	}
	return lluo
}

// ClearNotes clears the value of the "notes" field.
func (lluo *LearnedLexemeUpdateOne) ClearNotes() *LearnedLexemeUpdateOne {
	lluo.mutation.ClearNotes()
	return lluo
}

// SetSentences sets the "sentences" field.
func (lluo *LearnedLexemeUpdateOne) SetSentences(e []entity.Sentence) *LearnedLexemeUpdateOne {
	lluo.mutation.SetSentences(e)
	return lluo
}

// AppendSentences appends e to the "sentences" field.
func (lluo *LearnedLexemeUpdateOne) AppendSentences(e []entity.Sentence) *LearnedLexemeUpdateOne {
	lluo.mutation.AppendSentences(e)
	return lluo
}

// SetRelations sets the "relations" field.
func (lluo *LearnedLexemeUpdateOne) SetRelations(elr []entity.LearnedLexemeRelation) *LearnedLexemeUpdateOne {
	lluo.mutation.SetRelations(elr)
	return lluo
}

// AppendRelations appends elr to the "relations" field.
func (lluo *LearnedLexemeUpdateOne) AppendRelations(elr []entity.LearnedLexemeRelation) *LearnedLexemeUpdateOne {
	lluo.mutation.AppendRelations(elr)
	return lluo
}

// SetTags sets the "tags" field.
func (lluo *LearnedLexemeUpdateOne) SetTags(s []string) *LearnedLexemeUpdateOne {
	lluo.mutation.SetTags(s)
	return lluo
}

// AppendTags appends s to the "tags" field.
func (lluo *LearnedLexemeUpdateOne) AppendTags(s []string) *LearnedLexemeUpdateOne {
	lluo.mutation.AppendTags(s)
	return lluo
}

// SetCreatedBy sets the "created_by" field.
func (lluo *LearnedLexemeUpdateOne) SetCreatedBy(s string) *LearnedLexemeUpdateOne {
	lluo.mutation.SetCreatedBy(s)
	return lluo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lluo *LearnedLexemeUpdateOne) SetNillableCreatedBy(s *string) *LearnedLexemeUpdateOne {
	if s != nil {
		lluo.SetCreatedBy(*s)
	}
	return lluo
}

// SetUpdatedAt sets the "updated_at" field.
func (lluo *LearnedLexemeUpdateOne) SetUpdatedAt(t time.Time) *LearnedLexemeUpdateOne {
	lluo.mutation.SetUpdatedAt(t)
	return lluo
}

// SetWord sets the "word" edge to the Word entity.
func (lluo *LearnedLexemeUpdateOne) SetWord(w *Word) *LearnedLexemeUpdateOne {
	return lluo.SetWordID(w.ID)
}

// Mutation returns the LearnedLexemeMutation object of the builder.
func (lluo *LearnedLexemeUpdateOne) Mutation() *LearnedLexemeMutation {
	return lluo.mutation
}

// ClearWord clears the "word" edge to the Word entity.
func (lluo *LearnedLexemeUpdateOne) ClearWord() *LearnedLexemeUpdateOne {
	lluo.mutation.ClearWord()
	return lluo
}

// Where appends a list predicates to the LearnedLexemeUpdate builder.
func (lluo *LearnedLexemeUpdateOne) Where(ps ...predicate.LearnedLexeme) *LearnedLexemeUpdateOne {
	lluo.mutation.Where(ps...)
	return lluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lluo *LearnedLexemeUpdateOne) Select(field string, fields ...string) *LearnedLexemeUpdateOne {
	lluo.fields = append([]string{field}, fields...)
	return lluo
}

// Save executes the query and returns the updated LearnedLexeme entity.
func (lluo *LearnedLexemeUpdateOne) Save(ctx context.Context) (*LearnedLexeme, error) {
	lluo.defaults()
	return withHooks(ctx, lluo.sqlSave, lluo.mutation, lluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lluo *LearnedLexemeUpdateOne) SaveX(ctx context.Context) *LearnedLexeme {
	node, err := lluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lluo *LearnedLexemeUpdateOne) Exec(ctx context.Context) error {
	_, err := lluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lluo *LearnedLexemeUpdateOne) ExecX(ctx context.Context) {
	if err := lluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lluo *LearnedLexemeUpdateOne) defaults() {
	if _, ok := lluo.mutation.UpdatedAt(); !ok {
		v := learnedlexeme.UpdateDefaultUpdatedAt()
		lluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lluo *LearnedLexemeUpdateOne) check() error {
	if v, ok := lluo.mutation.Term(); ok {
		if err := learnedlexeme.TermValidator(v); err != nil {
			return &ValidationError{Name: "term", err: fmt.Errorf(`ent: validator failed for field "LearnedLexeme.term": %w`, err)}
		}
	}
	return nil
}

func (lluo *LearnedLexemeUpdateOne) sqlSave(ctx context.Context) (_node *LearnedLexeme, err error) {
	if err := lluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(learnedlexeme.Table, learnedlexeme.Columns, sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt))
	id, ok := lluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LearnedLexeme.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, learnedlexeme.FieldID)
		for _, f := range fields {
			if !learnedlexeme.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != learnedlexeme.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lluo.mutation.UserID(); ok {
		_spec.SetField(learnedlexeme.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := lluo.mutation.AddedUserID(); ok {
		_spec.AddField(learnedlexeme.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := lluo.mutation.Term(); ok {
		_spec.SetField(learnedlexeme.FieldTerm, field.TypeString, value)
	}
	if value, ok := lluo.mutation.Normalized(); ok {
		_spec.SetField(learnedlexeme.FieldNormalized, field.TypeString, value)
	}
	if value, ok := lluo.mutation.Language(); ok {
		_spec.SetField(learnedlexeme.FieldLanguage, field.TypeString, value)
	}
	if value, ok := lluo.mutation.MasteryListen(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.AddedMasteryListen(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryListen, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.MasteryRead(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.AddedMasteryRead(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryRead, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.MasterySpell(); ok {
		_spec.SetField(learnedlexeme.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.AddedMasterySpell(); ok {
		_spec.AddField(learnedlexeme.FieldMasterySpell, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.MasteryPronounce(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.AddedMasteryPronounce(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryPronounce, field.TypeInt16, value)
	}
	if value, ok := lluo.mutation.MasteryOverall(); ok {
		_spec.SetField(learnedlexeme.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := lluo.mutation.AddedMasteryOverall(); ok {
		_spec.AddField(learnedlexeme.FieldMasteryOverall, field.TypeInt32, value)
	}
	if value, ok := lluo.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(learnedlexeme.FieldReviewLastReviewAt, field.TypeTime, value)
	}
	if lluo.mutation.ReviewLastReviewAtCleared() {
		_spec.ClearField(learnedlexeme.FieldReviewLastReviewAt, field.TypeTime)
	}
	if value, ok := lluo.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(learnedlexeme.FieldReviewNextReviewAt, field.TypeTime, value)
	}
	if lluo.mutation.ReviewNextReviewAtCleared() {
		_spec.ClearField(learnedlexeme.FieldReviewNextReviewAt, field.TypeTime)
	}
	if value, ok := lluo.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(learnedlexeme.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := lluo.mutation.AddedReviewIntervalDays(); ok {
		_spec.AddField(learnedlexeme.FieldReviewIntervalDays, field.TypeInt32, value)
	}
	if value, ok := lluo.mutation.ReviewFailCount(); ok {
		_spec.SetField(learnedlexeme.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := lluo.mutation.AddedReviewFailCount(); ok {
		_spec.AddField(learnedlexeme.FieldReviewFailCount, field.TypeInt32, value)
	}
	if value, ok := lluo.mutation.QueryCount(); ok {
		_spec.SetField(learnedlexeme.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := lluo.mutation.AddedQueryCount(); ok {
		_spec.AddField(learnedlexeme.FieldQueryCount, field.TypeInt64, value)
	}
	if value, ok := lluo.mutation.Notes(); ok {
		_spec.SetField(learnedlexeme.FieldNotes, field.TypeString, value)
	}
	if lluo.mutation.NotesCleared() {
		_spec.ClearField(learnedlexeme.FieldNotes, field.TypeString)
	}
	if value, ok := lluo.mutation.Sentences(); ok {
		_spec.SetField(learnedlexeme.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := lluo.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedlexeme.FieldSentences, value)
		})
	}
	if value, ok := lluo.mutation.Relations(); ok {
		_spec.SetField(learnedlexeme.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := lluo.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedlexeme.FieldRelations, value)
		})
	}
	if value, ok := lluo.mutation.Tags(); ok {
		_spec.SetField(learnedlexeme.FieldTags, field.TypeJSON, value)
	}
	if value, ok := lluo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, learnedlexeme.FieldTags, value)
		})
	}
	if value, ok := lluo.mutation.CreatedBy(); ok {
		_spec.SetField(learnedlexeme.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := lluo.mutation.UpdatedAt(); ok {
		_spec.SetField(learnedlexeme.FieldUpdatedAt, field.TypeTime, value)
	}
	if lluo.mutation.WordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learnedlexeme.WordTable,
			Columns: []string{learnedlexeme.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lluo.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learnedlexeme.WordTable,
			Columns: []string{learnedlexeme.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LearnedLexeme{config: lluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{learnedlexeme.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lluo.mutation.done = true
	return _node, nil
}
