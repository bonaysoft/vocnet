// Code generated by ent, DO NOT EDIT.

package word

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/types"
)

const (
	// Label holds the string label denoting the word type in the database.
	Label = "word"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldWordType holds the string denoting the word_type field in the database.
	FieldWordType = "word_type"
	// FieldLemma holds the string denoting the lemma field in the database.
	FieldLemma = "lemma"
	// FieldPhonetics holds the string denoting the phonetics field in the database.
	FieldPhonetics = "phonetics"
	// FieldMeanings holds the string denoting the meanings field in the database.
	FieldMeanings = "meanings"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldPhrases holds the string denoting the phrases field in the database.
	FieldPhrases = "phrases"
	// FieldSentences holds the string denoting the sentences field in the database.
	FieldSentences = "sentences"
	// FieldRelations holds the string denoting the relations field in the database.
	FieldRelations = "relations"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the word in the database.
	Table = "words"
)

// Columns holds all SQL columns for word fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldLanguage,
	FieldWordType,
	FieldLemma,
	FieldPhonetics,
	FieldMeanings,
	FieldTags,
	FieldPhrases,
	FieldSentences,
	FieldRelations,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultWordType holds the default value on creation for the "word_type" field.
	DefaultWordType string
	// DefaultPhonetics holds the default value on creation for the "phonetics" field.
	DefaultPhonetics types.WordPhonetics
	// DefaultMeanings holds the default value on creation for the "meanings" field.
	DefaultMeanings types.WordMeanings
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultPhrases holds the default value on creation for the "phrases" field.
	DefaultPhrases types.Phrases
	// DefaultSentences holds the default value on creation for the "sentences" field.
	DefaultSentences types.Sentences
	// DefaultRelations holds the default value on creation for the "relations" field.
	DefaultRelations types.WordRelations
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Word queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByWordType orders the results by the word_type field.
func ByWordType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWordType, opts...).ToFunc()
}

// ByLemma orders the results by the lemma field.
func ByLemma(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLemma, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
