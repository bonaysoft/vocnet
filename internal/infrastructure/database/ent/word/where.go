// Code generated by ent, DO NOT EDIT.

package word

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldText, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldLanguage, v))
}

// WordType applies equality check predicate on the "word_type" field. It's identical to WordTypeEQ.
func WordType(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldWordType, v))
}

// Lemma applies equality check predicate on the "lemma" field. It's identical to LemmaEQ.
func Lemma(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldLemma, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldUpdatedAt, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldText, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldLanguage, v))
}

// WordTypeEQ applies the EQ predicate on the "word_type" field.
func WordTypeEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldWordType, v))
}

// WordTypeNEQ applies the NEQ predicate on the "word_type" field.
func WordTypeNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldWordType, v))
}

// WordTypeIn applies the In predicate on the "word_type" field.
func WordTypeIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldWordType, vs...))
}

// WordTypeNotIn applies the NotIn predicate on the "word_type" field.
func WordTypeNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldWordType, vs...))
}

// WordTypeGT applies the GT predicate on the "word_type" field.
func WordTypeGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldWordType, v))
}

// WordTypeGTE applies the GTE predicate on the "word_type" field.
func WordTypeGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldWordType, v))
}

// WordTypeLT applies the LT predicate on the "word_type" field.
func WordTypeLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldWordType, v))
}

// WordTypeLTE applies the LTE predicate on the "word_type" field.
func WordTypeLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldWordType, v))
}

// WordTypeContains applies the Contains predicate on the "word_type" field.
func WordTypeContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldWordType, v))
}

// WordTypeHasPrefix applies the HasPrefix predicate on the "word_type" field.
func WordTypeHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldWordType, v))
}

// WordTypeHasSuffix applies the HasSuffix predicate on the "word_type" field.
func WordTypeHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldWordType, v))
}

// WordTypeEqualFold applies the EqualFold predicate on the "word_type" field.
func WordTypeEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldWordType, v))
}

// WordTypeContainsFold applies the ContainsFold predicate on the "word_type" field.
func WordTypeContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldWordType, v))
}

// LemmaEQ applies the EQ predicate on the "lemma" field.
func LemmaEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldLemma, v))
}

// LemmaNEQ applies the NEQ predicate on the "lemma" field.
func LemmaNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldLemma, v))
}

// LemmaIn applies the In predicate on the "lemma" field.
func LemmaIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldLemma, vs...))
}

// LemmaNotIn applies the NotIn predicate on the "lemma" field.
func LemmaNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldLemma, vs...))
}

// LemmaGT applies the GT predicate on the "lemma" field.
func LemmaGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldLemma, v))
}

// LemmaGTE applies the GTE predicate on the "lemma" field.
func LemmaGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldLemma, v))
}

// LemmaLT applies the LT predicate on the "lemma" field.
func LemmaLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldLemma, v))
}

// LemmaLTE applies the LTE predicate on the "lemma" field.
func LemmaLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldLemma, v))
}

// LemmaContains applies the Contains predicate on the "lemma" field.
func LemmaContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldLemma, v))
}

// LemmaHasPrefix applies the HasPrefix predicate on the "lemma" field.
func LemmaHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldLemma, v))
}

// LemmaHasSuffix applies the HasSuffix predicate on the "lemma" field.
func LemmaHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldLemma, v))
}

// LemmaIsNil applies the IsNil predicate on the "lemma" field.
func LemmaIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldLemma))
}

// LemmaNotNil applies the NotNil predicate on the "lemma" field.
func LemmaNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldLemma))
}

// LemmaEqualFold applies the EqualFold predicate on the "lemma" field.
func LemmaEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldLemma, v))
}

// LemmaContainsFold applies the ContainsFold predicate on the "lemma" field.
func LemmaContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldLemma, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Word) predicate.Word {
	return predicate.Word(sql.NotPredicates(p))
}
