// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/word"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/types"
)

// WordCreate is the builder for creating a Word entity.
type WordCreate struct {
	config
	mutation *WordMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (wc *WordCreate) SetText(s string) *WordCreate {
	wc.mutation.SetText(s)
	return wc
}

// SetLanguage sets the "language" field.
func (wc *WordCreate) SetLanguage(s string) *WordCreate {
	wc.mutation.SetLanguage(s)
	return wc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (wc *WordCreate) SetNillableLanguage(s *string) *WordCreate {
	if s != nil {
		wc.SetLanguage(*s)
	}
	return wc
}

// SetWordType sets the "word_type" field.
func (wc *WordCreate) SetWordType(s string) *WordCreate {
	wc.mutation.SetWordType(s)
	return wc
}

// SetNillableWordType sets the "word_type" field if the given value is not nil.
func (wc *WordCreate) SetNillableWordType(s *string) *WordCreate {
	if s != nil {
		wc.SetWordType(*s)
	}
	return wc
}

// SetLemma sets the "lemma" field.
func (wc *WordCreate) SetLemma(s string) *WordCreate {
	wc.mutation.SetLemma(s)
	return wc
}

// SetNillableLemma sets the "lemma" field if the given value is not nil.
func (wc *WordCreate) SetNillableLemma(s *string) *WordCreate {
	if s != nil {
		wc.SetLemma(*s)
	}
	return wc
}

// SetPhonetics sets the "phonetics" field.
func (wc *WordCreate) SetPhonetics(tp types.WordPhonetics) *WordCreate {
	wc.mutation.SetPhonetics(tp)
	return wc
}

// SetMeanings sets the "meanings" field.
func (wc *WordCreate) SetMeanings(tm types.WordMeanings) *WordCreate {
	wc.mutation.SetMeanings(tm)
	return wc
}

// SetTags sets the "tags" field.
func (wc *WordCreate) SetTags(s []string) *WordCreate {
	wc.mutation.SetTags(s)
	return wc
}

// SetPhrases sets the "phrases" field.
func (wc *WordCreate) SetPhrases(t types.Phrases) *WordCreate {
	wc.mutation.SetPhrases(t)
	return wc
}

// SetSentences sets the "sentences" field.
func (wc *WordCreate) SetSentences(t types.Sentences) *WordCreate {
	wc.mutation.SetSentences(t)
	return wc
}

// SetRelations sets the "relations" field.
func (wc *WordCreate) SetRelations(tr types.WordRelations) *WordCreate {
	wc.mutation.SetRelations(tr)
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WordCreate) SetCreatedAt(t time.Time) *WordCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WordCreate) SetNillableCreatedAt(t *time.Time) *WordCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WordCreate) SetUpdatedAt(t time.Time) *WordCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WordCreate) SetNillableUpdatedAt(t *time.Time) *WordCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// Mutation returns the WordMutation object of the builder.
func (wc *WordCreate) Mutation() *WordMutation {
	return wc.mutation
}

// Save creates the Word in the database.
func (wc *WordCreate) Save(ctx context.Context) (*Word, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WordCreate) SaveX(ctx context.Context) *Word {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WordCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WordCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WordCreate) defaults() {
	if _, ok := wc.mutation.Language(); !ok {
		v := word.DefaultLanguage
		wc.mutation.SetLanguage(v)
	}
	if _, ok := wc.mutation.WordType(); !ok {
		v := word.DefaultWordType
		wc.mutation.SetWordType(v)
	}
	if _, ok := wc.mutation.Phonetics(); !ok {
		v := word.DefaultPhonetics
		wc.mutation.SetPhonetics(v)
	}
	if _, ok := wc.mutation.Meanings(); !ok {
		v := word.DefaultMeanings
		wc.mutation.SetMeanings(v)
	}
	if _, ok := wc.mutation.Tags(); !ok {
		v := word.DefaultTags
		wc.mutation.SetTags(v)
	}
	if _, ok := wc.mutation.Phrases(); !ok {
		v := word.DefaultPhrases
		wc.mutation.SetPhrases(v)
	}
	if _, ok := wc.mutation.Sentences(); !ok {
		v := word.DefaultSentences
		wc.mutation.SetSentences(v)
	}
	if _, ok := wc.mutation.Relations(); !ok {
		v := word.DefaultRelations
		wc.mutation.SetRelations(v)
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := word.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := word.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WordCreate) check() error {
	if _, ok := wc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Word.text"`)}
	}
	if v, ok := wc.mutation.Text(); ok {
		if err := word.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Word.text": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Word.language"`)}
	}
	if _, ok := wc.mutation.WordType(); !ok {
		return &ValidationError{Name: "word_type", err: errors.New(`ent: missing required field "Word.word_type"`)}
	}
	if _, ok := wc.mutation.Phonetics(); !ok {
		return &ValidationError{Name: "phonetics", err: errors.New(`ent: missing required field "Word.phonetics"`)}
	}
	if _, ok := wc.mutation.Meanings(); !ok {
		return &ValidationError{Name: "meanings", err: errors.New(`ent: missing required field "Word.meanings"`)}
	}
	if _, ok := wc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Word.tags"`)}
	}
	if _, ok := wc.mutation.Phrases(); !ok {
		return &ValidationError{Name: "phrases", err: errors.New(`ent: missing required field "Word.phrases"`)}
	}
	if _, ok := wc.mutation.Sentences(); !ok {
		return &ValidationError{Name: "sentences", err: errors.New(`ent: missing required field "Word.sentences"`)}
	}
	if _, ok := wc.mutation.Relations(); !ok {
		return &ValidationError{Name: "relations", err: errors.New(`ent: missing required field "Word.relations"`)}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Word.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Word.updated_at"`)}
	}
	return nil
}

func (wc *WordCreate) sqlSave(ctx context.Context) (*Word, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WordCreate) createSpec() (*Word, *sqlgraph.CreateSpec) {
	var (
		_node = &Word{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(word.Table, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Text(); ok {
		_spec.SetField(word.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := wc.mutation.Language(); ok {
		_spec.SetField(word.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := wc.mutation.WordType(); ok {
		_spec.SetField(word.FieldWordType, field.TypeString, value)
		_node.WordType = value
	}
	if value, ok := wc.mutation.Lemma(); ok {
		_spec.SetField(word.FieldLemma, field.TypeString, value)
		_node.Lemma = &value
	}
	if value, ok := wc.mutation.Phonetics(); ok {
		_spec.SetField(word.FieldPhonetics, field.TypeJSON, value)
		_node.Phonetics = value
	}
	if value, ok := wc.mutation.Meanings(); ok {
		_spec.SetField(word.FieldMeanings, field.TypeJSON, value)
		_node.Meanings = value
	}
	if value, ok := wc.mutation.Tags(); ok {
		_spec.SetField(word.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := wc.mutation.Phrases(); ok {
		_spec.SetField(word.FieldPhrases, field.TypeJSON, value)
		_node.Phrases = value
	}
	if value, ok := wc.mutation.Sentences(); ok {
		_spec.SetField(word.FieldSentences, field.TypeJSON, value)
		_node.Sentences = value
	}
	if value, ok := wc.mutation.Relations(); ok {
		_spec.SetField(word.FieldRelations, field.TypeJSON, value)
		_node.Relations = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(word.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(word.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// WordCreateBulk is the builder for creating many Word entities in bulk.
type WordCreateBulk struct {
	config
	err      error
	builders []*WordCreate
}

// Save creates the Word entities in the database.
func (wcb *WordCreateBulk) Save(ctx context.Context) ([]*Word, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Word, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WordCreateBulk) SaveX(ctx context.Context) []*Word {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WordCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WordCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
