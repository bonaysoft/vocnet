// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedlexeme"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/word"
)

// WordUpdate is the builder for updating Word entities.
type WordUpdate struct {
	config
	hooks    []Hook
	mutation *WordMutation
}

// Where appends a list predicates to the WordUpdate builder.
func (wu *WordUpdate) Where(ps ...predicate.Word) *WordUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetText sets the "text" field.
func (wu *WordUpdate) SetText(s string) *WordUpdate {
	wu.mutation.SetText(s)
	return wu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (wu *WordUpdate) SetNillableText(s *string) *WordUpdate {
	if s != nil {
		wu.SetText(*s)
	}
	return wu
}

// SetNormalized sets the "normalized" field.
func (wu *WordUpdate) SetNormalized(s string) *WordUpdate {
	wu.mutation.SetNormalized(s)
	return wu
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (wu *WordUpdate) SetNillableNormalized(s *string) *WordUpdate {
	if s != nil {
		wu.SetNormalized(*s)
	}
	return wu
}

// SetLanguage sets the "language" field.
func (wu *WordUpdate) SetLanguage(s string) *WordUpdate {
	wu.mutation.SetLanguage(s)
	return wu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (wu *WordUpdate) SetNillableLanguage(s *string) *WordUpdate {
	if s != nil {
		wu.SetLanguage(*s)
	}
	return wu
}

// SetWordType sets the "word_type" field.
func (wu *WordUpdate) SetWordType(s string) *WordUpdate {
	wu.mutation.SetWordType(s)
	return wu
}

// SetNillableWordType sets the "word_type" field if the given value is not nil.
func (wu *WordUpdate) SetNillableWordType(s *string) *WordUpdate {
	if s != nil {
		wu.SetWordType(*s)
	}
	return wu
}

// SetLemma sets the "lemma" field.
func (wu *WordUpdate) SetLemma(s string) *WordUpdate {
	wu.mutation.SetLemma(s)
	return wu
}

// SetNillableLemma sets the "lemma" field if the given value is not nil.
func (wu *WordUpdate) SetNillableLemma(s *string) *WordUpdate {
	if s != nil {
		wu.SetLemma(*s)
	}
	return wu
}

// ClearLemma clears the value of the "lemma" field.
func (wu *WordUpdate) ClearLemma() *WordUpdate {
	wu.mutation.ClearLemma()
	return wu
}

// SetPhonetics sets the "phonetics" field.
func (wu *WordUpdate) SetPhonetics(ep []entity.WordPhonetic) *WordUpdate {
	wu.mutation.SetPhonetics(ep)
	return wu
}

// AppendPhonetics appends ep to the "phonetics" field.
func (wu *WordUpdate) AppendPhonetics(ep []entity.WordPhonetic) *WordUpdate {
	wu.mutation.AppendPhonetics(ep)
	return wu
}

// SetDefinitions sets the "definitions" field.
func (wu *WordUpdate) SetDefinitions(ed []entity.WordDefinition) *WordUpdate {
	wu.mutation.SetDefinitions(ed)
	return wu
}

// AppendDefinitions appends ed to the "definitions" field.
func (wu *WordUpdate) AppendDefinitions(ed []entity.WordDefinition) *WordUpdate {
	wu.mutation.AppendDefinitions(ed)
	return wu
}

// SetPhrases sets the "phrases" field.
func (wu *WordUpdate) SetPhrases(e []entity.Phrase) *WordUpdate {
	wu.mutation.SetPhrases(e)
	return wu
}

// AppendPhrases appends e to the "phrases" field.
func (wu *WordUpdate) AppendPhrases(e []entity.Phrase) *WordUpdate {
	wu.mutation.AppendPhrases(e)
	return wu
}

// SetSentences sets the "sentences" field.
func (wu *WordUpdate) SetSentences(e []entity.Sentence) *WordUpdate {
	wu.mutation.SetSentences(e)
	return wu
}

// AppendSentences appends e to the "sentences" field.
func (wu *WordUpdate) AppendSentences(e []entity.Sentence) *WordUpdate {
	wu.mutation.AppendSentences(e)
	return wu
}

// SetRelations sets the "relations" field.
func (wu *WordUpdate) SetRelations(er []entity.WordRelation) *WordUpdate {
	wu.mutation.SetRelations(er)
	return wu
}

// AppendRelations appends er to the "relations" field.
func (wu *WordUpdate) AppendRelations(er []entity.WordRelation) *WordUpdate {
	wu.mutation.AppendRelations(er)
	return wu
}

// SetCategories sets the "categories" field.
func (wu *WordUpdate) SetCategories(s []string) *WordUpdate {
	wu.mutation.SetCategories(s)
	return wu
}

// AppendCategories appends s to the "categories" field.
func (wu *WordUpdate) AppendCategories(s []string) *WordUpdate {
	wu.mutation.AppendCategories(s)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WordUpdate) SetUpdatedAt(t time.Time) *WordUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// AddLearnedLexemeIDs adds the "learned_lexemes" edge to the LearnedLexeme entity by IDs.
func (wu *WordUpdate) AddLearnedLexemeIDs(ids ...int) *WordUpdate {
	wu.mutation.AddLearnedLexemeIDs(ids...)
	return wu
}

// AddLearnedLexemes adds the "learned_lexemes" edges to the LearnedLexeme entity.
func (wu *WordUpdate) AddLearnedLexemes(l ...*LearnedLexeme) *WordUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wu.AddLearnedLexemeIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (wu *WordUpdate) Mutation() *WordMutation {
	return wu.mutation
}

// ClearLearnedLexemes clears all "learned_lexemes" edges to the LearnedLexeme entity.
func (wu *WordUpdate) ClearLearnedLexemes() *WordUpdate {
	wu.mutation.ClearLearnedLexemes()
	return wu
}

// RemoveLearnedLexemeIDs removes the "learned_lexemes" edge to LearnedLexeme entities by IDs.
func (wu *WordUpdate) RemoveLearnedLexemeIDs(ids ...int) *WordUpdate {
	wu.mutation.RemoveLearnedLexemeIDs(ids...)
	return wu
}

// RemoveLearnedLexemes removes "learned_lexemes" edges to LearnedLexeme entities.
func (wu *WordUpdate) RemoveLearnedLexemes(l ...*LearnedLexeme) *WordUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wu.RemoveLearnedLexemeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WordUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WordUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WordUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WordUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WordUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := word.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WordUpdate) check() error {
	if v, ok := wu.mutation.Text(); ok {
		if err := word.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Word.text": %w`, err)}
		}
	}
	return nil
}

func (wu *WordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(word.Table, word.Columns, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Text(); ok {
		_spec.SetField(word.FieldText, field.TypeString, value)
	}
	if value, ok := wu.mutation.Normalized(); ok {
		_spec.SetField(word.FieldNormalized, field.TypeString, value)
	}
	if value, ok := wu.mutation.Language(); ok {
		_spec.SetField(word.FieldLanguage, field.TypeString, value)
	}
	if value, ok := wu.mutation.WordType(); ok {
		_spec.SetField(word.FieldWordType, field.TypeString, value)
	}
	if value, ok := wu.mutation.Lemma(); ok {
		_spec.SetField(word.FieldLemma, field.TypeString, value)
	}
	if wu.mutation.LemmaCleared() {
		_spec.ClearField(word.FieldLemma, field.TypeString)
	}
	if value, ok := wu.mutation.Phonetics(); ok {
		_spec.SetField(word.FieldPhonetics, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedPhonetics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldPhonetics, value)
		})
	}
	if value, ok := wu.mutation.Definitions(); ok {
		_spec.SetField(word.FieldDefinitions, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedDefinitions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldDefinitions, value)
		})
	}
	if value, ok := wu.mutation.Phrases(); ok {
		_spec.SetField(word.FieldPhrases, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedPhrases(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldPhrases, value)
		})
	}
	if value, ok := wu.mutation.Sentences(); ok {
		_spec.SetField(word.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldSentences, value)
		})
	}
	if value, ok := wu.mutation.Relations(); ok {
		_spec.SetField(word.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldRelations, value)
		})
	}
	if value, ok := wu.mutation.Categories(); ok {
		_spec.SetField(word.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldCategories, value)
		})
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(word.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.LearnedLexemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.LearnedLexemesTable,
			Columns: []string{word.LearnedLexemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedLearnedLexemesIDs(); len(nodes) > 0 && !wu.mutation.LearnedLexemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.LearnedLexemesTable,
			Columns: []string{word.LearnedLexemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.LearnedLexemesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.LearnedLexemesTable,
			Columns: []string{word.LearnedLexemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{word.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WordUpdateOne is the builder for updating a single Word entity.
type WordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WordMutation
}

// SetText sets the "text" field.
func (wuo *WordUpdateOne) SetText(s string) *WordUpdateOne {
	wuo.mutation.SetText(s)
	return wuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (wuo *WordUpdateOne) SetNillableText(s *string) *WordUpdateOne {
	if s != nil {
		wuo.SetText(*s)
	}
	return wuo
}

// SetNormalized sets the "normalized" field.
func (wuo *WordUpdateOne) SetNormalized(s string) *WordUpdateOne {
	wuo.mutation.SetNormalized(s)
	return wuo
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (wuo *WordUpdateOne) SetNillableNormalized(s *string) *WordUpdateOne {
	if s != nil {
		wuo.SetNormalized(*s)
	}
	return wuo
}

// SetLanguage sets the "language" field.
func (wuo *WordUpdateOne) SetLanguage(s string) *WordUpdateOne {
	wuo.mutation.SetLanguage(s)
	return wuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (wuo *WordUpdateOne) SetNillableLanguage(s *string) *WordUpdateOne {
	if s != nil {
		wuo.SetLanguage(*s)
	}
	return wuo
}

// SetWordType sets the "word_type" field.
func (wuo *WordUpdateOne) SetWordType(s string) *WordUpdateOne {
	wuo.mutation.SetWordType(s)
	return wuo
}

// SetNillableWordType sets the "word_type" field if the given value is not nil.
func (wuo *WordUpdateOne) SetNillableWordType(s *string) *WordUpdateOne {
	if s != nil {
		wuo.SetWordType(*s)
	}
	return wuo
}

// SetLemma sets the "lemma" field.
func (wuo *WordUpdateOne) SetLemma(s string) *WordUpdateOne {
	wuo.mutation.SetLemma(s)
	return wuo
}

// SetNillableLemma sets the "lemma" field if the given value is not nil.
func (wuo *WordUpdateOne) SetNillableLemma(s *string) *WordUpdateOne {
	if s != nil {
		wuo.SetLemma(*s)
	}
	return wuo
}

// ClearLemma clears the value of the "lemma" field.
func (wuo *WordUpdateOne) ClearLemma() *WordUpdateOne {
	wuo.mutation.ClearLemma()
	return wuo
}

// SetPhonetics sets the "phonetics" field.
func (wuo *WordUpdateOne) SetPhonetics(ep []entity.WordPhonetic) *WordUpdateOne {
	wuo.mutation.SetPhonetics(ep)
	return wuo
}

// AppendPhonetics appends ep to the "phonetics" field.
func (wuo *WordUpdateOne) AppendPhonetics(ep []entity.WordPhonetic) *WordUpdateOne {
	wuo.mutation.AppendPhonetics(ep)
	return wuo
}

// SetDefinitions sets the "definitions" field.
func (wuo *WordUpdateOne) SetDefinitions(ed []entity.WordDefinition) *WordUpdateOne {
	wuo.mutation.SetDefinitions(ed)
	return wuo
}

// AppendDefinitions appends ed to the "definitions" field.
func (wuo *WordUpdateOne) AppendDefinitions(ed []entity.WordDefinition) *WordUpdateOne {
	wuo.mutation.AppendDefinitions(ed)
	return wuo
}

// SetPhrases sets the "phrases" field.
func (wuo *WordUpdateOne) SetPhrases(e []entity.Phrase) *WordUpdateOne {
	wuo.mutation.SetPhrases(e)
	return wuo
}

// AppendPhrases appends e to the "phrases" field.
func (wuo *WordUpdateOne) AppendPhrases(e []entity.Phrase) *WordUpdateOne {
	wuo.mutation.AppendPhrases(e)
	return wuo
}

// SetSentences sets the "sentences" field.
func (wuo *WordUpdateOne) SetSentences(e []entity.Sentence) *WordUpdateOne {
	wuo.mutation.SetSentences(e)
	return wuo
}

// AppendSentences appends e to the "sentences" field.
func (wuo *WordUpdateOne) AppendSentences(e []entity.Sentence) *WordUpdateOne {
	wuo.mutation.AppendSentences(e)
	return wuo
}

// SetRelations sets the "relations" field.
func (wuo *WordUpdateOne) SetRelations(er []entity.WordRelation) *WordUpdateOne {
	wuo.mutation.SetRelations(er)
	return wuo
}

// AppendRelations appends er to the "relations" field.
func (wuo *WordUpdateOne) AppendRelations(er []entity.WordRelation) *WordUpdateOne {
	wuo.mutation.AppendRelations(er)
	return wuo
}

// SetCategories sets the "categories" field.
func (wuo *WordUpdateOne) SetCategories(s []string) *WordUpdateOne {
	wuo.mutation.SetCategories(s)
	return wuo
}

// AppendCategories appends s to the "categories" field.
func (wuo *WordUpdateOne) AppendCategories(s []string) *WordUpdateOne {
	wuo.mutation.AppendCategories(s)
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WordUpdateOne) SetUpdatedAt(t time.Time) *WordUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// AddLearnedLexemeIDs adds the "learned_lexemes" edge to the LearnedLexeme entity by IDs.
func (wuo *WordUpdateOne) AddLearnedLexemeIDs(ids ...int) *WordUpdateOne {
	wuo.mutation.AddLearnedLexemeIDs(ids...)
	return wuo
}

// AddLearnedLexemes adds the "learned_lexemes" edges to the LearnedLexeme entity.
func (wuo *WordUpdateOne) AddLearnedLexemes(l ...*LearnedLexeme) *WordUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wuo.AddLearnedLexemeIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (wuo *WordUpdateOne) Mutation() *WordMutation {
	return wuo.mutation
}

// ClearLearnedLexemes clears all "learned_lexemes" edges to the LearnedLexeme entity.
func (wuo *WordUpdateOne) ClearLearnedLexemes() *WordUpdateOne {
	wuo.mutation.ClearLearnedLexemes()
	return wuo
}

// RemoveLearnedLexemeIDs removes the "learned_lexemes" edge to LearnedLexeme entities by IDs.
func (wuo *WordUpdateOne) RemoveLearnedLexemeIDs(ids ...int) *WordUpdateOne {
	wuo.mutation.RemoveLearnedLexemeIDs(ids...)
	return wuo
}

// RemoveLearnedLexemes removes "learned_lexemes" edges to LearnedLexeme entities.
func (wuo *WordUpdateOne) RemoveLearnedLexemes(l ...*LearnedLexeme) *WordUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wuo.RemoveLearnedLexemeIDs(ids...)
}

// Where appends a list predicates to the WordUpdate builder.
func (wuo *WordUpdateOne) Where(ps ...predicate.Word) *WordUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WordUpdateOne) Select(field string, fields ...string) *WordUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Word entity.
func (wuo *WordUpdateOne) Save(ctx context.Context) (*Word, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WordUpdateOne) SaveX(ctx context.Context) *Word {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WordUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WordUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WordUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := word.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WordUpdateOne) check() error {
	if v, ok := wuo.mutation.Text(); ok {
		if err := word.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Word.text": %w`, err)}
		}
	}
	return nil
}

func (wuo *WordUpdateOne) sqlSave(ctx context.Context) (_node *Word, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(word.Table, word.Columns, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Word.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, word.FieldID)
		for _, f := range fields {
			if !word.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != word.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Text(); ok {
		_spec.SetField(word.FieldText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Normalized(); ok {
		_spec.SetField(word.FieldNormalized, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Language(); ok {
		_spec.SetField(word.FieldLanguage, field.TypeString, value)
	}
	if value, ok := wuo.mutation.WordType(); ok {
		_spec.SetField(word.FieldWordType, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Lemma(); ok {
		_spec.SetField(word.FieldLemma, field.TypeString, value)
	}
	if wuo.mutation.LemmaCleared() {
		_spec.ClearField(word.FieldLemma, field.TypeString)
	}
	if value, ok := wuo.mutation.Phonetics(); ok {
		_spec.SetField(word.FieldPhonetics, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedPhonetics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldPhonetics, value)
		})
	}
	if value, ok := wuo.mutation.Definitions(); ok {
		_spec.SetField(word.FieldDefinitions, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedDefinitions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldDefinitions, value)
		})
	}
	if value, ok := wuo.mutation.Phrases(); ok {
		_spec.SetField(word.FieldPhrases, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedPhrases(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldPhrases, value)
		})
	}
	if value, ok := wuo.mutation.Sentences(); ok {
		_spec.SetField(word.FieldSentences, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedSentences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldSentences, value)
		})
	}
	if value, ok := wuo.mutation.Relations(); ok {
		_spec.SetField(word.FieldRelations, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedRelations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldRelations, value)
		})
	}
	if value, ok := wuo.mutation.Categories(); ok {
		_spec.SetField(word.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, word.FieldCategories, value)
		})
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(word.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.LearnedLexemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.LearnedLexemesTable,
			Columns: []string{word.LearnedLexemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedLearnedLexemesIDs(); len(nodes) > 0 && !wuo.mutation.LearnedLexemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.LearnedLexemesTable,
			Columns: []string{word.LearnedLexemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.LearnedLexemesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.LearnedLexemesTable,
			Columns: []string{word.LearnedLexemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learnedlexeme.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Word{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{word.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
