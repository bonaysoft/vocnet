// Code generated by ent, DO NOT EDIT.

package userword

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldUserID, v))
}

// Word applies equality check predicate on the "word" field. It's identical to WordEQ.
func Word(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldWord, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldLanguage, v))
}

// MasteryListen applies equality check predicate on the "mastery_listen" field. It's identical to MasteryListenEQ.
func MasteryListen(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryListen, v))
}

// MasteryRead applies equality check predicate on the "mastery_read" field. It's identical to MasteryReadEQ.
func MasteryRead(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryRead, v))
}

// MasterySpell applies equality check predicate on the "mastery_spell" field. It's identical to MasterySpellEQ.
func MasterySpell(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasterySpell, v))
}

// MasteryPronounce applies equality check predicate on the "mastery_pronounce" field. It's identical to MasteryPronounceEQ.
func MasteryPronounce(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryPronounce, v))
}

// MasteryUse applies equality check predicate on the "mastery_use" field. It's identical to MasteryUseEQ.
func MasteryUse(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryUse, v))
}

// MasteryOverall applies equality check predicate on the "mastery_overall" field. It's identical to MasteryOverallEQ.
func MasteryOverall(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryOverall, v))
}

// ReviewLastReviewAt applies equality check predicate on the "review_last_review_at" field. It's identical to ReviewLastReviewAtEQ.
func ReviewLastReviewAt(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewLastReviewAt, v))
}

// ReviewNextReviewAt applies equality check predicate on the "review_next_review_at" field. It's identical to ReviewNextReviewAtEQ.
func ReviewNextReviewAt(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewNextReviewAt, v))
}

// ReviewIntervalDays applies equality check predicate on the "review_interval_days" field. It's identical to ReviewIntervalDaysEQ.
func ReviewIntervalDays(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewIntervalDays, v))
}

// ReviewFailCount applies equality check predicate on the "review_fail_count" field. It's identical to ReviewFailCountEQ.
func ReviewFailCount(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewFailCount, v))
}

// QueryCount applies equality check predicate on the "query_count" field. It's identical to QueryCountEQ.
func QueryCount(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldQueryCount, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldNotes, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldUserID, v))
}

// WordEQ applies the EQ predicate on the "word" field.
func WordEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldWord, v))
}

// WordNEQ applies the NEQ predicate on the "word" field.
func WordNEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldWord, v))
}

// WordIn applies the In predicate on the "word" field.
func WordIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldWord, vs...))
}

// WordNotIn applies the NotIn predicate on the "word" field.
func WordNotIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldWord, vs...))
}

// WordGT applies the GT predicate on the "word" field.
func WordGT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldWord, v))
}

// WordGTE applies the GTE predicate on the "word" field.
func WordGTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldWord, v))
}

// WordLT applies the LT predicate on the "word" field.
func WordLT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldWord, v))
}

// WordLTE applies the LTE predicate on the "word" field.
func WordLTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldWord, v))
}

// WordContains applies the Contains predicate on the "word" field.
func WordContains(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContains(FieldWord, v))
}

// WordHasPrefix applies the HasPrefix predicate on the "word" field.
func WordHasPrefix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasPrefix(FieldWord, v))
}

// WordHasSuffix applies the HasSuffix predicate on the "word" field.
func WordHasSuffix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasSuffix(FieldWord, v))
}

// WordEqualFold applies the EqualFold predicate on the "word" field.
func WordEqualFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEqualFold(FieldWord, v))
}

// WordContainsFold applies the ContainsFold predicate on the "word" field.
func WordContainsFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContainsFold(FieldWord, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContainsFold(FieldLanguage, v))
}

// MasteryListenEQ applies the EQ predicate on the "mastery_listen" field.
func MasteryListenEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryListen, v))
}

// MasteryListenNEQ applies the NEQ predicate on the "mastery_listen" field.
func MasteryListenNEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldMasteryListen, v))
}

// MasteryListenIn applies the In predicate on the "mastery_listen" field.
func MasteryListenIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldMasteryListen, vs...))
}

// MasteryListenNotIn applies the NotIn predicate on the "mastery_listen" field.
func MasteryListenNotIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldMasteryListen, vs...))
}

// MasteryListenGT applies the GT predicate on the "mastery_listen" field.
func MasteryListenGT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldMasteryListen, v))
}

// MasteryListenGTE applies the GTE predicate on the "mastery_listen" field.
func MasteryListenGTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldMasteryListen, v))
}

// MasteryListenLT applies the LT predicate on the "mastery_listen" field.
func MasteryListenLT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldMasteryListen, v))
}

// MasteryListenLTE applies the LTE predicate on the "mastery_listen" field.
func MasteryListenLTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldMasteryListen, v))
}

// MasteryReadEQ applies the EQ predicate on the "mastery_read" field.
func MasteryReadEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryRead, v))
}

// MasteryReadNEQ applies the NEQ predicate on the "mastery_read" field.
func MasteryReadNEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldMasteryRead, v))
}

// MasteryReadIn applies the In predicate on the "mastery_read" field.
func MasteryReadIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldMasteryRead, vs...))
}

// MasteryReadNotIn applies the NotIn predicate on the "mastery_read" field.
func MasteryReadNotIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldMasteryRead, vs...))
}

// MasteryReadGT applies the GT predicate on the "mastery_read" field.
func MasteryReadGT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldMasteryRead, v))
}

// MasteryReadGTE applies the GTE predicate on the "mastery_read" field.
func MasteryReadGTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldMasteryRead, v))
}

// MasteryReadLT applies the LT predicate on the "mastery_read" field.
func MasteryReadLT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldMasteryRead, v))
}

// MasteryReadLTE applies the LTE predicate on the "mastery_read" field.
func MasteryReadLTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldMasteryRead, v))
}

// MasterySpellEQ applies the EQ predicate on the "mastery_spell" field.
func MasterySpellEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasterySpell, v))
}

// MasterySpellNEQ applies the NEQ predicate on the "mastery_spell" field.
func MasterySpellNEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldMasterySpell, v))
}

// MasterySpellIn applies the In predicate on the "mastery_spell" field.
func MasterySpellIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldMasterySpell, vs...))
}

// MasterySpellNotIn applies the NotIn predicate on the "mastery_spell" field.
func MasterySpellNotIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldMasterySpell, vs...))
}

// MasterySpellGT applies the GT predicate on the "mastery_spell" field.
func MasterySpellGT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldMasterySpell, v))
}

// MasterySpellGTE applies the GTE predicate on the "mastery_spell" field.
func MasterySpellGTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldMasterySpell, v))
}

// MasterySpellLT applies the LT predicate on the "mastery_spell" field.
func MasterySpellLT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldMasterySpell, v))
}

// MasterySpellLTE applies the LTE predicate on the "mastery_spell" field.
func MasterySpellLTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldMasterySpell, v))
}

// MasteryPronounceEQ applies the EQ predicate on the "mastery_pronounce" field.
func MasteryPronounceEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryPronounce, v))
}

// MasteryPronounceNEQ applies the NEQ predicate on the "mastery_pronounce" field.
func MasteryPronounceNEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldMasteryPronounce, v))
}

// MasteryPronounceIn applies the In predicate on the "mastery_pronounce" field.
func MasteryPronounceIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldMasteryPronounce, vs...))
}

// MasteryPronounceNotIn applies the NotIn predicate on the "mastery_pronounce" field.
func MasteryPronounceNotIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldMasteryPronounce, vs...))
}

// MasteryPronounceGT applies the GT predicate on the "mastery_pronounce" field.
func MasteryPronounceGT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldMasteryPronounce, v))
}

// MasteryPronounceGTE applies the GTE predicate on the "mastery_pronounce" field.
func MasteryPronounceGTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldMasteryPronounce, v))
}

// MasteryPronounceLT applies the LT predicate on the "mastery_pronounce" field.
func MasteryPronounceLT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldMasteryPronounce, v))
}

// MasteryPronounceLTE applies the LTE predicate on the "mastery_pronounce" field.
func MasteryPronounceLTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldMasteryPronounce, v))
}

// MasteryUseEQ applies the EQ predicate on the "mastery_use" field.
func MasteryUseEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryUse, v))
}

// MasteryUseNEQ applies the NEQ predicate on the "mastery_use" field.
func MasteryUseNEQ(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldMasteryUse, v))
}

// MasteryUseIn applies the In predicate on the "mastery_use" field.
func MasteryUseIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldMasteryUse, vs...))
}

// MasteryUseNotIn applies the NotIn predicate on the "mastery_use" field.
func MasteryUseNotIn(vs ...int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldMasteryUse, vs...))
}

// MasteryUseGT applies the GT predicate on the "mastery_use" field.
func MasteryUseGT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldMasteryUse, v))
}

// MasteryUseGTE applies the GTE predicate on the "mastery_use" field.
func MasteryUseGTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldMasteryUse, v))
}

// MasteryUseLT applies the LT predicate on the "mastery_use" field.
func MasteryUseLT(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldMasteryUse, v))
}

// MasteryUseLTE applies the LTE predicate on the "mastery_use" field.
func MasteryUseLTE(v int16) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldMasteryUse, v))
}

// MasteryOverallEQ applies the EQ predicate on the "mastery_overall" field.
func MasteryOverallEQ(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldMasteryOverall, v))
}

// MasteryOverallNEQ applies the NEQ predicate on the "mastery_overall" field.
func MasteryOverallNEQ(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldMasteryOverall, v))
}

// MasteryOverallIn applies the In predicate on the "mastery_overall" field.
func MasteryOverallIn(vs ...int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldMasteryOverall, vs...))
}

// MasteryOverallNotIn applies the NotIn predicate on the "mastery_overall" field.
func MasteryOverallNotIn(vs ...int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldMasteryOverall, vs...))
}

// MasteryOverallGT applies the GT predicate on the "mastery_overall" field.
func MasteryOverallGT(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldMasteryOverall, v))
}

// MasteryOverallGTE applies the GTE predicate on the "mastery_overall" field.
func MasteryOverallGTE(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldMasteryOverall, v))
}

// MasteryOverallLT applies the LT predicate on the "mastery_overall" field.
func MasteryOverallLT(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldMasteryOverall, v))
}

// MasteryOverallLTE applies the LTE predicate on the "mastery_overall" field.
func MasteryOverallLTE(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldMasteryOverall, v))
}

// ReviewLastReviewAtEQ applies the EQ predicate on the "review_last_review_at" field.
func ReviewLastReviewAtEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewLastReviewAt, v))
}

// ReviewLastReviewAtNEQ applies the NEQ predicate on the "review_last_review_at" field.
func ReviewLastReviewAtNEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldReviewLastReviewAt, v))
}

// ReviewLastReviewAtIn applies the In predicate on the "review_last_review_at" field.
func ReviewLastReviewAtIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldReviewLastReviewAt, vs...))
}

// ReviewLastReviewAtNotIn applies the NotIn predicate on the "review_last_review_at" field.
func ReviewLastReviewAtNotIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldReviewLastReviewAt, vs...))
}

// ReviewLastReviewAtGT applies the GT predicate on the "review_last_review_at" field.
func ReviewLastReviewAtGT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldReviewLastReviewAt, v))
}

// ReviewLastReviewAtGTE applies the GTE predicate on the "review_last_review_at" field.
func ReviewLastReviewAtGTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldReviewLastReviewAt, v))
}

// ReviewLastReviewAtLT applies the LT predicate on the "review_last_review_at" field.
func ReviewLastReviewAtLT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldReviewLastReviewAt, v))
}

// ReviewLastReviewAtLTE applies the LTE predicate on the "review_last_review_at" field.
func ReviewLastReviewAtLTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldReviewLastReviewAt, v))
}

// ReviewLastReviewAtIsNil applies the IsNil predicate on the "review_last_review_at" field.
func ReviewLastReviewAtIsNil() predicate.UserWord {
	return predicate.UserWord(sql.FieldIsNull(FieldReviewLastReviewAt))
}

// ReviewLastReviewAtNotNil applies the NotNil predicate on the "review_last_review_at" field.
func ReviewLastReviewAtNotNil() predicate.UserWord {
	return predicate.UserWord(sql.FieldNotNull(FieldReviewLastReviewAt))
}

// ReviewNextReviewAtEQ applies the EQ predicate on the "review_next_review_at" field.
func ReviewNextReviewAtEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewNextReviewAt, v))
}

// ReviewNextReviewAtNEQ applies the NEQ predicate on the "review_next_review_at" field.
func ReviewNextReviewAtNEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldReviewNextReviewAt, v))
}

// ReviewNextReviewAtIn applies the In predicate on the "review_next_review_at" field.
func ReviewNextReviewAtIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldReviewNextReviewAt, vs...))
}

// ReviewNextReviewAtNotIn applies the NotIn predicate on the "review_next_review_at" field.
func ReviewNextReviewAtNotIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldReviewNextReviewAt, vs...))
}

// ReviewNextReviewAtGT applies the GT predicate on the "review_next_review_at" field.
func ReviewNextReviewAtGT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldReviewNextReviewAt, v))
}

// ReviewNextReviewAtGTE applies the GTE predicate on the "review_next_review_at" field.
func ReviewNextReviewAtGTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldReviewNextReviewAt, v))
}

// ReviewNextReviewAtLT applies the LT predicate on the "review_next_review_at" field.
func ReviewNextReviewAtLT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldReviewNextReviewAt, v))
}

// ReviewNextReviewAtLTE applies the LTE predicate on the "review_next_review_at" field.
func ReviewNextReviewAtLTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldReviewNextReviewAt, v))
}

// ReviewNextReviewAtIsNil applies the IsNil predicate on the "review_next_review_at" field.
func ReviewNextReviewAtIsNil() predicate.UserWord {
	return predicate.UserWord(sql.FieldIsNull(FieldReviewNextReviewAt))
}

// ReviewNextReviewAtNotNil applies the NotNil predicate on the "review_next_review_at" field.
func ReviewNextReviewAtNotNil() predicate.UserWord {
	return predicate.UserWord(sql.FieldNotNull(FieldReviewNextReviewAt))
}

// ReviewIntervalDaysEQ applies the EQ predicate on the "review_interval_days" field.
func ReviewIntervalDaysEQ(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewIntervalDays, v))
}

// ReviewIntervalDaysNEQ applies the NEQ predicate on the "review_interval_days" field.
func ReviewIntervalDaysNEQ(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldReviewIntervalDays, v))
}

// ReviewIntervalDaysIn applies the In predicate on the "review_interval_days" field.
func ReviewIntervalDaysIn(vs ...int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldReviewIntervalDays, vs...))
}

// ReviewIntervalDaysNotIn applies the NotIn predicate on the "review_interval_days" field.
func ReviewIntervalDaysNotIn(vs ...int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldReviewIntervalDays, vs...))
}

// ReviewIntervalDaysGT applies the GT predicate on the "review_interval_days" field.
func ReviewIntervalDaysGT(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldReviewIntervalDays, v))
}

// ReviewIntervalDaysGTE applies the GTE predicate on the "review_interval_days" field.
func ReviewIntervalDaysGTE(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldReviewIntervalDays, v))
}

// ReviewIntervalDaysLT applies the LT predicate on the "review_interval_days" field.
func ReviewIntervalDaysLT(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldReviewIntervalDays, v))
}

// ReviewIntervalDaysLTE applies the LTE predicate on the "review_interval_days" field.
func ReviewIntervalDaysLTE(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldReviewIntervalDays, v))
}

// ReviewFailCountEQ applies the EQ predicate on the "review_fail_count" field.
func ReviewFailCountEQ(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldReviewFailCount, v))
}

// ReviewFailCountNEQ applies the NEQ predicate on the "review_fail_count" field.
func ReviewFailCountNEQ(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldReviewFailCount, v))
}

// ReviewFailCountIn applies the In predicate on the "review_fail_count" field.
func ReviewFailCountIn(vs ...int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldReviewFailCount, vs...))
}

// ReviewFailCountNotIn applies the NotIn predicate on the "review_fail_count" field.
func ReviewFailCountNotIn(vs ...int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldReviewFailCount, vs...))
}

// ReviewFailCountGT applies the GT predicate on the "review_fail_count" field.
func ReviewFailCountGT(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldReviewFailCount, v))
}

// ReviewFailCountGTE applies the GTE predicate on the "review_fail_count" field.
func ReviewFailCountGTE(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldReviewFailCount, v))
}

// ReviewFailCountLT applies the LT predicate on the "review_fail_count" field.
func ReviewFailCountLT(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldReviewFailCount, v))
}

// ReviewFailCountLTE applies the LTE predicate on the "review_fail_count" field.
func ReviewFailCountLTE(v int32) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldReviewFailCount, v))
}

// QueryCountEQ applies the EQ predicate on the "query_count" field.
func QueryCountEQ(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldQueryCount, v))
}

// QueryCountNEQ applies the NEQ predicate on the "query_count" field.
func QueryCountNEQ(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldQueryCount, v))
}

// QueryCountIn applies the In predicate on the "query_count" field.
func QueryCountIn(vs ...int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldQueryCount, vs...))
}

// QueryCountNotIn applies the NotIn predicate on the "query_count" field.
func QueryCountNotIn(vs ...int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldQueryCount, vs...))
}

// QueryCountGT applies the GT predicate on the "query_count" field.
func QueryCountGT(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldQueryCount, v))
}

// QueryCountGTE applies the GTE predicate on the "query_count" field.
func QueryCountGTE(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldQueryCount, v))
}

// QueryCountLT applies the LT predicate on the "query_count" field.
func QueryCountLT(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldQueryCount, v))
}

// QueryCountLTE applies the LTE predicate on the "query_count" field.
func QueryCountLTE(v int64) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldQueryCount, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.UserWord {
	return predicate.UserWord(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.UserWord {
	return predicate.UserWord(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContainsFold(FieldNotes, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.UserWord {
	return predicate.UserWord(sql.FieldContainsFold(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserWord {
	return predicate.UserWord(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserWord) predicate.UserWord {
	return predicate.UserWord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserWord) predicate.UserWord {
	return predicate.UserWord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserWord) predicate.UserWord {
	return predicate.UserWord(sql.NotPredicates(p))
}
