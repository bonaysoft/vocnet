// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/word"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/types"
)

// Word is the model entity for the Word schema.
type Word struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// WordType holds the value of the "word_type" field.
	WordType string `json:"word_type,omitempty"`
	// Lemma holds the value of the "lemma" field.
	Lemma *string `json:"lemma,omitempty"`
	// Phonetics holds the value of the "phonetics" field.
	Phonetics types.WordPhonetics `json:"phonetics,omitempty"`
	// Meanings holds the value of the "meanings" field.
	Meanings types.WordMeanings `json:"meanings,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Phrases holds the value of the "phrases" field.
	Phrases types.Phrases `json:"phrases,omitempty"`
	// Sentences holds the value of the "sentences" field.
	Sentences types.Sentences `json:"sentences,omitempty"`
	// Relations holds the value of the "relations" field.
	Relations types.WordRelations `json:"relations,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Word) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case word.FieldPhonetics, word.FieldMeanings, word.FieldTags, word.FieldPhrases, word.FieldSentences, word.FieldRelations:
			values[i] = new([]byte)
		case word.FieldID:
			values[i] = new(sql.NullInt64)
		case word.FieldText, word.FieldLanguage, word.FieldWordType, word.FieldLemma:
			values[i] = new(sql.NullString)
		case word.FieldCreatedAt, word.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Word fields.
func (w *Word) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case word.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case word.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				w.Text = value.String
			}
		case word.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				w.Language = value.String
			}
		case word.FieldWordType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word_type", values[i])
			} else if value.Valid {
				w.WordType = value.String
			}
		case word.FieldLemma:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lemma", values[i])
			} else if value.Valid {
				w.Lemma = new(string)
				*w.Lemma = value.String
			}
		case word.FieldPhonetics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field phonetics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Phonetics); err != nil {
					return fmt.Errorf("unmarshal field phonetics: %w", err)
				}
			}
		case word.FieldMeanings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meanings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Meanings); err != nil {
					return fmt.Errorf("unmarshal field meanings: %w", err)
				}
			}
		case word.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case word.FieldPhrases:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field phrases", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Phrases); err != nil {
					return fmt.Errorf("unmarshal field phrases: %w", err)
				}
			}
		case word.FieldSentences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sentences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Sentences); err != nil {
					return fmt.Errorf("unmarshal field sentences: %w", err)
				}
			}
		case word.FieldRelations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field relations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Relations); err != nil {
					return fmt.Errorf("unmarshal field relations: %w", err)
				}
			}
		case word.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case word.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Word.
// This includes values selected through modifiers, order, etc.
func (w *Word) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Word.
// Note that you need to call Word.Unwrap() before calling this method if this Word
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Word) Update() *WordUpdateOne {
	return NewWordClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Word entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Word) Unwrap() *Word {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Word is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Word) String() string {
	var builder strings.Builder
	builder.WriteString("Word(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("text=")
	builder.WriteString(w.Text)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(w.Language)
	builder.WriteString(", ")
	builder.WriteString("word_type=")
	builder.WriteString(w.WordType)
	builder.WriteString(", ")
	if v := w.Lemma; v != nil {
		builder.WriteString("lemma=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("phonetics=")
	builder.WriteString(fmt.Sprintf("%v", w.Phonetics))
	builder.WriteString(", ")
	builder.WriteString("meanings=")
	builder.WriteString(fmt.Sprintf("%v", w.Meanings))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", w.Tags))
	builder.WriteString(", ")
	builder.WriteString("phrases=")
	builder.WriteString(fmt.Sprintf("%v", w.Phrases))
	builder.WriteString(", ")
	builder.WriteString("sentences=")
	builder.WriteString(fmt.Sprintf("%v", w.Sentences))
	builder.WriteString(", ")
	builder.WriteString("relations=")
	builder.WriteString(fmt.Sprintf("%v", w.Relations))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Words is a parsable slice of Word.
type Words []*Word
