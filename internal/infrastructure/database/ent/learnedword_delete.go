// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedword"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/predicate"
)

// LearnedWordDelete is the builder for deleting a LearnedWord entity.
type LearnedWordDelete struct {
	config
	hooks    []Hook
	mutation *LearnedWordMutation
}

// Where appends a list predicates to the LearnedWordDelete builder.
func (lwd *LearnedWordDelete) Where(ps ...predicate.LearnedWord) *LearnedWordDelete {
	lwd.mutation.Where(ps...)
	return lwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lwd *LearnedWordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lwd.sqlExec, lwd.mutation, lwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lwd *LearnedWordDelete) ExecX(ctx context.Context) int {
	n, err := lwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lwd *LearnedWordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(learnedword.Table, sqlgraph.NewFieldSpec(learnedword.FieldID, field.TypeInt))
	if ps := lwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lwd.mutation.done = true
	return affected, err
}

// LearnedWordDeleteOne is the builder for deleting a single LearnedWord entity.
type LearnedWordDeleteOne struct {
	lwd *LearnedWordDelete
}

// Where appends a list predicates to the LearnedWordDelete builder.
func (lwdo *LearnedWordDeleteOne) Where(ps ...predicate.LearnedWord) *LearnedWordDeleteOne {
	lwdo.lwd.mutation.Where(ps...)
	return lwdo
}

// Exec executes the deletion query.
func (lwdo *LearnedWordDeleteOne) Exec(ctx context.Context) error {
	n, err := lwdo.lwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{learnedword.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lwdo *LearnedWordDeleteOne) ExecX(ctx context.Context) {
	if err := lwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
