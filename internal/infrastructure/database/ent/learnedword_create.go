// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedword"
)

// LearnedWordCreate is the builder for creating a LearnedWord entity.
type LearnedWordCreate struct {
	config
	mutation *LearnedWordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (lwc *LearnedWordCreate) SetUserID(i int64) *LearnedWordCreate {
	lwc.mutation.SetUserID(i)
	return lwc
}

// SetTerm sets the "term" field.
func (lwc *LearnedWordCreate) SetTerm(s string) *LearnedWordCreate {
	lwc.mutation.SetTerm(s)
	return lwc
}

// SetNormalized sets the "normalized" field.
func (lwc *LearnedWordCreate) SetNormalized(s string) *LearnedWordCreate {
	lwc.mutation.SetNormalized(s)
	return lwc
}

// SetNillableNormalized sets the "normalized" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableNormalized(s *string) *LearnedWordCreate {
	if s != nil {
		lwc.SetNormalized(*s)
	}
	return lwc
}

// SetLanguage sets the "language" field.
func (lwc *LearnedWordCreate) SetLanguage(s string) *LearnedWordCreate {
	lwc.mutation.SetLanguage(s)
	return lwc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableLanguage(s *string) *LearnedWordCreate {
	if s != nil {
		lwc.SetLanguage(*s)
	}
	return lwc
}

// SetMasteryListen sets the "mastery_listen" field.
func (lwc *LearnedWordCreate) SetMasteryListen(i int16) *LearnedWordCreate {
	lwc.mutation.SetMasteryListen(i)
	return lwc
}

// SetNillableMasteryListen sets the "mastery_listen" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableMasteryListen(i *int16) *LearnedWordCreate {
	if i != nil {
		lwc.SetMasteryListen(*i)
	}
	return lwc
}

// SetMasteryRead sets the "mastery_read" field.
func (lwc *LearnedWordCreate) SetMasteryRead(i int16) *LearnedWordCreate {
	lwc.mutation.SetMasteryRead(i)
	return lwc
}

// SetNillableMasteryRead sets the "mastery_read" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableMasteryRead(i *int16) *LearnedWordCreate {
	if i != nil {
		lwc.SetMasteryRead(*i)
	}
	return lwc
}

// SetMasterySpell sets the "mastery_spell" field.
func (lwc *LearnedWordCreate) SetMasterySpell(i int16) *LearnedWordCreate {
	lwc.mutation.SetMasterySpell(i)
	return lwc
}

// SetNillableMasterySpell sets the "mastery_spell" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableMasterySpell(i *int16) *LearnedWordCreate {
	if i != nil {
		lwc.SetMasterySpell(*i)
	}
	return lwc
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (lwc *LearnedWordCreate) SetMasteryPronounce(i int16) *LearnedWordCreate {
	lwc.mutation.SetMasteryPronounce(i)
	return lwc
}

// SetNillableMasteryPronounce sets the "mastery_pronounce" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableMasteryPronounce(i *int16) *LearnedWordCreate {
	if i != nil {
		lwc.SetMasteryPronounce(*i)
	}
	return lwc
}

// SetMasteryUse sets the "mastery_use" field.
func (lwc *LearnedWordCreate) SetMasteryUse(i int16) *LearnedWordCreate {
	lwc.mutation.SetMasteryUse(i)
	return lwc
}

// SetNillableMasteryUse sets the "mastery_use" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableMasteryUse(i *int16) *LearnedWordCreate {
	if i != nil {
		lwc.SetMasteryUse(*i)
	}
	return lwc
}

// SetMasteryOverall sets the "mastery_overall" field.
func (lwc *LearnedWordCreate) SetMasteryOverall(i int32) *LearnedWordCreate {
	lwc.mutation.SetMasteryOverall(i)
	return lwc
}

// SetNillableMasteryOverall sets the "mastery_overall" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableMasteryOverall(i *int32) *LearnedWordCreate {
	if i != nil {
		lwc.SetMasteryOverall(*i)
	}
	return lwc
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (lwc *LearnedWordCreate) SetReviewLastReviewAt(t time.Time) *LearnedWordCreate {
	lwc.mutation.SetReviewLastReviewAt(t)
	return lwc
}

// SetNillableReviewLastReviewAt sets the "review_last_review_at" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableReviewLastReviewAt(t *time.Time) *LearnedWordCreate {
	if t != nil {
		lwc.SetReviewLastReviewAt(*t)
	}
	return lwc
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (lwc *LearnedWordCreate) SetReviewNextReviewAt(t time.Time) *LearnedWordCreate {
	lwc.mutation.SetReviewNextReviewAt(t)
	return lwc
}

// SetNillableReviewNextReviewAt sets the "review_next_review_at" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableReviewNextReviewAt(t *time.Time) *LearnedWordCreate {
	if t != nil {
		lwc.SetReviewNextReviewAt(*t)
	}
	return lwc
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (lwc *LearnedWordCreate) SetReviewIntervalDays(i int32) *LearnedWordCreate {
	lwc.mutation.SetReviewIntervalDays(i)
	return lwc
}

// SetNillableReviewIntervalDays sets the "review_interval_days" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableReviewIntervalDays(i *int32) *LearnedWordCreate {
	if i != nil {
		lwc.SetReviewIntervalDays(*i)
	}
	return lwc
}

// SetReviewFailCount sets the "review_fail_count" field.
func (lwc *LearnedWordCreate) SetReviewFailCount(i int32) *LearnedWordCreate {
	lwc.mutation.SetReviewFailCount(i)
	return lwc
}

// SetNillableReviewFailCount sets the "review_fail_count" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableReviewFailCount(i *int32) *LearnedWordCreate {
	if i != nil {
		lwc.SetReviewFailCount(*i)
	}
	return lwc
}

// SetQueryCount sets the "query_count" field.
func (lwc *LearnedWordCreate) SetQueryCount(i int64) *LearnedWordCreate {
	lwc.mutation.SetQueryCount(i)
	return lwc
}

// SetNillableQueryCount sets the "query_count" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableQueryCount(i *int64) *LearnedWordCreate {
	if i != nil {
		lwc.SetQueryCount(*i)
	}
	return lwc
}

// SetNotes sets the "notes" field.
func (lwc *LearnedWordCreate) SetNotes(s string) *LearnedWordCreate {
	lwc.mutation.SetNotes(s)
	return lwc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableNotes(s *string) *LearnedWordCreate {
	if s != nil {
		lwc.SetNotes(*s)
	}
	return lwc
}

// SetSentences sets the "sentences" field.
func (lwc *LearnedWordCreate) SetSentences(e []entity.Sentence) *LearnedWordCreate {
	lwc.mutation.SetSentences(e)
	return lwc
}

// SetRelations sets the "relations" field.
func (lwc *LearnedWordCreate) SetRelations(ewr []entity.LearnedWordRelation) *LearnedWordCreate {
	lwc.mutation.SetRelations(ewr)
	return lwc
}

// SetCreatedBy sets the "created_by" field.
func (lwc *LearnedWordCreate) SetCreatedBy(s string) *LearnedWordCreate {
	lwc.mutation.SetCreatedBy(s)
	return lwc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableCreatedBy(s *string) *LearnedWordCreate {
	if s != nil {
		lwc.SetCreatedBy(*s)
	}
	return lwc
}

// SetCreatedAt sets the "created_at" field.
func (lwc *LearnedWordCreate) SetCreatedAt(t time.Time) *LearnedWordCreate {
	lwc.mutation.SetCreatedAt(t)
	return lwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableCreatedAt(t *time.Time) *LearnedWordCreate {
	if t != nil {
		lwc.SetCreatedAt(*t)
	}
	return lwc
}

// SetUpdatedAt sets the "updated_at" field.
func (lwc *LearnedWordCreate) SetUpdatedAt(t time.Time) *LearnedWordCreate {
	lwc.mutation.SetUpdatedAt(t)
	return lwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lwc *LearnedWordCreate) SetNillableUpdatedAt(t *time.Time) *LearnedWordCreate {
	if t != nil {
		lwc.SetUpdatedAt(*t)
	}
	return lwc
}

// Mutation returns the LearnedWordMutation object of the builder.
func (lwc *LearnedWordCreate) Mutation() *LearnedWordMutation {
	return lwc.mutation
}

// Save creates the LearnedWord in the database.
func (lwc *LearnedWordCreate) Save(ctx context.Context) (*LearnedWord, error) {
	lwc.defaults()
	return withHooks(ctx, lwc.sqlSave, lwc.mutation, lwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lwc *LearnedWordCreate) SaveX(ctx context.Context) *LearnedWord {
	v, err := lwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lwc *LearnedWordCreate) Exec(ctx context.Context) error {
	_, err := lwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lwc *LearnedWordCreate) ExecX(ctx context.Context) {
	if err := lwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lwc *LearnedWordCreate) defaults() {
	if _, ok := lwc.mutation.Normalized(); !ok {
		v := learnedword.DefaultNormalized
		lwc.mutation.SetNormalized(v)
	}
	if _, ok := lwc.mutation.Language(); !ok {
		v := learnedword.DefaultLanguage
		lwc.mutation.SetLanguage(v)
	}
	if _, ok := lwc.mutation.MasteryListen(); !ok {
		v := learnedword.DefaultMasteryListen
		lwc.mutation.SetMasteryListen(v)
	}
	if _, ok := lwc.mutation.MasteryRead(); !ok {
		v := learnedword.DefaultMasteryRead
		lwc.mutation.SetMasteryRead(v)
	}
	if _, ok := lwc.mutation.MasterySpell(); !ok {
		v := learnedword.DefaultMasterySpell
		lwc.mutation.SetMasterySpell(v)
	}
	if _, ok := lwc.mutation.MasteryPronounce(); !ok {
		v := learnedword.DefaultMasteryPronounce
		lwc.mutation.SetMasteryPronounce(v)
	}
	if _, ok := lwc.mutation.MasteryUse(); !ok {
		v := learnedword.DefaultMasteryUse
		lwc.mutation.SetMasteryUse(v)
	}
	if _, ok := lwc.mutation.MasteryOverall(); !ok {
		v := learnedword.DefaultMasteryOverall
		lwc.mutation.SetMasteryOverall(v)
	}
	if _, ok := lwc.mutation.ReviewIntervalDays(); !ok {
		v := learnedword.DefaultReviewIntervalDays
		lwc.mutation.SetReviewIntervalDays(v)
	}
	if _, ok := lwc.mutation.ReviewFailCount(); !ok {
		v := learnedword.DefaultReviewFailCount
		lwc.mutation.SetReviewFailCount(v)
	}
	if _, ok := lwc.mutation.QueryCount(); !ok {
		v := learnedword.DefaultQueryCount
		lwc.mutation.SetQueryCount(v)
	}
	if _, ok := lwc.mutation.Sentences(); !ok {
		v := learnedword.DefaultSentences
		lwc.mutation.SetSentences(v)
	}
	if _, ok := lwc.mutation.Relations(); !ok {
		v := learnedword.DefaultRelations
		lwc.mutation.SetRelations(v)
	}
	if _, ok := lwc.mutation.CreatedBy(); !ok {
		v := learnedword.DefaultCreatedBy
		lwc.mutation.SetCreatedBy(v)
	}
	if _, ok := lwc.mutation.CreatedAt(); !ok {
		v := learnedword.DefaultCreatedAt()
		lwc.mutation.SetCreatedAt(v)
	}
	if _, ok := lwc.mutation.UpdatedAt(); !ok {
		v := learnedword.DefaultUpdatedAt()
		lwc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lwc *LearnedWordCreate) check() error {
	if _, ok := lwc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LearnedWord.user_id"`)}
	}
	if _, ok := lwc.mutation.Term(); !ok {
		return &ValidationError{Name: "term", err: errors.New(`ent: missing required field "LearnedWord.term"`)}
	}
	if v, ok := lwc.mutation.Term(); ok {
		if err := learnedword.TermValidator(v); err != nil {
			return &ValidationError{Name: "term", err: fmt.Errorf(`ent: validator failed for field "LearnedWord.term": %w`, err)}
		}
	}
	if _, ok := lwc.mutation.Normalized(); !ok {
		return &ValidationError{Name: "normalized", err: errors.New(`ent: missing required field "LearnedWord.normalized"`)}
	}
	if _, ok := lwc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "LearnedWord.language"`)}
	}
	if _, ok := lwc.mutation.MasteryListen(); !ok {
		return &ValidationError{Name: "mastery_listen", err: errors.New(`ent: missing required field "LearnedWord.mastery_listen"`)}
	}
	if _, ok := lwc.mutation.MasteryRead(); !ok {
		return &ValidationError{Name: "mastery_read", err: errors.New(`ent: missing required field "LearnedWord.mastery_read"`)}
	}
	if _, ok := lwc.mutation.MasterySpell(); !ok {
		return &ValidationError{Name: "mastery_spell", err: errors.New(`ent: missing required field "LearnedWord.mastery_spell"`)}
	}
	if _, ok := lwc.mutation.MasteryPronounce(); !ok {
		return &ValidationError{Name: "mastery_pronounce", err: errors.New(`ent: missing required field "LearnedWord.mastery_pronounce"`)}
	}
	if _, ok := lwc.mutation.MasteryUse(); !ok {
		return &ValidationError{Name: "mastery_use", err: errors.New(`ent: missing required field "LearnedWord.mastery_use"`)}
	}
	if _, ok := lwc.mutation.MasteryOverall(); !ok {
		return &ValidationError{Name: "mastery_overall", err: errors.New(`ent: missing required field "LearnedWord.mastery_overall"`)}
	}
	if _, ok := lwc.mutation.ReviewIntervalDays(); !ok {
		return &ValidationError{Name: "review_interval_days", err: errors.New(`ent: missing required field "LearnedWord.review_interval_days"`)}
	}
	if _, ok := lwc.mutation.ReviewFailCount(); !ok {
		return &ValidationError{Name: "review_fail_count", err: errors.New(`ent: missing required field "LearnedWord.review_fail_count"`)}
	}
	if _, ok := lwc.mutation.QueryCount(); !ok {
		return &ValidationError{Name: "query_count", err: errors.New(`ent: missing required field "LearnedWord.query_count"`)}
	}
	if _, ok := lwc.mutation.Sentences(); !ok {
		return &ValidationError{Name: "sentences", err: errors.New(`ent: missing required field "LearnedWord.sentences"`)}
	}
	if _, ok := lwc.mutation.Relations(); !ok {
		return &ValidationError{Name: "relations", err: errors.New(`ent: missing required field "LearnedWord.relations"`)}
	}
	if _, ok := lwc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "LearnedWord.created_by"`)}
	}
	if _, ok := lwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LearnedWord.created_at"`)}
	}
	if _, ok := lwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LearnedWord.updated_at"`)}
	}
	return nil
}

func (lwc *LearnedWordCreate) sqlSave(ctx context.Context) (*LearnedWord, error) {
	if err := lwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lwc.mutation.id = &_node.ID
	lwc.mutation.done = true
	return _node, nil
}

func (lwc *LearnedWordCreate) createSpec() (*LearnedWord, *sqlgraph.CreateSpec) {
	var (
		_node = &LearnedWord{config: lwc.config}
		_spec = sqlgraph.NewCreateSpec(learnedword.Table, sqlgraph.NewFieldSpec(learnedword.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lwc.conflict
	if value, ok := lwc.mutation.UserID(); ok {
		_spec.SetField(learnedword.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := lwc.mutation.Term(); ok {
		_spec.SetField(learnedword.FieldTerm, field.TypeString, value)
		_node.Term = value
	}
	if value, ok := lwc.mutation.Normalized(); ok {
		_spec.SetField(learnedword.FieldNormalized, field.TypeString, value)
		_node.Normalized = value
	}
	if value, ok := lwc.mutation.Language(); ok {
		_spec.SetField(learnedword.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := lwc.mutation.MasteryListen(); ok {
		_spec.SetField(learnedword.FieldMasteryListen, field.TypeInt16, value)
		_node.MasteryListen = value
	}
	if value, ok := lwc.mutation.MasteryRead(); ok {
		_spec.SetField(learnedword.FieldMasteryRead, field.TypeInt16, value)
		_node.MasteryRead = value
	}
	if value, ok := lwc.mutation.MasterySpell(); ok {
		_spec.SetField(learnedword.FieldMasterySpell, field.TypeInt16, value)
		_node.MasterySpell = value
	}
	if value, ok := lwc.mutation.MasteryPronounce(); ok {
		_spec.SetField(learnedword.FieldMasteryPronounce, field.TypeInt16, value)
		_node.MasteryPronounce = value
	}
	if value, ok := lwc.mutation.MasteryUse(); ok {
		_spec.SetField(learnedword.FieldMasteryUse, field.TypeInt16, value)
		_node.MasteryUse = value
	}
	if value, ok := lwc.mutation.MasteryOverall(); ok {
		_spec.SetField(learnedword.FieldMasteryOverall, field.TypeInt32, value)
		_node.MasteryOverall = value
	}
	if value, ok := lwc.mutation.ReviewLastReviewAt(); ok {
		_spec.SetField(learnedword.FieldReviewLastReviewAt, field.TypeTime, value)
		_node.ReviewLastReviewAt = &value
	}
	if value, ok := lwc.mutation.ReviewNextReviewAt(); ok {
		_spec.SetField(learnedword.FieldReviewNextReviewAt, field.TypeTime, value)
		_node.ReviewNextReviewAt = &value
	}
	if value, ok := lwc.mutation.ReviewIntervalDays(); ok {
		_spec.SetField(learnedword.FieldReviewIntervalDays, field.TypeInt32, value)
		_node.ReviewIntervalDays = value
	}
	if value, ok := lwc.mutation.ReviewFailCount(); ok {
		_spec.SetField(learnedword.FieldReviewFailCount, field.TypeInt32, value)
		_node.ReviewFailCount = value
	}
	if value, ok := lwc.mutation.QueryCount(); ok {
		_spec.SetField(learnedword.FieldQueryCount, field.TypeInt64, value)
		_node.QueryCount = value
	}
	if value, ok := lwc.mutation.Notes(); ok {
		_spec.SetField(learnedword.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := lwc.mutation.Sentences(); ok {
		_spec.SetField(learnedword.FieldSentences, field.TypeJSON, value)
		_node.Sentences = value
	}
	if value, ok := lwc.mutation.Relations(); ok {
		_spec.SetField(learnedword.FieldRelations, field.TypeJSON, value)
		_node.Relations = value
	}
	if value, ok := lwc.mutation.CreatedBy(); ok {
		_spec.SetField(learnedword.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := lwc.mutation.CreatedAt(); ok {
		_spec.SetField(learnedword.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lwc.mutation.UpdatedAt(); ok {
		_spec.SetField(learnedword.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LearnedWord.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LearnedWordUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (lwc *LearnedWordCreate) OnConflict(opts ...sql.ConflictOption) *LearnedWordUpsertOne {
	lwc.conflict = opts
	return &LearnedWordUpsertOne{
		create: lwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LearnedWord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lwc *LearnedWordCreate) OnConflictColumns(columns ...string) *LearnedWordUpsertOne {
	lwc.conflict = append(lwc.conflict, sql.ConflictColumns(columns...))
	return &LearnedWordUpsertOne{
		create: lwc,
	}
}

type (
	// LearnedWordUpsertOne is the builder for "upsert"-ing
	//  one LearnedWord node.
	LearnedWordUpsertOne struct {
		create *LearnedWordCreate
	}

	// LearnedWordUpsert is the "OnConflict" setter.
	LearnedWordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *LearnedWordUpsert) SetUserID(v int64) *LearnedWordUpsert {
	u.Set(learnedword.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateUserID() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *LearnedWordUpsert) AddUserID(v int64) *LearnedWordUpsert {
	u.Add(learnedword.FieldUserID, v)
	return u
}

// SetTerm sets the "term" field.
func (u *LearnedWordUpsert) SetTerm(v string) *LearnedWordUpsert {
	u.Set(learnedword.FieldTerm, v)
	return u
}

// UpdateTerm sets the "term" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateTerm() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldTerm)
	return u
}

// SetNormalized sets the "normalized" field.
func (u *LearnedWordUpsert) SetNormalized(v string) *LearnedWordUpsert {
	u.Set(learnedword.FieldNormalized, v)
	return u
}

// UpdateNormalized sets the "normalized" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateNormalized() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldNormalized)
	return u
}

// SetLanguage sets the "language" field.
func (u *LearnedWordUpsert) SetLanguage(v string) *LearnedWordUpsert {
	u.Set(learnedword.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateLanguage() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldLanguage)
	return u
}

// SetMasteryListen sets the "mastery_listen" field.
func (u *LearnedWordUpsert) SetMasteryListen(v int16) *LearnedWordUpsert {
	u.Set(learnedword.FieldMasteryListen, v)
	return u
}

// UpdateMasteryListen sets the "mastery_listen" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateMasteryListen() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldMasteryListen)
	return u
}

// AddMasteryListen adds v to the "mastery_listen" field.
func (u *LearnedWordUpsert) AddMasteryListen(v int16) *LearnedWordUpsert {
	u.Add(learnedword.FieldMasteryListen, v)
	return u
}

// SetMasteryRead sets the "mastery_read" field.
func (u *LearnedWordUpsert) SetMasteryRead(v int16) *LearnedWordUpsert {
	u.Set(learnedword.FieldMasteryRead, v)
	return u
}

// UpdateMasteryRead sets the "mastery_read" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateMasteryRead() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldMasteryRead)
	return u
}

// AddMasteryRead adds v to the "mastery_read" field.
func (u *LearnedWordUpsert) AddMasteryRead(v int16) *LearnedWordUpsert {
	u.Add(learnedword.FieldMasteryRead, v)
	return u
}

// SetMasterySpell sets the "mastery_spell" field.
func (u *LearnedWordUpsert) SetMasterySpell(v int16) *LearnedWordUpsert {
	u.Set(learnedword.FieldMasterySpell, v)
	return u
}

// UpdateMasterySpell sets the "mastery_spell" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateMasterySpell() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldMasterySpell)
	return u
}

// AddMasterySpell adds v to the "mastery_spell" field.
func (u *LearnedWordUpsert) AddMasterySpell(v int16) *LearnedWordUpsert {
	u.Add(learnedword.FieldMasterySpell, v)
	return u
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (u *LearnedWordUpsert) SetMasteryPronounce(v int16) *LearnedWordUpsert {
	u.Set(learnedword.FieldMasteryPronounce, v)
	return u
}

// UpdateMasteryPronounce sets the "mastery_pronounce" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateMasteryPronounce() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldMasteryPronounce)
	return u
}

// AddMasteryPronounce adds v to the "mastery_pronounce" field.
func (u *LearnedWordUpsert) AddMasteryPronounce(v int16) *LearnedWordUpsert {
	u.Add(learnedword.FieldMasteryPronounce, v)
	return u
}

// SetMasteryUse sets the "mastery_use" field.
func (u *LearnedWordUpsert) SetMasteryUse(v int16) *LearnedWordUpsert {
	u.Set(learnedword.FieldMasteryUse, v)
	return u
}

// UpdateMasteryUse sets the "mastery_use" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateMasteryUse() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldMasteryUse)
	return u
}

// AddMasteryUse adds v to the "mastery_use" field.
func (u *LearnedWordUpsert) AddMasteryUse(v int16) *LearnedWordUpsert {
	u.Add(learnedword.FieldMasteryUse, v)
	return u
}

// SetMasteryOverall sets the "mastery_overall" field.
func (u *LearnedWordUpsert) SetMasteryOverall(v int32) *LearnedWordUpsert {
	u.Set(learnedword.FieldMasteryOverall, v)
	return u
}

// UpdateMasteryOverall sets the "mastery_overall" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateMasteryOverall() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldMasteryOverall)
	return u
}

// AddMasteryOverall adds v to the "mastery_overall" field.
func (u *LearnedWordUpsert) AddMasteryOverall(v int32) *LearnedWordUpsert {
	u.Add(learnedword.FieldMasteryOverall, v)
	return u
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (u *LearnedWordUpsert) SetReviewLastReviewAt(v time.Time) *LearnedWordUpsert {
	u.Set(learnedword.FieldReviewLastReviewAt, v)
	return u
}

// UpdateReviewLastReviewAt sets the "review_last_review_at" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateReviewLastReviewAt() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldReviewLastReviewAt)
	return u
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (u *LearnedWordUpsert) ClearReviewLastReviewAt() *LearnedWordUpsert {
	u.SetNull(learnedword.FieldReviewLastReviewAt)
	return u
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (u *LearnedWordUpsert) SetReviewNextReviewAt(v time.Time) *LearnedWordUpsert {
	u.Set(learnedword.FieldReviewNextReviewAt, v)
	return u
}

// UpdateReviewNextReviewAt sets the "review_next_review_at" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateReviewNextReviewAt() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldReviewNextReviewAt)
	return u
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (u *LearnedWordUpsert) ClearReviewNextReviewAt() *LearnedWordUpsert {
	u.SetNull(learnedword.FieldReviewNextReviewAt)
	return u
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (u *LearnedWordUpsert) SetReviewIntervalDays(v int32) *LearnedWordUpsert {
	u.Set(learnedword.FieldReviewIntervalDays, v)
	return u
}

// UpdateReviewIntervalDays sets the "review_interval_days" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateReviewIntervalDays() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldReviewIntervalDays)
	return u
}

// AddReviewIntervalDays adds v to the "review_interval_days" field.
func (u *LearnedWordUpsert) AddReviewIntervalDays(v int32) *LearnedWordUpsert {
	u.Add(learnedword.FieldReviewIntervalDays, v)
	return u
}

// SetReviewFailCount sets the "review_fail_count" field.
func (u *LearnedWordUpsert) SetReviewFailCount(v int32) *LearnedWordUpsert {
	u.Set(learnedword.FieldReviewFailCount, v)
	return u
}

// UpdateReviewFailCount sets the "review_fail_count" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateReviewFailCount() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldReviewFailCount)
	return u
}

// AddReviewFailCount adds v to the "review_fail_count" field.
func (u *LearnedWordUpsert) AddReviewFailCount(v int32) *LearnedWordUpsert {
	u.Add(learnedword.FieldReviewFailCount, v)
	return u
}

// SetQueryCount sets the "query_count" field.
func (u *LearnedWordUpsert) SetQueryCount(v int64) *LearnedWordUpsert {
	u.Set(learnedword.FieldQueryCount, v)
	return u
}

// UpdateQueryCount sets the "query_count" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateQueryCount() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldQueryCount)
	return u
}

// AddQueryCount adds v to the "query_count" field.
func (u *LearnedWordUpsert) AddQueryCount(v int64) *LearnedWordUpsert {
	u.Add(learnedword.FieldQueryCount, v)
	return u
}

// SetNotes sets the "notes" field.
func (u *LearnedWordUpsert) SetNotes(v string) *LearnedWordUpsert {
	u.Set(learnedword.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateNotes() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *LearnedWordUpsert) ClearNotes() *LearnedWordUpsert {
	u.SetNull(learnedword.FieldNotes)
	return u
}

// SetSentences sets the "sentences" field.
func (u *LearnedWordUpsert) SetSentences(v []entity.Sentence) *LearnedWordUpsert {
	u.Set(learnedword.FieldSentences, v)
	return u
}

// UpdateSentences sets the "sentences" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateSentences() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldSentences)
	return u
}

// SetRelations sets the "relations" field.
func (u *LearnedWordUpsert) SetRelations(v []entity.LearnedWordRelation) *LearnedWordUpsert {
	u.Set(learnedword.FieldRelations, v)
	return u
}

// UpdateRelations sets the "relations" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateRelations() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldRelations)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LearnedWordUpsert) SetCreatedBy(v string) *LearnedWordUpsert {
	u.Set(learnedword.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateCreatedBy() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldCreatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LearnedWordUpsert) SetUpdatedAt(v time.Time) *LearnedWordUpsert {
	u.Set(learnedword.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LearnedWordUpsert) UpdateUpdatedAt() *LearnedWordUpsert {
	u.SetExcluded(learnedword.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.LearnedWord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LearnedWordUpsertOne) UpdateNewValues() *LearnedWordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(learnedword.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LearnedWord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LearnedWordUpsertOne) Ignore() *LearnedWordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LearnedWordUpsertOne) DoNothing() *LearnedWordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LearnedWordCreate.OnConflict
// documentation for more info.
func (u *LearnedWordUpsertOne) Update(set func(*LearnedWordUpsert)) *LearnedWordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LearnedWordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *LearnedWordUpsertOne) SetUserID(v int64) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *LearnedWordUpsertOne) AddUserID(v int64) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateUserID() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateUserID()
	})
}

// SetTerm sets the "term" field.
func (u *LearnedWordUpsertOne) SetTerm(v string) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetTerm(v)
	})
}

// UpdateTerm sets the "term" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateTerm() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateTerm()
	})
}

// SetNormalized sets the "normalized" field.
func (u *LearnedWordUpsertOne) SetNormalized(v string) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetNormalized(v)
	})
}

// UpdateNormalized sets the "normalized" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateNormalized() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateNormalized()
	})
}

// SetLanguage sets the "language" field.
func (u *LearnedWordUpsertOne) SetLanguage(v string) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateLanguage() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateLanguage()
	})
}

// SetMasteryListen sets the "mastery_listen" field.
func (u *LearnedWordUpsertOne) SetMasteryListen(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryListen(v)
	})
}

// AddMasteryListen adds v to the "mastery_listen" field.
func (u *LearnedWordUpsertOne) AddMasteryListen(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryListen(v)
	})
}

// UpdateMasteryListen sets the "mastery_listen" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateMasteryListen() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryListen()
	})
}

// SetMasteryRead sets the "mastery_read" field.
func (u *LearnedWordUpsertOne) SetMasteryRead(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryRead(v)
	})
}

// AddMasteryRead adds v to the "mastery_read" field.
func (u *LearnedWordUpsertOne) AddMasteryRead(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryRead(v)
	})
}

// UpdateMasteryRead sets the "mastery_read" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateMasteryRead() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryRead()
	})
}

// SetMasterySpell sets the "mastery_spell" field.
func (u *LearnedWordUpsertOne) SetMasterySpell(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasterySpell(v)
	})
}

// AddMasterySpell adds v to the "mastery_spell" field.
func (u *LearnedWordUpsertOne) AddMasterySpell(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasterySpell(v)
	})
}

// UpdateMasterySpell sets the "mastery_spell" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateMasterySpell() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasterySpell()
	})
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (u *LearnedWordUpsertOne) SetMasteryPronounce(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryPronounce(v)
	})
}

// AddMasteryPronounce adds v to the "mastery_pronounce" field.
func (u *LearnedWordUpsertOne) AddMasteryPronounce(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryPronounce(v)
	})
}

// UpdateMasteryPronounce sets the "mastery_pronounce" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateMasteryPronounce() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryPronounce()
	})
}

// SetMasteryUse sets the "mastery_use" field.
func (u *LearnedWordUpsertOne) SetMasteryUse(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryUse(v)
	})
}

// AddMasteryUse adds v to the "mastery_use" field.
func (u *LearnedWordUpsertOne) AddMasteryUse(v int16) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryUse(v)
	})
}

// UpdateMasteryUse sets the "mastery_use" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateMasteryUse() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryUse()
	})
}

// SetMasteryOverall sets the "mastery_overall" field.
func (u *LearnedWordUpsertOne) SetMasteryOverall(v int32) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryOverall(v)
	})
}

// AddMasteryOverall adds v to the "mastery_overall" field.
func (u *LearnedWordUpsertOne) AddMasteryOverall(v int32) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryOverall(v)
	})
}

// UpdateMasteryOverall sets the "mastery_overall" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateMasteryOverall() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryOverall()
	})
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (u *LearnedWordUpsertOne) SetReviewLastReviewAt(v time.Time) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewLastReviewAt(v)
	})
}

// UpdateReviewLastReviewAt sets the "review_last_review_at" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateReviewLastReviewAt() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewLastReviewAt()
	})
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (u *LearnedWordUpsertOne) ClearReviewLastReviewAt() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.ClearReviewLastReviewAt()
	})
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (u *LearnedWordUpsertOne) SetReviewNextReviewAt(v time.Time) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewNextReviewAt(v)
	})
}

// UpdateReviewNextReviewAt sets the "review_next_review_at" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateReviewNextReviewAt() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewNextReviewAt()
	})
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (u *LearnedWordUpsertOne) ClearReviewNextReviewAt() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.ClearReviewNextReviewAt()
	})
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (u *LearnedWordUpsertOne) SetReviewIntervalDays(v int32) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewIntervalDays(v)
	})
}

// AddReviewIntervalDays adds v to the "review_interval_days" field.
func (u *LearnedWordUpsertOne) AddReviewIntervalDays(v int32) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddReviewIntervalDays(v)
	})
}

// UpdateReviewIntervalDays sets the "review_interval_days" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateReviewIntervalDays() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewIntervalDays()
	})
}

// SetReviewFailCount sets the "review_fail_count" field.
func (u *LearnedWordUpsertOne) SetReviewFailCount(v int32) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewFailCount(v)
	})
}

// AddReviewFailCount adds v to the "review_fail_count" field.
func (u *LearnedWordUpsertOne) AddReviewFailCount(v int32) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddReviewFailCount(v)
	})
}

// UpdateReviewFailCount sets the "review_fail_count" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateReviewFailCount() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewFailCount()
	})
}

// SetQueryCount sets the "query_count" field.
func (u *LearnedWordUpsertOne) SetQueryCount(v int64) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetQueryCount(v)
	})
}

// AddQueryCount adds v to the "query_count" field.
func (u *LearnedWordUpsertOne) AddQueryCount(v int64) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddQueryCount(v)
	})
}

// UpdateQueryCount sets the "query_count" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateQueryCount() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateQueryCount()
	})
}

// SetNotes sets the "notes" field.
func (u *LearnedWordUpsertOne) SetNotes(v string) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateNotes() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *LearnedWordUpsertOne) ClearNotes() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.ClearNotes()
	})
}

// SetSentences sets the "sentences" field.
func (u *LearnedWordUpsertOne) SetSentences(v []entity.Sentence) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetSentences(v)
	})
}

// UpdateSentences sets the "sentences" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateSentences() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateSentences()
	})
}

// SetRelations sets the "relations" field.
func (u *LearnedWordUpsertOne) SetRelations(v []entity.LearnedWordRelation) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetRelations(v)
	})
}

// UpdateRelations sets the "relations" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateRelations() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateRelations()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *LearnedWordUpsertOne) SetCreatedBy(v string) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateCreatedBy() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LearnedWordUpsertOne) SetUpdatedAt(v time.Time) *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LearnedWordUpsertOne) UpdateUpdatedAt() *LearnedWordUpsertOne {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LearnedWordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LearnedWordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LearnedWordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LearnedWordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LearnedWordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LearnedWordCreateBulk is the builder for creating many LearnedWord entities in bulk.
type LearnedWordCreateBulk struct {
	config
	err      error
	builders []*LearnedWordCreate
	conflict []sql.ConflictOption
}

// Save creates the LearnedWord entities in the database.
func (lwcb *LearnedWordCreateBulk) Save(ctx context.Context) ([]*LearnedWord, error) {
	if lwcb.err != nil {
		return nil, lwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lwcb.builders))
	nodes := make([]*LearnedWord, len(lwcb.builders))
	mutators := make([]Mutator, len(lwcb.builders))
	for i := range lwcb.builders {
		func(i int, root context.Context) {
			builder := lwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LearnedWordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lwcb *LearnedWordCreateBulk) SaveX(ctx context.Context) []*LearnedWord {
	v, err := lwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lwcb *LearnedWordCreateBulk) Exec(ctx context.Context) error {
	_, err := lwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lwcb *LearnedWordCreateBulk) ExecX(ctx context.Context) {
	if err := lwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LearnedWord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LearnedWordUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (lwcb *LearnedWordCreateBulk) OnConflict(opts ...sql.ConflictOption) *LearnedWordUpsertBulk {
	lwcb.conflict = opts
	return &LearnedWordUpsertBulk{
		create: lwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LearnedWord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lwcb *LearnedWordCreateBulk) OnConflictColumns(columns ...string) *LearnedWordUpsertBulk {
	lwcb.conflict = append(lwcb.conflict, sql.ConflictColumns(columns...))
	return &LearnedWordUpsertBulk{
		create: lwcb,
	}
}

// LearnedWordUpsertBulk is the builder for "upsert"-ing
// a bulk of LearnedWord nodes.
type LearnedWordUpsertBulk struct {
	create *LearnedWordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LearnedWord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LearnedWordUpsertBulk) UpdateNewValues() *LearnedWordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(learnedword.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LearnedWord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LearnedWordUpsertBulk) Ignore() *LearnedWordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LearnedWordUpsertBulk) DoNothing() *LearnedWordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LearnedWordCreateBulk.OnConflict
// documentation for more info.
func (u *LearnedWordUpsertBulk) Update(set func(*LearnedWordUpsert)) *LearnedWordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LearnedWordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *LearnedWordUpsertBulk) SetUserID(v int64) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *LearnedWordUpsertBulk) AddUserID(v int64) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateUserID() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateUserID()
	})
}

// SetTerm sets the "term" field.
func (u *LearnedWordUpsertBulk) SetTerm(v string) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetTerm(v)
	})
}

// UpdateTerm sets the "term" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateTerm() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateTerm()
	})
}

// SetNormalized sets the "normalized" field.
func (u *LearnedWordUpsertBulk) SetNormalized(v string) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetNormalized(v)
	})
}

// UpdateNormalized sets the "normalized" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateNormalized() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateNormalized()
	})
}

// SetLanguage sets the "language" field.
func (u *LearnedWordUpsertBulk) SetLanguage(v string) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateLanguage() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateLanguage()
	})
}

// SetMasteryListen sets the "mastery_listen" field.
func (u *LearnedWordUpsertBulk) SetMasteryListen(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryListen(v)
	})
}

// AddMasteryListen adds v to the "mastery_listen" field.
func (u *LearnedWordUpsertBulk) AddMasteryListen(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryListen(v)
	})
}

// UpdateMasteryListen sets the "mastery_listen" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateMasteryListen() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryListen()
	})
}

// SetMasteryRead sets the "mastery_read" field.
func (u *LearnedWordUpsertBulk) SetMasteryRead(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryRead(v)
	})
}

// AddMasteryRead adds v to the "mastery_read" field.
func (u *LearnedWordUpsertBulk) AddMasteryRead(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryRead(v)
	})
}

// UpdateMasteryRead sets the "mastery_read" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateMasteryRead() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryRead()
	})
}

// SetMasterySpell sets the "mastery_spell" field.
func (u *LearnedWordUpsertBulk) SetMasterySpell(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasterySpell(v)
	})
}

// AddMasterySpell adds v to the "mastery_spell" field.
func (u *LearnedWordUpsertBulk) AddMasterySpell(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasterySpell(v)
	})
}

// UpdateMasterySpell sets the "mastery_spell" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateMasterySpell() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasterySpell()
	})
}

// SetMasteryPronounce sets the "mastery_pronounce" field.
func (u *LearnedWordUpsertBulk) SetMasteryPronounce(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryPronounce(v)
	})
}

// AddMasteryPronounce adds v to the "mastery_pronounce" field.
func (u *LearnedWordUpsertBulk) AddMasteryPronounce(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryPronounce(v)
	})
}

// UpdateMasteryPronounce sets the "mastery_pronounce" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateMasteryPronounce() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryPronounce()
	})
}

// SetMasteryUse sets the "mastery_use" field.
func (u *LearnedWordUpsertBulk) SetMasteryUse(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryUse(v)
	})
}

// AddMasteryUse adds v to the "mastery_use" field.
func (u *LearnedWordUpsertBulk) AddMasteryUse(v int16) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryUse(v)
	})
}

// UpdateMasteryUse sets the "mastery_use" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateMasteryUse() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryUse()
	})
}

// SetMasteryOverall sets the "mastery_overall" field.
func (u *LearnedWordUpsertBulk) SetMasteryOverall(v int32) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetMasteryOverall(v)
	})
}

// AddMasteryOverall adds v to the "mastery_overall" field.
func (u *LearnedWordUpsertBulk) AddMasteryOverall(v int32) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddMasteryOverall(v)
	})
}

// UpdateMasteryOverall sets the "mastery_overall" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateMasteryOverall() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateMasteryOverall()
	})
}

// SetReviewLastReviewAt sets the "review_last_review_at" field.
func (u *LearnedWordUpsertBulk) SetReviewLastReviewAt(v time.Time) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewLastReviewAt(v)
	})
}

// UpdateReviewLastReviewAt sets the "review_last_review_at" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateReviewLastReviewAt() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewLastReviewAt()
	})
}

// ClearReviewLastReviewAt clears the value of the "review_last_review_at" field.
func (u *LearnedWordUpsertBulk) ClearReviewLastReviewAt() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.ClearReviewLastReviewAt()
	})
}

// SetReviewNextReviewAt sets the "review_next_review_at" field.
func (u *LearnedWordUpsertBulk) SetReviewNextReviewAt(v time.Time) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewNextReviewAt(v)
	})
}

// UpdateReviewNextReviewAt sets the "review_next_review_at" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateReviewNextReviewAt() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewNextReviewAt()
	})
}

// ClearReviewNextReviewAt clears the value of the "review_next_review_at" field.
func (u *LearnedWordUpsertBulk) ClearReviewNextReviewAt() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.ClearReviewNextReviewAt()
	})
}

// SetReviewIntervalDays sets the "review_interval_days" field.
func (u *LearnedWordUpsertBulk) SetReviewIntervalDays(v int32) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewIntervalDays(v)
	})
}

// AddReviewIntervalDays adds v to the "review_interval_days" field.
func (u *LearnedWordUpsertBulk) AddReviewIntervalDays(v int32) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddReviewIntervalDays(v)
	})
}

// UpdateReviewIntervalDays sets the "review_interval_days" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateReviewIntervalDays() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewIntervalDays()
	})
}

// SetReviewFailCount sets the "review_fail_count" field.
func (u *LearnedWordUpsertBulk) SetReviewFailCount(v int32) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetReviewFailCount(v)
	})
}

// AddReviewFailCount adds v to the "review_fail_count" field.
func (u *LearnedWordUpsertBulk) AddReviewFailCount(v int32) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddReviewFailCount(v)
	})
}

// UpdateReviewFailCount sets the "review_fail_count" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateReviewFailCount() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateReviewFailCount()
	})
}

// SetQueryCount sets the "query_count" field.
func (u *LearnedWordUpsertBulk) SetQueryCount(v int64) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetQueryCount(v)
	})
}

// AddQueryCount adds v to the "query_count" field.
func (u *LearnedWordUpsertBulk) AddQueryCount(v int64) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.AddQueryCount(v)
	})
}

// UpdateQueryCount sets the "query_count" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateQueryCount() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateQueryCount()
	})
}

// SetNotes sets the "notes" field.
func (u *LearnedWordUpsertBulk) SetNotes(v string) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateNotes() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *LearnedWordUpsertBulk) ClearNotes() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.ClearNotes()
	})
}

// SetSentences sets the "sentences" field.
func (u *LearnedWordUpsertBulk) SetSentences(v []entity.Sentence) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetSentences(v)
	})
}

// UpdateSentences sets the "sentences" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateSentences() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateSentences()
	})
}

// SetRelations sets the "relations" field.
func (u *LearnedWordUpsertBulk) SetRelations(v []entity.LearnedWordRelation) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetRelations(v)
	})
}

// UpdateRelations sets the "relations" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateRelations() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateRelations()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *LearnedWordUpsertBulk) SetCreatedBy(v string) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateCreatedBy() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LearnedWordUpsertBulk) SetUpdatedAt(v time.Time) *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LearnedWordUpsertBulk) UpdateUpdatedAt() *LearnedWordUpsertBulk {
	return u.Update(func(s *LearnedWordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LearnedWordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LearnedWordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LearnedWordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LearnedWordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
