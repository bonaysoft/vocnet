// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/vocnet/internal/entity"
	"github.com/eslsoft/vocnet/internal/infrastructure/database/ent/learnedword"
)

// LearnedWord is the model entity for the LearnedWord schema.
type LearnedWord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Term holds the value of the "term" field.
	Term string `json:"term,omitempty"`
	// Normalized holds the value of the "normalized" field.
	Normalized string `json:"normalized,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// MasteryListen holds the value of the "mastery_listen" field.
	MasteryListen int16 `json:"mastery_listen,omitempty"`
	// MasteryRead holds the value of the "mastery_read" field.
	MasteryRead int16 `json:"mastery_read,omitempty"`
	// MasterySpell holds the value of the "mastery_spell" field.
	MasterySpell int16 `json:"mastery_spell,omitempty"`
	// MasteryPronounce holds the value of the "mastery_pronounce" field.
	MasteryPronounce int16 `json:"mastery_pronounce,omitempty"`
	// MasteryUse holds the value of the "mastery_use" field.
	MasteryUse int16 `json:"mastery_use,omitempty"`
	// MasteryOverall holds the value of the "mastery_overall" field.
	MasteryOverall int32 `json:"mastery_overall,omitempty"`
	// ReviewLastReviewAt holds the value of the "review_last_review_at" field.
	ReviewLastReviewAt *time.Time `json:"review_last_review_at,omitempty"`
	// ReviewNextReviewAt holds the value of the "review_next_review_at" field.
	ReviewNextReviewAt *time.Time `json:"review_next_review_at,omitempty"`
	// ReviewIntervalDays holds the value of the "review_interval_days" field.
	ReviewIntervalDays int32 `json:"review_interval_days,omitempty"`
	// ReviewFailCount holds the value of the "review_fail_count" field.
	ReviewFailCount int32 `json:"review_fail_count,omitempty"`
	// QueryCount holds the value of the "query_count" field.
	QueryCount int64 `json:"query_count,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Sentences holds the value of the "sentences" field.
	Sentences []entity.Sentence `json:"sentences,omitempty"`
	// Relations holds the value of the "relations" field.
	Relations []entity.LearnedWordRelation `json:"relations,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LearnedWord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case learnedword.FieldSentences, learnedword.FieldRelations:
			values[i] = new([]byte)
		case learnedword.FieldID, learnedword.FieldUserID, learnedword.FieldMasteryListen, learnedword.FieldMasteryRead, learnedword.FieldMasterySpell, learnedword.FieldMasteryPronounce, learnedword.FieldMasteryUse, learnedword.FieldMasteryOverall, learnedword.FieldReviewIntervalDays, learnedword.FieldReviewFailCount, learnedword.FieldQueryCount:
			values[i] = new(sql.NullInt64)
		case learnedword.FieldTerm, learnedword.FieldNormalized, learnedword.FieldLanguage, learnedword.FieldNotes, learnedword.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case learnedword.FieldReviewLastReviewAt, learnedword.FieldReviewNextReviewAt, learnedword.FieldCreatedAt, learnedword.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LearnedWord fields.
func (lw *LearnedWord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case learnedword.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lw.ID = int(value.Int64)
		case learnedword.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				lw.UserID = value.Int64
			}
		case learnedword.FieldTerm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field term", values[i])
			} else if value.Valid {
				lw.Term = value.String
			}
		case learnedword.FieldNormalized:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field normalized", values[i])
			} else if value.Valid {
				lw.Normalized = value.String
			}
		case learnedword.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				lw.Language = value.String
			}
		case learnedword.FieldMasteryListen:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_listen", values[i])
			} else if value.Valid {
				lw.MasteryListen = int16(value.Int64)
			}
		case learnedword.FieldMasteryRead:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_read", values[i])
			} else if value.Valid {
				lw.MasteryRead = int16(value.Int64)
			}
		case learnedword.FieldMasterySpell:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_spell", values[i])
			} else if value.Valid {
				lw.MasterySpell = int16(value.Int64)
			}
		case learnedword.FieldMasteryPronounce:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_pronounce", values[i])
			} else if value.Valid {
				lw.MasteryPronounce = int16(value.Int64)
			}
		case learnedword.FieldMasteryUse:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_use", values[i])
			} else if value.Valid {
				lw.MasteryUse = int16(value.Int64)
			}
		case learnedword.FieldMasteryOverall:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mastery_overall", values[i])
			} else if value.Valid {
				lw.MasteryOverall = int32(value.Int64)
			}
		case learnedword.FieldReviewLastReviewAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_last_review_at", values[i])
			} else if value.Valid {
				lw.ReviewLastReviewAt = new(time.Time)
				*lw.ReviewLastReviewAt = value.Time
			}
		case learnedword.FieldReviewNextReviewAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_next_review_at", values[i])
			} else if value.Valid {
				lw.ReviewNextReviewAt = new(time.Time)
				*lw.ReviewNextReviewAt = value.Time
			}
		case learnedword.FieldReviewIntervalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_interval_days", values[i])
			} else if value.Valid {
				lw.ReviewIntervalDays = int32(value.Int64)
			}
		case learnedword.FieldReviewFailCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_fail_count", values[i])
			} else if value.Valid {
				lw.ReviewFailCount = int32(value.Int64)
			}
		case learnedword.FieldQueryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field query_count", values[i])
			} else if value.Valid {
				lw.QueryCount = value.Int64
			}
		case learnedword.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				lw.Notes = new(string)
				*lw.Notes = value.String
			}
		case learnedword.FieldSentences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sentences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &lw.Sentences); err != nil {
					return fmt.Errorf("unmarshal field sentences: %w", err)
				}
			}
		case learnedword.FieldRelations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field relations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &lw.Relations); err != nil {
					return fmt.Errorf("unmarshal field relations: %w", err)
				}
			}
		case learnedword.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				lw.CreatedBy = value.String
			}
		case learnedword.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lw.CreatedAt = value.Time
			}
		case learnedword.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lw.UpdatedAt = value.Time
			}
		default:
			lw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LearnedWord.
// This includes values selected through modifiers, order, etc.
func (lw *LearnedWord) Value(name string) (ent.Value, error) {
	return lw.selectValues.Get(name)
}

// Update returns a builder for updating this LearnedWord.
// Note that you need to call LearnedWord.Unwrap() before calling this method if this LearnedWord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lw *LearnedWord) Update() *LearnedWordUpdateOne {
	return NewLearnedWordClient(lw.config).UpdateOne(lw)
}

// Unwrap unwraps the LearnedWord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lw *LearnedWord) Unwrap() *LearnedWord {
	_tx, ok := lw.config.driver.(*txDriver)
	if !ok {
		panic("ent: LearnedWord is not a transactional entity")
	}
	lw.config.driver = _tx.drv
	return lw
}

// String implements the fmt.Stringer.
func (lw *LearnedWord) String() string {
	var builder strings.Builder
	builder.WriteString("LearnedWord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lw.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", lw.UserID))
	builder.WriteString(", ")
	builder.WriteString("term=")
	builder.WriteString(lw.Term)
	builder.WriteString(", ")
	builder.WriteString("normalized=")
	builder.WriteString(lw.Normalized)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(lw.Language)
	builder.WriteString(", ")
	builder.WriteString("mastery_listen=")
	builder.WriteString(fmt.Sprintf("%v", lw.MasteryListen))
	builder.WriteString(", ")
	builder.WriteString("mastery_read=")
	builder.WriteString(fmt.Sprintf("%v", lw.MasteryRead))
	builder.WriteString(", ")
	builder.WriteString("mastery_spell=")
	builder.WriteString(fmt.Sprintf("%v", lw.MasterySpell))
	builder.WriteString(", ")
	builder.WriteString("mastery_pronounce=")
	builder.WriteString(fmt.Sprintf("%v", lw.MasteryPronounce))
	builder.WriteString(", ")
	builder.WriteString("mastery_use=")
	builder.WriteString(fmt.Sprintf("%v", lw.MasteryUse))
	builder.WriteString(", ")
	builder.WriteString("mastery_overall=")
	builder.WriteString(fmt.Sprintf("%v", lw.MasteryOverall))
	builder.WriteString(", ")
	if v := lw.ReviewLastReviewAt; v != nil {
		builder.WriteString("review_last_review_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := lw.ReviewNextReviewAt; v != nil {
		builder.WriteString("review_next_review_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("review_interval_days=")
	builder.WriteString(fmt.Sprintf("%v", lw.ReviewIntervalDays))
	builder.WriteString(", ")
	builder.WriteString("review_fail_count=")
	builder.WriteString(fmt.Sprintf("%v", lw.ReviewFailCount))
	builder.WriteString(", ")
	builder.WriteString("query_count=")
	builder.WriteString(fmt.Sprintf("%v", lw.QueryCount))
	builder.WriteString(", ")
	if v := lw.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("sentences=")
	builder.WriteString(fmt.Sprintf("%v", lw.Sentences))
	builder.WriteString(", ")
	builder.WriteString("relations=")
	builder.WriteString(fmt.Sprintf("%v", lw.Relations))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(lw.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lw.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LearnedWords is a parsable slice of LearnedWord.
type LearnedWords []*LearnedWord
