syntax = "proto3";

package word.v1;

import "google/api/annotations.proto";
import "common/v1/enums.proto";
import "common/v1/types.proto";
import "word/v1/word.proto";
import "validate/validate.proto";

option go_package = "github.com/bonaysoft/vocnet/api/gen/word/v1;wordv1";

// Word relationship management service for building vocabulary networks
service WordRelationService {
  // Create a relationship between two user words
  rpc CreateWordRelation(CreateWordRelationRequest) returns (CreateWordRelationResponse) {
    option (google.api.http) = {
      post: "/api/v1/word-relations"
      body: "*"
    };
  }
  
  // Get relationships for a specific word
  rpc ListWordRelations(ListWordRelationsRequest) returns (ListWordRelationsResponse) {
    option (google.api.http) = {
      get: "/api/v1/user-words/{user_word_id}/relations"
    };
  }
  
  // Update relationship properties
  rpc UpdateWordRelation(UpdateWordRelationRequest) returns (UpdateWordRelationResponse) {
    option (google.api.http) = {
      patch: "/api/v1/word-relations/{relation_id}"
      body: "*"
    };
  }
  
  // Delete a word relationship
  rpc DeleteWordRelation(DeleteWordRelationRequest) returns (DeleteWordRelationResponse) {
    option (google.api.http) = {
      delete: "/api/v1/word-relations/{relation_id}"
    };
  }
  
  // Get vocabulary network graph for visualization
  rpc GetWordNetwork(GetWordNetworkRequest) returns (GetWordNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v1/user-words/{user_word_id}/network"
    };
  }
}

// CreateWordRelation request
message CreateWordRelationRequest {
  int64 user_id = 1 [(validate.rules).int64.gt = 0];
  int64 word_a_id = 2 [(validate.rules).int64.gt = 0];      // Source user_word id
  int64 word_b_id = 3 [(validate.rules).int64.gt = 0];      // Target user_word id
  common.v1.RelationType relation_type = 4 [(validate.rules).enum.defined_only = true];
  string subtype = 5;                                       // Optional subcategory
  bool is_bidirectional = 6;                               // Default false
  int32 weight = 7 [(validate.rules).int32 = {gte: 1, lte: 100}];  // Default 50
  string note = 8;                                          // User note
}

message CreateWordRelationResponse {
  WordRelation relation = 1;
}

// ListWordRelations request
message ListWordRelationsRequest {
  int64 user_word_id = 1 [(validate.rules).int64.gt = 0];
  int64 user_id = 2 [(validate.rules).int64.gt = 0];
  common.v1.RelationType relation_type = 3;                // Filter by relation type
  common.v1.PaginationRequest pagination = 4;
}

message ListWordRelationsResponse {
  repeated WordRelation relations = 1;
  common.v1.PaginationResponse pagination = 2;
}

// UpdateWordRelation request
message UpdateWordRelationRequest {
  int64 relation_id = 1 [(validate.rules).int64.gt = 0];
  int64 user_id = 2 [(validate.rules).int64.gt = 0];
  
  int32 weight = 3 [(validate.rules).int32 = {gte: 1, lte: 100}];
  string note = 4;
  string subtype = 5;
}

message UpdateWordRelationResponse {
  WordRelation relation = 1;
}

// DeleteWordRelation request
message DeleteWordRelationRequest {
  int64 relation_id = 1 [(validate.rules).int64.gt = 0];
  int64 user_id = 2 [(validate.rules).int64.gt = 0];
}

message DeleteWordRelationResponse {
  bool success = 1;
}

// GetWordNetwork request for vocabulary graph visualization
message GetWordNetworkRequest {
  int64 user_word_id = 1 [(validate.rules).int64.gt = 0];
  int64 user_id = 2 [(validate.rules).int64.gt = 0];
  int32 max_depth = 3 [(validate.rules).int32 = {gte: 1, lte: 3}];  // Max 3 degrees of separation
  int32 max_nodes = 4 [(validate.rules).int32 = {gte: 1, lte: 100}]; // Limit network size
}

message GetWordNetworkResponse {
  WordNetworkGraph graph = 1;
}

// Network graph structure for visualization
message WordNetworkGraph {
  repeated WordNode nodes = 1;
  repeated WordEdge edges = 2;
  WordNode center_node = 3;                               // The requested word
}

// Node in the word network
message WordNode {
  int64 user_word_id = 1;
  string text = 2;                                        // Word text for display
  common.v1.MasteryLevel mastery_level = 3;              // Overall mastery for visualization
  int32 connection_count = 4;                             // Number of connections
}

// Edge in the word network
message WordEdge {
  int64 from_word_id = 1;
  int64 to_word_id = 2;
  common.v1.RelationType relation_type = 3;
  int32 weight = 4;
  bool is_bidirectional = 5;
}