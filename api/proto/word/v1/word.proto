syntax = "proto3";

package word.v1;

import "google/protobuf/timestamp.proto";
import "common/v1/enums.proto";
import "common/v1/types.proto";

option go_package = "github.com/eslsoft/vocnet/api/gen/word/v1;wordv1";

// Core word entity (global lexeme)
message Word {
  int64 id = 1;
  string lemma = 2;                                // Canonical form (e.g., "run")
  common.v1.Language language = 3;                 // Language of the word
  string phonetic = 4;                             // IPA phonetic notation (optional)
  string pos = 5;                                  // Primary part of speech
  string definition = 6;                           // Primary definition (optional)
  string translation = 7;                          // Localized translation or gloss (optional)
  string exchange = 8;                             // Inflectional forms JSON or compact string
  repeated string tags = 9;                        // Semantic or difficulty tags
  google.protobuf.Timestamp created_at = 10;
}

// User's personal word record with learning context
message UserWord {
  int64 id = 1;
  int64 user_id = 2;
  int64 word_id = 3;                               // Reference to global word (nullable)
  string custom_text = 4;                          // For ad-hoc words not in global table
  common.v1.WordStatus status = 5;                 // Current learning status
  common.v1.MasteryBreakdown mastery = 6;          // Detailed mastery scores
  common.v1.ReviewTiming review_timing = 7;        // Review scheduling info
  google.protobuf.Timestamp first_seen_at = 8;     // When user first encountered this word
  string notes = 9;                                // User's personal notes
  bool is_active = 10;                             // Soft delete flag
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  
  // Read-only computed fields (not stored, computed on response)
  Word word_details = 20;                          // Global word details (if word_id exists)
  int32 total_sentences = 21;                      // Number of associated sentences
  int32 total_relations = 22;                      // Number of word relations
}

// Word-to-word relationship for building vocabulary networks
message WordRelation {
  int64 id = 1;
  int64 user_id = 2;
  int64 word_a_id = 3;                             // Source user_word id
  int64 word_b_id = 4;                             // Target user_word id
  common.v1.RelationType relation_type = 5;        // Type of relationship
  string subtype = 6;                              // Additional categorization (optional)
  bool is_bidirectional = 7;                      // Whether relation works both ways
  int32 weight = 8;                                // Relationship strength (1-100)
  string note = 9;                                 // User's note about this relation
  string created_source = 10;                     // How this relation was created (manual/auto)
  bool is_active = 11;                            // Soft delete flag
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
  
  // Read-only related word details (populated on response)
  UserWord word_a = 20;
  UserWord word_b = 21;
}