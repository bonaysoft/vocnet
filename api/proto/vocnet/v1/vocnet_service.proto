syntax = "proto3";

package vocnet.v1;

import "common/v1/types.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "vocnet/v1/vocnet.proto";

// User word management service for personal vocabulary learning
service UserWordService {
  // Collect/add a word to user's vocabulary (creates global word if needed)
  rpc CollectWord(CollectWordRequest) returns (UserWord) {
    option (google.api.http) = {
      post: "/api/v1/vocnet/words"
      body: "*"
    };
  }

  // Update mastery level and learning status
  rpc UpdateUserWordMastery(UpdateUserWordMasteryRequest) returns (UserWord) {
    option (google.api.http) = {
      patch: "/api/v1/vocnet/words/{word_id}/mastery"
      body: "*"
    };
  }

  // List user's words with filtering and sorting
  rpc ListUserWords(ListUserWordsRequest) returns (ListUserWordsResponse) {
    option (google.api.http) = {get: "/api/v1/vocnet/words"};
  }

  // Delete/deactivate a user word
  rpc DeleteUserWord(common.v1.IDRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/v1/vocnet/words/{id}"};
  }
}

// CollectWord request - main API for adding words to user vocabulary
message CollectWordRequest {
  UserWord word = 1;
}

// UpdateUserWordMastery request
message UpdateUserWordMasteryRequest {
  int64 word_id = 1 [(validate.rules).int64.gt = 0];
  vocnet.v1.MasteryBreakdown mastery = 2;
  string notes = 3;
}

// ListUserWords request with comprehensive filtering
message ListUserWordsRequest {
  common.v1.PaginationRequest pagination = 1;

  // Filtering options
  string keyword = 5; // Search in word text or notes
  repeated string words = 6; // Exact match filter for word texts
}

message ListUserWordsResponse {
  common.v1.PaginationResponse pagination = 1;
  repeated UserWord user_words = 2;
}

