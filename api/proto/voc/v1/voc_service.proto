syntax = "proto3";

package voc.v1;

import "google/api/annotations.proto";
import "common/v1/enums.proto";
import "common/v1/types.proto";
import "voc/v1/voc.proto";
import "validate/validate.proto";

option go_package = "github.com/eslsoft/vocnet/api/gen/voc/v1;vocv1";

// Vocabulary management service (formerly WordService) for global entries
service VocService {
  // Create a new vocabulary entry (admin/system use)
  rpc CreateVoc(CreateVocRequest) returns (CreateVocResponse) {
    option (google.api.http) = {
      post: "/api/v1/words"
      body: "*"
    };
  }
  
  // Get vocabulary entry details by id or composite key
  rpc GetVoc(GetVocRequest) returns (GetVocResponse) {
    option (google.api.http) = {
      // Prefer id path; fallback composite path
      get: "/api/v1/words/{id}"
    };
  }
  
  // List vocabulary entries with filtering and pagination
  rpc ListVocs(ListVocsRequest) returns (ListVocsResponse) {
    option (google.api.http) = {
      get: "/api/v1/words"
    };
  }
  
  // Lookup a single voc by exact text (case-insensitive)
  rpc Lookup(LookupVocRequest) returns (Voc) {
    option (google.api.http) = {
      get: "/api/v1/dict/lookup"
    };
  }
}

// CreateVoc request (creates either a lemma entry or a derived/inflected form)
message CreateVocRequest {
  string text = 1 [(validate.rules).string.min_len = 1];
  common.v1.Language language = 2 [(validate.rules).enum.defined_only = true];
  string voc_type = 3 [(validate.rules).string.min_len = 1];
  string lemma = 4;                 // required if voc_type != "lemma"
  string phonetic = 5;              // optional
  repeated VocMeaning meanings = 6; // only used when voc_type == "lemma"
  repeated string tags = 7;         // optional tags
}

message CreateVocResponse {
  Voc voc = 1;
}

// GetVoc request
// Identify a voc uniquely by (language, text, voc_type)
message GetVocRequest {
  int64 id = 1; // optional; if provided, other fields ignored
  string text = 2; // required if id not set
  common.v1.Language language = 3; // required if id not set
  string voc_type = 4; // optional, default lemma when composite lookup
}

message GetVocResponse {
  Voc voc = 1;
}

// ListVocs request
message ListVocsRequest {
  common.v1.PaginationRequest pagination = 1;
  common.v1.Language language = 2; // Filter by language
  string text_prefix = 3;          // Filter by text prefix
  string voc_type = 4;             // Optional filter for voc_type (e.g., lemma only)
}

message ListVocsResponse {
  repeated Voc vocs = 1;
  common.v1.PaginationResponse pagination = 2;
}

// LookupVocRequest performs an exact text lookup in specified language (default en)
message LookupVocRequest {
  string text = 1 [(validate.rules).string.min_len = 1];
  common.v1.Language language = 2; // optional; if unspecified, server default language
}
