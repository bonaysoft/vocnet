// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: learning/v1/learning_service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// User word management service for personal vocabulary learning
public protocol Learning_V1_LearningServiceClientInterface: Sendable {

    /// Collect/add a word to user's vocabulary (creates global word if needed)
    @discardableResult
    func `collectWord`(request: Learning_V1_CollectWordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Learning_V1_LearnedWord>) -> Void) -> Connect.Cancelable

    /// Collect/add a word to user's vocabulary (creates global word if needed)
    @available(iOS 13, *)
    func `collectWord`(request: Learning_V1_CollectWordRequest, headers: Connect.Headers) async -> ResponseMessage<Learning_V1_LearnedWord>

    /// UncollectWord removes a word from user's vocabulary
    @discardableResult
    func `uncollectWord`(request: Common_V1_IDRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// UncollectWord removes a word from user's vocabulary
    @available(iOS 13, *)
    func `uncollectWord`(request: Common_V1_IDRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// List user's words with filtering and sorting
    @discardableResult
    func `listLearnedWords`(request: Learning_V1_ListLearnedWordsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Learning_V1_ListLearnedWordsResponse>) -> Void) -> Connect.Cancelable

    /// List user's words with filtering and sorting
    @available(iOS 13, *)
    func `listLearnedWords`(request: Learning_V1_ListLearnedWordsRequest, headers: Connect.Headers) async -> ResponseMessage<Learning_V1_ListLearnedWordsResponse>

    /// Update mastery level and learning status
    @discardableResult
    func `updateMastery`(request: Learning_V1_UpdateMasteryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Learning_V1_LearnedWord>) -> Void) -> Connect.Cancelable

    /// Update mastery level and learning status
    @available(iOS 13, *)
    func `updateMastery`(request: Learning_V1_UpdateMasteryRequest, headers: Connect.Headers) async -> ResponseMessage<Learning_V1_LearnedWord>
}

/// Concrete implementation of `Learning_V1_LearningServiceClientInterface`.
public final class Learning_V1_LearningServiceClient: Learning_V1_LearningServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `collectWord`(request: Learning_V1_CollectWordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Learning_V1_LearnedWord>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/learning.v1.LearningService/CollectWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `collectWord`(request: Learning_V1_CollectWordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Learning_V1_LearnedWord> {
        return await self.client.unary(path: "/learning.v1.LearningService/CollectWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `uncollectWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/learning.v1.LearningService/UncollectWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `uncollectWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/learning.v1.LearningService/UncollectWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listLearnedWords`(request: Learning_V1_ListLearnedWordsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Learning_V1_ListLearnedWordsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/learning.v1.LearningService/ListLearnedWords", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listLearnedWords`(request: Learning_V1_ListLearnedWordsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Learning_V1_ListLearnedWordsResponse> {
        return await self.client.unary(path: "/learning.v1.LearningService/ListLearnedWords", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateMastery`(request: Learning_V1_UpdateMasteryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Learning_V1_LearnedWord>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/learning.v1.LearningService/UpdateMastery", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateMastery`(request: Learning_V1_UpdateMasteryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Learning_V1_LearnedWord> {
        return await self.client.unary(path: "/learning.v1.LearningService/UpdateMastery", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let collectWord = Connect.MethodSpec(name: "CollectWord", service: "learning.v1.LearningService", type: .unary)
            public static let uncollectWord = Connect.MethodSpec(name: "UncollectWord", service: "learning.v1.LearningService", type: .unary)
            public static let listLearnedWords = Connect.MethodSpec(name: "ListLearnedWords", service: "learning.v1.LearningService", type: .unary)
            public static let updateMastery = Connect.MethodSpec(name: "UpdateMastery", service: "learning.v1.LearningService", type: .unary)
        }
    }
}
