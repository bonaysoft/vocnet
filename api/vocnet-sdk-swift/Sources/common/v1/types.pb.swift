// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Supported languages
public enum Common_V1_Language: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0

  /// en
  case english // = 1

  /// zh
  case chinese // = 2

  /// es
  case spanish // = 3

  /// fr
  case french // = 4

  /// de
  case german // = 5

  /// ja
  case japanese // = 6

  /// ko
  case korean // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .english
    case 2: self = .chinese
    case 3: self = .spanish
    case 4: self = .french
    case 5: self = .german
    case 6: self = .japanese
    case 7: self = .korean
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .english: return 1
    case .chinese: return 2
    case .spanish: return 3
    case .french: return 4
    case .german: return 5
    case .japanese: return 6
    case .korean: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_V1_Language] = [
    .unspecified,
    .english,
    .chinese,
    .spanish,
    .french,
    .german,
    .japanese,
    .korean,
  ]

}

/// Word relation types for building vocabulary networks
public enum Common_V1_RelationType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0

  /// 同义词
  case synonym // = 1

  /// 反义词
  case antonym // = 2

  /// 上位词 (animal->dog)
  case hypernym // = 3

  /// 下位词 (dog->animal)
  case hyponym // = 4

  /// 关联词 (bread->butter)
  case association // = 5

  /// 因果关系 (smoke->cancer)
  case causeEffect // = 6

  /// 部分-整体 (wheel->car)
  case partWhole // = 7

  /// 联想/助记 (arbitrary user associations)
  case mnemonic // = 10

  /// 自定义关系 (reserved for extension)
  case custom // = 100
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .synonym
    case 2: self = .antonym
    case 3: self = .hypernym
    case 4: self = .hyponym
    case 5: self = .association
    case 6: self = .causeEffect
    case 7: self = .partWhole
    case 10: self = .mnemonic
    case 100: self = .custom
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .synonym: return 1
    case .antonym: return 2
    case .hypernym: return 3
    case .hyponym: return 4
    case .association: return 5
    case .causeEffect: return 6
    case .partWhole: return 7
    case .mnemonic: return 10
    case .custom: return 100
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_V1_RelationType] = [
    .unspecified,
    .synonym,
    .antonym,
    .hypernym,
    .hyponym,
    .association,
    .causeEffect,
    .partWhole,
    .mnemonic,
    .custom,
  ]

}

/// ID request message
public struct Common_V1_IDRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Pagination request parameters
public struct Common_V1_PaginationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Number of items to return (default: 20, max: 100)
  public var limit: Int32 = 0

  /// Number of items to skip (default: 0)
  public var offset: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Pagination response metadata
public struct Common_V1_PaginationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total number of items
  public var total: Int32 = 0

  /// Current page number (calculated from offset/limit)
  public var pageNo: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common.v1"

extension Common_V1_Language: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0LANGUAGE_UNSPECIFIED\0\u{1}LANGUAGE_ENGLISH\0\u{1}LANGUAGE_CHINESE\0\u{1}LANGUAGE_SPANISH\0\u{1}LANGUAGE_FRENCH\0\u{1}LANGUAGE_GERMAN\0\u{1}LANGUAGE_JAPANESE\0\u{1}LANGUAGE_KOREAN\0")
}

extension Common_V1_RelationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0RELATION_TYPE_UNSPECIFIED\0\u{1}RELATION_TYPE_SYNONYM\0\u{1}RELATION_TYPE_ANTONYM\0\u{1}RELATION_TYPE_HYPERNYM\0\u{1}RELATION_TYPE_HYPONYM\0\u{1}RELATION_TYPE_ASSOCIATION\0\u{1}RELATION_TYPE_CAUSE_EFFECT\0\u{1}RELATION_TYPE_PART_WHOLE\0\u{2}\u{3}RELATION_TYPE_MNEMONIC\0\u{2}Z\u{1}RELATION_TYPE_CUSTOM\0")
}

extension Common_V1_IDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IDRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_V1_IDRequest, rhs: Common_V1_IDRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_V1_PaginationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaginationRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}limit\0\u{1}offset\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.offset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 1)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt32Field(value: self.offset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_V1_PaginationRequest, rhs: Common_V1_PaginationRequest) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_V1_PaginationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaginationResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}total\0\u{3}page_no\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageNo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if self.pageNo != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_V1_PaginationResponse, rhs: Common_V1_PaginationResponse) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.pageNo != rhs.pageNo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
