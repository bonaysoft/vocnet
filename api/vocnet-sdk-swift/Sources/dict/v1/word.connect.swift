// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: dict/v1/word.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Dict_V1_WordServiceClientInterface: Sendable {

    /// Create a new wordabulary entry (admin/system use)
    @discardableResult
    func `createWord`(request: Dict_V1_CreateWordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable

    /// Create a new wordabulary entry (admin/system use)
    @available(iOS 13, *)
    func `createWord`(request: Dict_V1_CreateWordRequest, headers: Connect.Headers) async -> ResponseMessage<Dict_V1_Word>

    /// Update a wordabulary entry by id (admin/system use)
    @discardableResult
    func `updateWord`(request: Dict_V1_Word, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable

    /// Update a wordabulary entry by id (admin/system use)
    @available(iOS 13, *)
    func `updateWord`(request: Dict_V1_Word, headers: Connect.Headers) async -> ResponseMessage<Dict_V1_Word>

    /// Get wordabulary entry details by id or composite key
    @discardableResult
    func `getWord`(request: Common_V1_IDRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable

    /// Get wordabulary entry details by id or composite key
    @available(iOS 13, *)
    func `getWord`(request: Common_V1_IDRequest, headers: Connect.Headers) async -> ResponseMessage<Dict_V1_Word>

    /// List wordabulary entries with filtering and pagination
    @discardableResult
    func `listWords`(request: Dict_V1_ListWordsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dict_V1_ListWordsResponse>) -> Void) -> Connect.Cancelable

    /// List wordabulary entries with filtering and pagination
    @available(iOS 13, *)
    func `listWords`(request: Dict_V1_ListWordsRequest, headers: Connect.Headers) async -> ResponseMessage<Dict_V1_ListWordsResponse>

    /// Lookup wordabulary entry by exact text match in specified language
    @discardableResult
    func `lookupWord`(request: Dict_V1_LookupWordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable

    /// Lookup wordabulary entry by exact text match in specified language
    @available(iOS 13, *)
    func `lookupWord`(request: Dict_V1_LookupWordRequest, headers: Connect.Headers) async -> ResponseMessage<Dict_V1_Word>

    /// Delete a wordabulary entry by id (admin/system use)
    @discardableResult
    func `deleteWord`(request: Common_V1_IDRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// Delete a wordabulary entry by id (admin/system use)
    @available(iOS 13, *)
    func `deleteWord`(request: Common_V1_IDRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>
}

/// Concrete implementation of `Dict_V1_WordServiceClientInterface`.
public final class Dict_V1_WordServiceClient: Dict_V1_WordServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `createWord`(request: Dict_V1_CreateWordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dict.v1.WordService/CreateWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createWord`(request: Dict_V1_CreateWordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dict_V1_Word> {
        return await self.client.unary(path: "/dict.v1.WordService/CreateWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateWord`(request: Dict_V1_Word, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dict.v1.WordService/UpdateWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateWord`(request: Dict_V1_Word, headers: Connect.Headers = [:]) async -> ResponseMessage<Dict_V1_Word> {
        return await self.client.unary(path: "/dict.v1.WordService/UpdateWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dict.v1.WordService/GetWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dict_V1_Word> {
        return await self.client.unary(path: "/dict.v1.WordService/GetWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listWords`(request: Dict_V1_ListWordsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dict_V1_ListWordsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dict.v1.WordService/ListWords", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listWords`(request: Dict_V1_ListWordsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dict_V1_ListWordsResponse> {
        return await self.client.unary(path: "/dict.v1.WordService/ListWords", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `lookupWord`(request: Dict_V1_LookupWordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dict_V1_Word>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dict.v1.WordService/LookupWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `lookupWord`(request: Dict_V1_LookupWordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dict_V1_Word> {
        return await self.client.unary(path: "/dict.v1.WordService/LookupWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dict.v1.WordService/DeleteWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/dict.v1.WordService/DeleteWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let createWord = Connect.MethodSpec(name: "CreateWord", service: "dict.v1.WordService", type: .unary)
            public static let updateWord = Connect.MethodSpec(name: "UpdateWord", service: "dict.v1.WordService", type: .unary)
            public static let getWord = Connect.MethodSpec(name: "GetWord", service: "dict.v1.WordService", type: .unary)
            public static let listWords = Connect.MethodSpec(name: "ListWords", service: "dict.v1.WordService", type: .unary)
            public static let lookupWord = Connect.MethodSpec(name: "LookupWord", service: "dict.v1.WordService", type: .unary)
            public static let deleteWord = Connect.MethodSpec(name: "DeleteWord", service: "dict.v1.WordService", type: .unary)
        }
    }
}
