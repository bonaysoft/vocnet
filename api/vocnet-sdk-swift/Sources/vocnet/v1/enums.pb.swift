// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vocnet/v1/enums.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Supported languages
public enum Vocnet_V1_Language: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0

  /// en
  case english // = 1

  /// zh
  case chinese // = 2

  /// es
  case spanish // = 3

  /// fr
  case french // = 4

  /// de
  case german // = 5

  /// ja
  case japanese // = 6

  /// ko
  case korean // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .english
    case 2: self = .chinese
    case 3: self = .spanish
    case 4: self = .french
    case 5: self = .german
    case 6: self = .japanese
    case 7: self = .korean
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .english: return 1
    case .chinese: return 2
    case .spanish: return 3
    case .french: return 4
    case .german: return 5
    case .japanese: return 6
    case .korean: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Vocnet_V1_Language] = [
    .unspecified,
    .english,
    .chinese,
    .spanish,
    .french,
    .german,
    .japanese,
    .korean,
  ]

}

/// Source types for sentences and content
public enum Vocnet_V1_SourceType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0

  /// 书籍
  case book // = 1

  /// 网页
  case web // = 2

  /// 音频
  case audio // = 3

  /// 视频
  case video // = 4

  /// 手动输入
  case manual // = 5

  /// 其他
  case other // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .book
    case 2: self = .web
    case 3: self = .audio
    case 4: self = .video
    case 5: self = .manual
    case 10: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .book: return 1
    case .web: return 2
    case .audio: return 3
    case .video: return 4
    case .manual: return 5
    case .other: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Vocnet_V1_SourceType] = [
    .unspecified,
    .book,
    .web,
    .audio,
    .video,
    .manual,
    .other,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Vocnet_V1_Language: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0LANGUAGE_UNSPECIFIED\0\u{1}LANGUAGE_ENGLISH\0\u{1}LANGUAGE_CHINESE\0\u{1}LANGUAGE_SPANISH\0\u{1}LANGUAGE_FRENCH\0\u{1}LANGUAGE_GERMAN\0\u{1}LANGUAGE_JAPANESE\0\u{1}LANGUAGE_KOREAN\0")
}

extension Vocnet_V1_SourceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0SOURCE_TYPE_UNSPECIFIED\0\u{1}SOURCE_TYPE_BOOK\0\u{1}SOURCE_TYPE_WEB\0\u{1}SOURCE_TYPE_AUDIO\0\u{1}SOURCE_TYPE_VIDEO\0\u{1}SOURCE_TYPE_MANUAL\0\u{2}\u{5}SOURCE_TYPE_OTHER\0")
}
