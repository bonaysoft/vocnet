// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: vocnet/v1/vocnet_service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// User word management service for personal vocabulary learning
public protocol Vocnet_V1_UserWordServiceClientInterface: Sendable {

    /// Collect/add a word to user's vocabulary (creates global word if needed)
    @discardableResult
    func `collectWord`(request: Vocnet_V1_CollectWordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Vocnet_V1_UserWord>) -> Void) -> Connect.Cancelable

    /// Collect/add a word to user's vocabulary (creates global word if needed)
    @available(iOS 13, *)
    func `collectWord`(request: Vocnet_V1_CollectWordRequest, headers: Connect.Headers) async -> ResponseMessage<Vocnet_V1_UserWord>

    /// Update mastery level and learning status
    @discardableResult
    func `updateUserWordMastery`(request: Vocnet_V1_UpdateUserWordMasteryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Vocnet_V1_UserWord>) -> Void) -> Connect.Cancelable

    /// Update mastery level and learning status
    @available(iOS 13, *)
    func `updateUserWordMastery`(request: Vocnet_V1_UpdateUserWordMasteryRequest, headers: Connect.Headers) async -> ResponseMessage<Vocnet_V1_UserWord>

    /// List user's words with filtering and sorting
    @discardableResult
    func `listUserWords`(request: Vocnet_V1_ListUserWordsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Vocnet_V1_ListUserWordsResponse>) -> Void) -> Connect.Cancelable

    /// List user's words with filtering and sorting
    @available(iOS 13, *)
    func `listUserWords`(request: Vocnet_V1_ListUserWordsRequest, headers: Connect.Headers) async -> ResponseMessage<Vocnet_V1_ListUserWordsResponse>

    /// Delete/deactivate a user word
    @discardableResult
    func `deleteUserWord`(request: Common_V1_IDRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// Delete/deactivate a user word
    @available(iOS 13, *)
    func `deleteUserWord`(request: Common_V1_IDRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>
}

/// Concrete implementation of `Vocnet_V1_UserWordServiceClientInterface`.
public final class Vocnet_V1_UserWordServiceClient: Vocnet_V1_UserWordServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `collectWord`(request: Vocnet_V1_CollectWordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Vocnet_V1_UserWord>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/vocnet.v1.UserWordService/CollectWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `collectWord`(request: Vocnet_V1_CollectWordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Vocnet_V1_UserWord> {
        return await self.client.unary(path: "/vocnet.v1.UserWordService/CollectWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserWordMastery`(request: Vocnet_V1_UpdateUserWordMasteryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Vocnet_V1_UserWord>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/vocnet.v1.UserWordService/UpdateUserWordMastery", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserWordMastery`(request: Vocnet_V1_UpdateUserWordMasteryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Vocnet_V1_UserWord> {
        return await self.client.unary(path: "/vocnet.v1.UserWordService/UpdateUserWordMastery", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listUserWords`(request: Vocnet_V1_ListUserWordsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Vocnet_V1_ListUserWordsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/vocnet.v1.UserWordService/ListUserWords", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listUserWords`(request: Vocnet_V1_ListUserWordsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Vocnet_V1_ListUserWordsResponse> {
        return await self.client.unary(path: "/vocnet.v1.UserWordService/ListUserWords", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteUserWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/vocnet.v1.UserWordService/DeleteUserWord", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteUserWord`(request: Common_V1_IDRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/vocnet.v1.UserWordService/DeleteUserWord", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let collectWord = Connect.MethodSpec(name: "CollectWord", service: "vocnet.v1.UserWordService", type: .unary)
            public static let updateUserWordMastery = Connect.MethodSpec(name: "UpdateUserWordMastery", service: "vocnet.v1.UserWordService", type: .unary)
            public static let listUserWords = Connect.MethodSpec(name: "ListUserWords", service: "vocnet.v1.UserWordService", type: .unary)
            public static let deleteUserWord = Connect.MethodSpec(name: "DeleteUserWord", service: "vocnet.v1.UserWordService", type: .unary)
        }
    }
}
