// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vocnet/v1/vocnet.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// User's personal word record with learning context
public struct Vocnet_V1_UserWord: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Reference to global word (nullable)
  public var word: String {
    get {return _storage._word}
    set {_uniqueStorage()._word = newValue}
  }

  /// Detailed mastery scores
  public var mastery: Vocnet_V1_MasteryBreakdown {
    get {return _storage._mastery ?? Vocnet_V1_MasteryBreakdown()}
    set {_uniqueStorage()._mastery = newValue}
  }
  /// Returns true if `mastery` has been explicitly set.
  public var hasMastery: Bool {return _storage._mastery != nil}
  /// Clears the value of `mastery`. Subsequent reads from it will return its default value.
  public mutating func clearMastery() {_uniqueStorage()._mastery = nil}

  /// Review scheduling info
  public var reviewTiming: Vocnet_V1_ReviewTiming {
    get {return _storage._reviewTiming ?? Vocnet_V1_ReviewTiming()}
    set {_uniqueStorage()._reviewTiming = newValue}
  }
  /// Returns true if `reviewTiming` has been explicitly set.
  public var hasReviewTiming: Bool {return _storage._reviewTiming != nil}
  /// Clears the value of `reviewTiming`. Subsequent reads from it will return its default value.
  public mutating func clearReviewTiming() {_uniqueStorage()._reviewTiming = nil}

  /// How many times user looked up this word
  public var queryCount: Int64 {
    get {return _storage._queryCount}
    set {_uniqueStorage()._queryCount = newValue}
  }

  /// User's personal notes
  public var notes: String {
    get {return _storage._notes}
    set {_uniqueStorage()._notes = newValue}
  }

  /// Contextual example sentences
  public var sentences: [Vocnet_V1_Sentence] {
    get {return _storage._sentences}
    set {_uniqueStorage()._sentences = newValue}
  }

  /// Relationships to other words
  public var relations: [Vocnet_V1_WordRelation] {
    get {return _storage._relations}
    set {_uniqueStorage()._relations = newValue}
  }

  /// Owner username (read-only)
  public var createdBy: String {
    get {return _storage._createdBy}
    set {_uniqueStorage()._createdBy = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Mastery breakdown for different skills
public struct Vocnet_V1_MasteryBreakdown: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Listening mastery (0-5)
  public var listen: Int32 = 0

  /// Reading mastery (0-5)
  public var read: Int32 = 0

  /// Spelling mastery (0-5)
  public var spell: Int32 = 0

  /// Pronunciation mastery (0-5)
  public var pronounce: Int32 = 0

  /// Usage in context mastery (0-5)
  public var use: Int32 = 0

  /// Overall mastery score (0-500, stored as *100)
  public var overall: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Review timing information
public struct Vocnet_V1_ReviewTiming: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lastReviewAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastReviewAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastReviewAt = newValue}
  }
  /// Returns true if `lastReviewAt` has been explicitly set.
  public var hasLastReviewAt: Bool {return self._lastReviewAt != nil}
  /// Clears the value of `lastReviewAt`. Subsequent reads from it will return its default value.
  public mutating func clearLastReviewAt() {self._lastReviewAt = nil}

  public var nextReviewAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _nextReviewAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_nextReviewAt = newValue}
  }
  /// Returns true if `nextReviewAt` has been explicitly set.
  public var hasNextReviewAt: Bool {return self._nextReviewAt != nil}
  /// Clears the value of `nextReviewAt`. Subsequent reads from it will return its default value.
  public mutating func clearNextReviewAt() {self._nextReviewAt = nil}

  /// Current review interval
  public var intervalDays: Int32 = 0

  /// Consecutive failure count
  public var failCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastReviewAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _nextReviewAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Vocnet_V1_Sentence: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Surface form of the sentence
  public var text: String = String()

  /// How this sentence was added
  public var source: Vocnet_V1_SourceType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Word-to-word relationship for building vocabulary networks
public struct Vocnet_V1_WordRelation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var word: String = String()

  /// Type of relationship
  public var relationType: Vocnet_V1_RelationType = .unspecified

  /// User's note about this relation
  public var note: String = String()

  /// Owner username (read-only)
  public var createdBy: String = String()

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {self._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vocnet.v1"

extension Vocnet_V1_UserWord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserWord"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}word\0\u{1}mastery\0\u{3}review_timing\0\u{3}query_count\0\u{1}notes\0\u{1}sentences\0\u{1}relations\0\u{4}\u{c}created_by\0\u{3}created_at\0\u{3}updated_at\0")

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _word: String = String()
    var _mastery: Vocnet_V1_MasteryBreakdown? = nil
    var _reviewTiming: Vocnet_V1_ReviewTiming? = nil
    var _queryCount: Int64 = 0
    var _notes: String = String()
    var _sentences: [Vocnet_V1_Sentence] = []
    var _relations: [Vocnet_V1_WordRelation] = []
    var _createdBy: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _word = source._word
      _mastery = source._mastery
      _reviewTiming = source._reviewTiming
      _queryCount = source._queryCount
      _notes = source._notes
      _sentences = source._sentences
      _relations = source._relations
      _createdBy = source._createdBy
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._word) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._mastery) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._reviewTiming) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._queryCount) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._notes) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._sentences) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._relations) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._createdBy) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._word.isEmpty {
        try visitor.visitSingularStringField(value: _storage._word, fieldNumber: 2)
      }
      try { if let v = _storage._mastery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._reviewTiming {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._queryCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._queryCount, fieldNumber: 5)
      }
      if !_storage._notes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._notes, fieldNumber: 6)
      }
      if !_storage._sentences.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sentences, fieldNumber: 7)
      }
      if !_storage._relations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._relations, fieldNumber: 8)
      }
      if !_storage._createdBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdBy, fieldNumber: 20)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vocnet_V1_UserWord, rhs: Vocnet_V1_UserWord) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._word != rhs_storage._word {return false}
        if _storage._mastery != rhs_storage._mastery {return false}
        if _storage._reviewTiming != rhs_storage._reviewTiming {return false}
        if _storage._queryCount != rhs_storage._queryCount {return false}
        if _storage._notes != rhs_storage._notes {return false}
        if _storage._sentences != rhs_storage._sentences {return false}
        if _storage._relations != rhs_storage._relations {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vocnet_V1_MasteryBreakdown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MasteryBreakdown"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}listen\0\u{1}read\0\u{1}spell\0\u{1}pronounce\0\u{1}use\0\u{1}overall\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.listen) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.read) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.spell) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pronounce) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.use) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.overall) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.listen != 0 {
      try visitor.visitSingularInt32Field(value: self.listen, fieldNumber: 1)
    }
    if self.read != 0 {
      try visitor.visitSingularInt32Field(value: self.read, fieldNumber: 2)
    }
    if self.spell != 0 {
      try visitor.visitSingularInt32Field(value: self.spell, fieldNumber: 3)
    }
    if self.pronounce != 0 {
      try visitor.visitSingularInt32Field(value: self.pronounce, fieldNumber: 4)
    }
    if self.use != 0 {
      try visitor.visitSingularInt32Field(value: self.use, fieldNumber: 5)
    }
    if self.overall != 0 {
      try visitor.visitSingularInt32Field(value: self.overall, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vocnet_V1_MasteryBreakdown, rhs: Vocnet_V1_MasteryBreakdown) -> Bool {
    if lhs.listen != rhs.listen {return false}
    if lhs.read != rhs.read {return false}
    if lhs.spell != rhs.spell {return false}
    if lhs.pronounce != rhs.pronounce {return false}
    if lhs.use != rhs.use {return false}
    if lhs.overall != rhs.overall {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vocnet_V1_ReviewTiming: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewTiming"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}last_review_at\0\u{3}next_review_at\0\u{3}interval_days\0\u{3}fail_count\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._lastReviewAt) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._nextReviewAt) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.intervalDays) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.failCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._lastReviewAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._nextReviewAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.intervalDays != 0 {
      try visitor.visitSingularInt32Field(value: self.intervalDays, fieldNumber: 3)
    }
    if self.failCount != 0 {
      try visitor.visitSingularInt32Field(value: self.failCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vocnet_V1_ReviewTiming, rhs: Vocnet_V1_ReviewTiming) -> Bool {
    if lhs._lastReviewAt != rhs._lastReviewAt {return false}
    if lhs._nextReviewAt != rhs._nextReviewAt {return false}
    if lhs.intervalDays != rhs.intervalDays {return false}
    if lhs.failCount != rhs.failCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vocnet_V1_Sentence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sentence"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}text\0\u{1}source\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.source != .unspecified {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vocnet_V1_Sentence, rhs: Vocnet_V1_Sentence) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vocnet_V1_WordRelation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WordRelation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}word\0\u{3}relation_type\0\u{1}note\0\u{4}\u{11}created_by\0\u{3}created_at\0\u{3}updated_at\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.word) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.relationType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.note) }()
      case 20: try { try decoder.decodeSingularStringField(value: &self.createdBy) }()
      case 21: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 22: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 1)
    }
    if self.relationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.relationType, fieldNumber: 2)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 3)
    }
    if !self.createdBy.isEmpty {
      try visitor.visitSingularStringField(value: self.createdBy, fieldNumber: 20)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vocnet_V1_WordRelation, rhs: Vocnet_V1_WordRelation) -> Bool {
    if lhs.word != rhs.word {return false}
    if lhs.relationType != rhs.relationType {return false}
    if lhs.note != rhs.note {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
