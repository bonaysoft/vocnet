// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: learning/v1/learning_service.proto

package learningv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/eslsoft/vocnet/pkg/api/common/v1"
	v1 "github.com/eslsoft/vocnet/pkg/api/learning/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LearningServiceName is the fully-qualified name of the LearningService service.
	LearningServiceName = "learning.v1.LearningService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LearningServiceCollectWordProcedure is the fully-qualified name of the LearningService's
	// CollectWord RPC.
	LearningServiceCollectWordProcedure = "/learning.v1.LearningService/CollectWord"
	// LearningServiceUncollectWordProcedure is the fully-qualified name of the LearningService's
	// UncollectWord RPC.
	LearningServiceUncollectWordProcedure = "/learning.v1.LearningService/UncollectWord"
	// LearningServiceListLearnedWordsProcedure is the fully-qualified name of the LearningService's
	// ListLearnedWords RPC.
	LearningServiceListLearnedWordsProcedure = "/learning.v1.LearningService/ListLearnedWords"
	// LearningServiceUpdateMasteryProcedure is the fully-qualified name of the LearningService's
	// UpdateMastery RPC.
	LearningServiceUpdateMasteryProcedure = "/learning.v1.LearningService/UpdateMastery"
)

// LearningServiceClient is a client for the learning.v1.LearningService service.
type LearningServiceClient interface {
	// CollectWord collect a term to user's vocabulary (creates global word if needed)
	CollectWord(context.Context, *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.LearnedWord], error)
	// UncollectWord removes a word from user's vocabulary
	UncollectWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
	// List user's words with filtering and sorting
	ListLearnedWords(context.Context, *connect.Request[v1.ListLearnedWordsRequest]) (*connect.Response[v1.ListLearnedWordsResponse], error)
	// Update mastery level and learning status
	UpdateMastery(context.Context, *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedWord], error)
}

// NewLearningServiceClient constructs a client for the learning.v1.LearningService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLearningServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LearningServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	learningServiceMethods := v1.File_learning_v1_learning_service_proto.Services().ByName("LearningService").Methods()
	return &learningServiceClient{
		collectWord: connect.NewClient[v1.CollectWordRequest, v1.LearnedWord](
			httpClient,
			baseURL+LearningServiceCollectWordProcedure,
			connect.WithSchema(learningServiceMethods.ByName("CollectWord")),
			connect.WithClientOptions(opts...),
		),
		uncollectWord: connect.NewClient[v11.IDRequest, emptypb.Empty](
			httpClient,
			baseURL+LearningServiceUncollectWordProcedure,
			connect.WithSchema(learningServiceMethods.ByName("UncollectWord")),
			connect.WithClientOptions(opts...),
		),
		listLearnedWords: connect.NewClient[v1.ListLearnedWordsRequest, v1.ListLearnedWordsResponse](
			httpClient,
			baseURL+LearningServiceListLearnedWordsProcedure,
			connect.WithSchema(learningServiceMethods.ByName("ListLearnedWords")),
			connect.WithClientOptions(opts...),
		),
		updateMastery: connect.NewClient[v1.UpdateMasteryRequest, v1.LearnedWord](
			httpClient,
			baseURL+LearningServiceUpdateMasteryProcedure,
			connect.WithSchema(learningServiceMethods.ByName("UpdateMastery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// learningServiceClient implements LearningServiceClient.
type learningServiceClient struct {
	collectWord      *connect.Client[v1.CollectWordRequest, v1.LearnedWord]
	uncollectWord    *connect.Client[v11.IDRequest, emptypb.Empty]
	listLearnedWords *connect.Client[v1.ListLearnedWordsRequest, v1.ListLearnedWordsResponse]
	updateMastery    *connect.Client[v1.UpdateMasteryRequest, v1.LearnedWord]
}

// CollectWord calls learning.v1.LearningService.CollectWord.
func (c *learningServiceClient) CollectWord(ctx context.Context, req *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.LearnedWord], error) {
	return c.collectWord.CallUnary(ctx, req)
}

// UncollectWord calls learning.v1.LearningService.UncollectWord.
func (c *learningServiceClient) UncollectWord(ctx context.Context, req *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.uncollectWord.CallUnary(ctx, req)
}

// ListLearnedWords calls learning.v1.LearningService.ListLearnedWords.
func (c *learningServiceClient) ListLearnedWords(ctx context.Context, req *connect.Request[v1.ListLearnedWordsRequest]) (*connect.Response[v1.ListLearnedWordsResponse], error) {
	return c.listLearnedWords.CallUnary(ctx, req)
}

// UpdateMastery calls learning.v1.LearningService.UpdateMastery.
func (c *learningServiceClient) UpdateMastery(ctx context.Context, req *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedWord], error) {
	return c.updateMastery.CallUnary(ctx, req)
}

// LearningServiceHandler is an implementation of the learning.v1.LearningService service.
type LearningServiceHandler interface {
	// CollectWord collect a term to user's vocabulary (creates global word if needed)
	CollectWord(context.Context, *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.LearnedWord], error)
	// UncollectWord removes a word from user's vocabulary
	UncollectWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
	// List user's words with filtering and sorting
	ListLearnedWords(context.Context, *connect.Request[v1.ListLearnedWordsRequest]) (*connect.Response[v1.ListLearnedWordsResponse], error)
	// Update mastery level and learning status
	UpdateMastery(context.Context, *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedWord], error)
}

// NewLearningServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLearningServiceHandler(svc LearningServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	learningServiceMethods := v1.File_learning_v1_learning_service_proto.Services().ByName("LearningService").Methods()
	learningServiceCollectWordHandler := connect.NewUnaryHandler(
		LearningServiceCollectWordProcedure,
		svc.CollectWord,
		connect.WithSchema(learningServiceMethods.ByName("CollectWord")),
		connect.WithHandlerOptions(opts...),
	)
	learningServiceUncollectWordHandler := connect.NewUnaryHandler(
		LearningServiceUncollectWordProcedure,
		svc.UncollectWord,
		connect.WithSchema(learningServiceMethods.ByName("UncollectWord")),
		connect.WithHandlerOptions(opts...),
	)
	learningServiceListLearnedWordsHandler := connect.NewUnaryHandler(
		LearningServiceListLearnedWordsProcedure,
		svc.ListLearnedWords,
		connect.WithSchema(learningServiceMethods.ByName("ListLearnedWords")),
		connect.WithHandlerOptions(opts...),
	)
	learningServiceUpdateMasteryHandler := connect.NewUnaryHandler(
		LearningServiceUpdateMasteryProcedure,
		svc.UpdateMastery,
		connect.WithSchema(learningServiceMethods.ByName("UpdateMastery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/learning.v1.LearningService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LearningServiceCollectWordProcedure:
			learningServiceCollectWordHandler.ServeHTTP(w, r)
		case LearningServiceUncollectWordProcedure:
			learningServiceUncollectWordHandler.ServeHTTP(w, r)
		case LearningServiceListLearnedWordsProcedure:
			learningServiceListLearnedWordsHandler.ServeHTTP(w, r)
		case LearningServiceUpdateMasteryProcedure:
			learningServiceUpdateMasteryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLearningServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLearningServiceHandler struct{}

func (UnimplementedLearningServiceHandler) CollectWord(context.Context, *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.LearnedWord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.CollectWord is not implemented"))
}

func (UnimplementedLearningServiceHandler) UncollectWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.UncollectWord is not implemented"))
}

func (UnimplementedLearningServiceHandler) ListLearnedWords(context.Context, *connect.Request[v1.ListLearnedWordsRequest]) (*connect.Response[v1.ListLearnedWordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.ListLearnedWords is not implemented"))
}

func (UnimplementedLearningServiceHandler) UpdateMastery(context.Context, *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedWord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.UpdateMastery is not implemented"))
}
