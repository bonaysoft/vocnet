// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: learning/v1/learning_service.proto

package learningv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/eslsoft/vocnet/pkg/api/common/v1"
	v1 "github.com/eslsoft/vocnet/pkg/api/learning/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LearningServiceName is the fully-qualified name of the LearningService service.
	LearningServiceName = "learning.v1.LearningService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LearningServiceCollectLexemeProcedure is the fully-qualified name of the LearningService's
	// CollectLexeme RPC.
	LearningServiceCollectLexemeProcedure = "/learning.v1.LearningService/CollectLexeme"
	// LearningServiceUncollectLexemeProcedure is the fully-qualified name of the LearningService's
	// UncollectLexeme RPC.
	LearningServiceUncollectLexemeProcedure = "/learning.v1.LearningService/UncollectLexeme"
	// LearningServiceListLearnedLexemesProcedure is the fully-qualified name of the LearningService's
	// ListLearnedLexemes RPC.
	LearningServiceListLearnedLexemesProcedure = "/learning.v1.LearningService/ListLearnedLexemes"
	// LearningServiceUpdateMasteryProcedure is the fully-qualified name of the LearningService's
	// UpdateMastery RPC.
	LearningServiceUpdateMasteryProcedure = "/learning.v1.LearningService/UpdateMastery"
)

// LearningServiceClient is a client for the learning.v1.LearningService service.
type LearningServiceClient interface {
	// CollectLexeme collects a term to user's vocabulary (creates global lexeme if needed)
	CollectLexeme(context.Context, *connect.Request[v1.CollectLexemeRequest]) (*connect.Response[v1.LearnedLexeme], error)
	// UncollectLexeme removes a lexeme from user's vocabulary
	UncollectLexeme(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
	// List user's lexemes with filtering and sorting
	ListLearnedLexemes(context.Context, *connect.Request[v1.ListLearnedLexemesRequest]) (*connect.Response[v1.ListLearnedLexemesResponse], error)
	// Update mastery level and learning status
	UpdateMastery(context.Context, *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedLexeme], error)
}

// NewLearningServiceClient constructs a client for the learning.v1.LearningService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLearningServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LearningServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	learningServiceMethods := v1.File_learning_v1_learning_service_proto.Services().ByName("LearningService").Methods()
	return &learningServiceClient{
		collectLexeme: connect.NewClient[v1.CollectLexemeRequest, v1.LearnedLexeme](
			httpClient,
			baseURL+LearningServiceCollectLexemeProcedure,
			connect.WithSchema(learningServiceMethods.ByName("CollectLexeme")),
			connect.WithClientOptions(opts...),
		),
		uncollectLexeme: connect.NewClient[v11.IDRequest, emptypb.Empty](
			httpClient,
			baseURL+LearningServiceUncollectLexemeProcedure,
			connect.WithSchema(learningServiceMethods.ByName("UncollectLexeme")),
			connect.WithClientOptions(opts...),
		),
		listLearnedLexemes: connect.NewClient[v1.ListLearnedLexemesRequest, v1.ListLearnedLexemesResponse](
			httpClient,
			baseURL+LearningServiceListLearnedLexemesProcedure,
			connect.WithSchema(learningServiceMethods.ByName("ListLearnedLexemes")),
			connect.WithClientOptions(opts...),
		),
		updateMastery: connect.NewClient[v1.UpdateMasteryRequest, v1.LearnedLexeme](
			httpClient,
			baseURL+LearningServiceUpdateMasteryProcedure,
			connect.WithSchema(learningServiceMethods.ByName("UpdateMastery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// learningServiceClient implements LearningServiceClient.
type learningServiceClient struct {
	collectLexeme      *connect.Client[v1.CollectLexemeRequest, v1.LearnedLexeme]
	uncollectLexeme    *connect.Client[v11.IDRequest, emptypb.Empty]
	listLearnedLexemes *connect.Client[v1.ListLearnedLexemesRequest, v1.ListLearnedLexemesResponse]
	updateMastery      *connect.Client[v1.UpdateMasteryRequest, v1.LearnedLexeme]
}

// CollectLexeme calls learning.v1.LearningService.CollectLexeme.
func (c *learningServiceClient) CollectLexeme(ctx context.Context, req *connect.Request[v1.CollectLexemeRequest]) (*connect.Response[v1.LearnedLexeme], error) {
	return c.collectLexeme.CallUnary(ctx, req)
}

// UncollectLexeme calls learning.v1.LearningService.UncollectLexeme.
func (c *learningServiceClient) UncollectLexeme(ctx context.Context, req *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.uncollectLexeme.CallUnary(ctx, req)
}

// ListLearnedLexemes calls learning.v1.LearningService.ListLearnedLexemes.
func (c *learningServiceClient) ListLearnedLexemes(ctx context.Context, req *connect.Request[v1.ListLearnedLexemesRequest]) (*connect.Response[v1.ListLearnedLexemesResponse], error) {
	return c.listLearnedLexemes.CallUnary(ctx, req)
}

// UpdateMastery calls learning.v1.LearningService.UpdateMastery.
func (c *learningServiceClient) UpdateMastery(ctx context.Context, req *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedLexeme], error) {
	return c.updateMastery.CallUnary(ctx, req)
}

// LearningServiceHandler is an implementation of the learning.v1.LearningService service.
type LearningServiceHandler interface {
	// CollectLexeme collects a term to user's vocabulary (creates global lexeme if needed)
	CollectLexeme(context.Context, *connect.Request[v1.CollectLexemeRequest]) (*connect.Response[v1.LearnedLexeme], error)
	// UncollectLexeme removes a lexeme from user's vocabulary
	UncollectLexeme(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
	// List user's lexemes with filtering and sorting
	ListLearnedLexemes(context.Context, *connect.Request[v1.ListLearnedLexemesRequest]) (*connect.Response[v1.ListLearnedLexemesResponse], error)
	// Update mastery level and learning status
	UpdateMastery(context.Context, *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedLexeme], error)
}

// NewLearningServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLearningServiceHandler(svc LearningServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	learningServiceMethods := v1.File_learning_v1_learning_service_proto.Services().ByName("LearningService").Methods()
	learningServiceCollectLexemeHandler := connect.NewUnaryHandler(
		LearningServiceCollectLexemeProcedure,
		svc.CollectLexeme,
		connect.WithSchema(learningServiceMethods.ByName("CollectLexeme")),
		connect.WithHandlerOptions(opts...),
	)
	learningServiceUncollectLexemeHandler := connect.NewUnaryHandler(
		LearningServiceUncollectLexemeProcedure,
		svc.UncollectLexeme,
		connect.WithSchema(learningServiceMethods.ByName("UncollectLexeme")),
		connect.WithHandlerOptions(opts...),
	)
	learningServiceListLearnedLexemesHandler := connect.NewUnaryHandler(
		LearningServiceListLearnedLexemesProcedure,
		svc.ListLearnedLexemes,
		connect.WithSchema(learningServiceMethods.ByName("ListLearnedLexemes")),
		connect.WithHandlerOptions(opts...),
	)
	learningServiceUpdateMasteryHandler := connect.NewUnaryHandler(
		LearningServiceUpdateMasteryProcedure,
		svc.UpdateMastery,
		connect.WithSchema(learningServiceMethods.ByName("UpdateMastery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/learning.v1.LearningService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LearningServiceCollectLexemeProcedure:
			learningServiceCollectLexemeHandler.ServeHTTP(w, r)
		case LearningServiceUncollectLexemeProcedure:
			learningServiceUncollectLexemeHandler.ServeHTTP(w, r)
		case LearningServiceListLearnedLexemesProcedure:
			learningServiceListLearnedLexemesHandler.ServeHTTP(w, r)
		case LearningServiceUpdateMasteryProcedure:
			learningServiceUpdateMasteryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLearningServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLearningServiceHandler struct{}

func (UnimplementedLearningServiceHandler) CollectLexeme(context.Context, *connect.Request[v1.CollectLexemeRequest]) (*connect.Response[v1.LearnedLexeme], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.CollectLexeme is not implemented"))
}

func (UnimplementedLearningServiceHandler) UncollectLexeme(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.UncollectLexeme is not implemented"))
}

func (UnimplementedLearningServiceHandler) ListLearnedLexemes(context.Context, *connect.Request[v1.ListLearnedLexemesRequest]) (*connect.Response[v1.ListLearnedLexemesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.ListLearnedLexemes is not implemented"))
}

func (UnimplementedLearningServiceHandler) UpdateMastery(context.Context, *connect.Request[v1.UpdateMasteryRequest]) (*connect.Response[v1.LearnedLexeme], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.UpdateMastery is not implemented"))
}
