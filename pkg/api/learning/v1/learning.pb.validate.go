// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: learning/v1/learning.proto

package learningv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/eslsoft/vocnet/pkg/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Language(0)
)

// Validate checks the field values on LearnedWord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearnedWord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearnedWord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LearnedWordMultiError, or
// nil if none found.
func (m *LearnedWord) ValidateAll() error {
	return m.validate(true)
}

func (m *LearnedWord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearnedWordMultiError(errors)
	}

	return nil
}

// LearnedWordMultiError is an error wrapping multiple validation errors
// returned by LearnedWord.ValidateAll() if the designated constraints aren't met.
type LearnedWordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearnedWordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearnedWordMultiError) AllErrors() []error { return m }

// LearnedWordValidationError is the validation error returned by
// LearnedWord.Validate if the designated constraints aren't met.
type LearnedWordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearnedWordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearnedWordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearnedWordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearnedWordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearnedWordValidationError) ErrorName() string { return "LearnedWordValidationError" }

// Error satisfies the builtin error interface
func (e LearnedWordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearnedWord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearnedWordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearnedWordValidationError{}

// Validate checks the field values on LearnedWordSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LearnedWordSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearnedWordSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearnedWordSpecMultiError, or nil if none found.
func (m *LearnedWordSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *LearnedWordSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Term

	// no validation rules for Language

	// no validation rules for MasteryLevel

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearnedWordSpecValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearnedWordSpecValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearnedWordSpecValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSentences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearnedWordSpecValidationError{
						field:  fmt.Sprintf("Sentences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearnedWordSpecValidationError{
						field:  fmt.Sprintf("Sentences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearnedWordSpecValidationError{
					field:  fmt.Sprintf("Sentences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearnedWordSpecMultiError(errors)
	}

	return nil
}

// LearnedWordSpecMultiError is an error wrapping multiple validation errors
// returned by LearnedWordSpec.ValidateAll() if the designated constraints
// aren't met.
type LearnedWordSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearnedWordSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearnedWordSpecMultiError) AllErrors() []error { return m }

// LearnedWordSpecValidationError is the validation error returned by
// LearnedWordSpec.Validate if the designated constraints aren't met.
type LearnedWordSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearnedWordSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearnedWordSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearnedWordSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearnedWordSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearnedWordSpecValidationError) ErrorName() string { return "LearnedWordSpecValidationError" }

// Error satisfies the builtin error interface
func (e LearnedWordSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearnedWordSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearnedWordSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearnedWordSpecValidationError{}

// Validate checks the field values on LearnedWordStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LearnedWordStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearnedWordStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearnedWordStatusMultiError, or nil if none found.
func (m *LearnedWordStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LearnedWordStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMastery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "Mastery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "Mastery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMastery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordStatusValidationError{
				field:  "Mastery",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReviewTiming()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "ReviewTiming",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "ReviewTiming",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReviewTiming()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordStatusValidationError{
				field:  "ReviewTiming",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for QueryCount

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordStatusValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordStatusValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordStatusValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearnedWordStatusMultiError(errors)
	}

	return nil
}

// LearnedWordStatusMultiError is an error wrapping multiple validation errors
// returned by LearnedWordStatus.ValidateAll() if the designated constraints
// aren't met.
type LearnedWordStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearnedWordStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearnedWordStatusMultiError) AllErrors() []error { return m }

// LearnedWordStatusValidationError is the validation error returned by
// LearnedWordStatus.Validate if the designated constraints aren't met.
type LearnedWordStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearnedWordStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearnedWordStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearnedWordStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearnedWordStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearnedWordStatusValidationError) ErrorName() string {
	return "LearnedWordStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LearnedWordStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearnedWordStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearnedWordStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearnedWordStatusValidationError{}

// Validate checks the field values on MasteryBreakdown with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MasteryBreakdown) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MasteryBreakdown with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MasteryBreakdownMultiError, or nil if none found.
func (m *MasteryBreakdown) ValidateAll() error {
	return m.validate(true)
}

func (m *MasteryBreakdown) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Listen

	// no validation rules for Read

	// no validation rules for Spell

	// no validation rules for Pronounce

	// no validation rules for Overall

	if len(errors) > 0 {
		return MasteryBreakdownMultiError(errors)
	}

	return nil
}

// MasteryBreakdownMultiError is an error wrapping multiple validation errors
// returned by MasteryBreakdown.ValidateAll() if the designated constraints
// aren't met.
type MasteryBreakdownMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MasteryBreakdownMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MasteryBreakdownMultiError) AllErrors() []error { return m }

// MasteryBreakdownValidationError is the validation error returned by
// MasteryBreakdown.Validate if the designated constraints aren't met.
type MasteryBreakdownValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasteryBreakdownValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasteryBreakdownValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasteryBreakdownValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasteryBreakdownValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasteryBreakdownValidationError) ErrorName() string { return "MasteryBreakdownValidationError" }

// Error satisfies the builtin error interface
func (e MasteryBreakdownValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasteryBreakdown.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasteryBreakdownValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasteryBreakdownValidationError{}

// Validate checks the field values on ReviewTiming with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewTiming) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewTiming with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewTimingMultiError, or
// nil if none found.
func (m *ReviewTiming) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewTiming) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastReviewAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewTimingValidationError{
					field:  "LastReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewTimingValidationError{
					field:  "LastReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastReviewAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewTimingValidationError{
				field:  "LastReviewAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNextReviewAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewTimingValidationError{
					field:  "NextReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewTimingValidationError{
					field:  "NextReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextReviewAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewTimingValidationError{
				field:  "NextReviewAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntervalDays

	// no validation rules for FailCount

	if len(errors) > 0 {
		return ReviewTimingMultiError(errors)
	}

	return nil
}

// ReviewTimingMultiError is an error wrapping multiple validation errors
// returned by ReviewTiming.ValidateAll() if the designated constraints aren't met.
type ReviewTimingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewTimingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewTimingMultiError) AllErrors() []error { return m }

// ReviewTimingValidationError is the validation error returned by
// ReviewTiming.Validate if the designated constraints aren't met.
type ReviewTimingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTimingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTimingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTimingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTimingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTimingValidationError) ErrorName() string { return "ReviewTimingValidationError" }

// Error satisfies the builtin error interface
func (e ReviewTimingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTiming.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTimingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTimingValidationError{}

// Validate checks the field values on LearnedWordRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LearnedWordRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearnedWordRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearnedWordRelationMultiError, or nil if none found.
func (m *LearnedWordRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *LearnedWordRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Word

	// no validation rules for RelationType

	// no validation rules for Note

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordRelationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordRelationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordRelationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearnedWordRelationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearnedWordRelationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearnedWordRelationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearnedWordRelationMultiError(errors)
	}

	return nil
}

// LearnedWordRelationMultiError is an error wrapping multiple validation
// errors returned by LearnedWordRelation.ValidateAll() if the designated
// constraints aren't met.
type LearnedWordRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearnedWordRelationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearnedWordRelationMultiError) AllErrors() []error { return m }

// LearnedWordRelationValidationError is the validation error returned by
// LearnedWordRelation.Validate if the designated constraints aren't met.
type LearnedWordRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearnedWordRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearnedWordRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearnedWordRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearnedWordRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearnedWordRelationValidationError) ErrorName() string {
	return "LearnedWordRelationValidationError"
}

// Error satisfies the builtin error interface
func (e LearnedWordRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearnedWordRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearnedWordRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearnedWordRelationValidationError{}
