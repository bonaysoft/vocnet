// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dict/v1/word.proto

package dictv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/eslsoft/vocnet/pkg/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Language(0)
)

// Validate checks the field values on Word with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Word) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Word with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WordMultiError, or nil if none found.
func (m *Word) ValidateAll() error {
	return m.validate(true)
}

func (m *Word) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	// no validation rules for Language

	// no validation rules for WordType

	// no validation rules for Lemma

	for idx, item := range m.GetPhonetics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Phonetics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Phonetics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Phonetics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Definitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPhrases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Phrases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Phrases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Phrases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSentences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Sentences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Sentences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Sentences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Forms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Forms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WordMultiError(errors)
	}

	return nil
}

// WordMultiError is an error wrapping multiple validation errors returned by
// Word.ValidateAll() if the designated constraints aren't met.
type WordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordMultiError) AllErrors() []error { return m }

// WordValidationError is the validation error returned by Word.Validate if the
// designated constraints aren't met.
type WordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordValidationError) ErrorName() string { return "WordValidationError" }

// Error satisfies the builtin error interface
func (e WordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordValidationError{}

// Validate checks the field values on Phonetic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Phonetic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Phonetic with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhoneticMultiError, or nil
// if none found.
func (m *Phonetic) ValidateAll() error {
	return m.validate(true)
}

func (m *Phonetic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ipa

	// no validation rules for Dialect

	if len(errors) > 0 {
		return PhoneticMultiError(errors)
	}

	return nil
}

// PhoneticMultiError is an error wrapping multiple validation errors returned
// by Phonetic.ValidateAll() if the designated constraints aren't met.
type PhoneticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneticMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneticMultiError) AllErrors() []error { return m }

// PhoneticValidationError is the validation error returned by
// Phonetic.Validate if the designated constraints aren't met.
type PhoneticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneticValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneticValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneticValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneticValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneticValidationError) ErrorName() string { return "PhoneticValidationError" }

// Error satisfies the builtin error interface
func (e PhoneticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhonetic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneticValidationError{}

// Validate checks the field values on Definition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Definition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Definition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DefinitionMultiError, or
// nil if none found.
func (m *Definition) ValidateAll() error {
	return m.validate(true)
}

func (m *Definition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pos

	// no validation rules for Text

	// no validation rules for Language

	if len(errors) > 0 {
		return DefinitionMultiError(errors)
	}

	return nil
}

// DefinitionMultiError is an error wrapping multiple validation errors
// returned by Definition.ValidateAll() if the designated constraints aren't met.
type DefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefinitionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefinitionMultiError) AllErrors() []error { return m }

// DefinitionValidationError is the validation error returned by
// Definition.Validate if the designated constraints aren't met.
type DefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefinitionValidationError) ErrorName() string { return "DefinitionValidationError" }

// Error satisfies the builtin error interface
func (e DefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefinitionValidationError{}

// Validate checks the field values on WordFormRef with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordFormRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordFormRef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordFormRefMultiError, or
// nil if none found.
func (m *WordFormRef) ValidateAll() error {
	return m.validate(true)
}

func (m *WordFormRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for WordType

	if len(errors) > 0 {
		return WordFormRefMultiError(errors)
	}

	return nil
}

// WordFormRefMultiError is an error wrapping multiple validation errors
// returned by WordFormRef.ValidateAll() if the designated constraints aren't met.
type WordFormRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordFormRefMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordFormRefMultiError) AllErrors() []error { return m }

// WordFormRefValidationError is the validation error returned by
// WordFormRef.Validate if the designated constraints aren't met.
type WordFormRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordFormRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordFormRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordFormRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordFormRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordFormRefValidationError) ErrorName() string { return "WordFormRefValidationError" }

// Error satisfies the builtin error interface
func (e WordFormRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordFormRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordFormRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordFormRefValidationError{}

// Validate checks the field values on WordRelation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordRelation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordRelationMultiError, or
// nil if none found.
func (m *WordRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *WordRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Word

	// no validation rules for RelationType

	if len(errors) > 0 {
		return WordRelationMultiError(errors)
	}

	return nil
}

// WordRelationMultiError is an error wrapping multiple validation errors
// returned by WordRelation.ValidateAll() if the designated constraints aren't met.
type WordRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordRelationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordRelationMultiError) AllErrors() []error { return m }

// WordRelationValidationError is the validation error returned by
// WordRelation.Validate if the designated constraints aren't met.
type WordRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordRelationValidationError) ErrorName() string { return "WordRelationValidationError" }

// Error satisfies the builtin error interface
func (e WordRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordRelationValidationError{}

// Validate checks the field values on Sentence with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sentence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sentence with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SentenceMultiError, or nil
// if none found.
func (m *Sentence) ValidateAll() error {
	return m.validate(true)
}

func (m *Sentence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Source

	// no validation rules for SourceRef

	if len(errors) > 0 {
		return SentenceMultiError(errors)
	}

	return nil
}

// SentenceMultiError is an error wrapping multiple validation errors returned
// by Sentence.ValidateAll() if the designated constraints aren't met.
type SentenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SentenceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SentenceMultiError) AllErrors() []error { return m }

// SentenceValidationError is the validation error returned by
// Sentence.Validate if the designated constraints aren't met.
type SentenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SentenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SentenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SentenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SentenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SentenceValidationError) ErrorName() string { return "SentenceValidationError" }

// Error satisfies the builtin error interface
func (e SentenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSentence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SentenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SentenceValidationError{}

// Validate checks the field values on CreateWordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateWordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWordRequestMultiError, or nil if none found.
func (m *CreateWordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWord() == nil {
		err := CreateWordRequestValidationError{
			field:  "Word",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWordRequestValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWordRequestValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWordRequestValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWordRequestMultiError(errors)
	}

	return nil
}

// CreateWordRequestMultiError is an error wrapping multiple validation errors
// returned by CreateWordRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateWordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWordRequestMultiError) AllErrors() []error { return m }

// CreateWordRequestValidationError is the validation error returned by
// CreateWordRequest.Validate if the designated constraints aren't met.
type CreateWordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWordRequestValidationError) ErrorName() string {
	return "CreateWordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWordRequestValidationError{}

// Validate checks the field values on ListWordsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWordsRequestMultiError, or nil if none found.
func (m *ListWordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWordsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWordsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWordsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Filter

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return ListWordsRequestMultiError(errors)
	}

	return nil
}

// ListWordsRequestMultiError is an error wrapping multiple validation errors
// returned by ListWordsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWordsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWordsRequestMultiError) AllErrors() []error { return m }

// ListWordsRequestValidationError is the validation error returned by
// ListWordsRequest.Validate if the designated constraints aren't met.
type ListWordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordsRequestValidationError) ErrorName() string { return "ListWordsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListWordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordsRequestValidationError{}

// Validate checks the field values on ListWordsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWordsResponseMultiError, or nil if none found.
func (m *ListWordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWordsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWordsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWordsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWordsResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWordsResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWordsResponseValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWordsResponseMultiError(errors)
	}

	return nil
}

// ListWordsResponseMultiError is an error wrapping multiple validation errors
// returned by ListWordsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListWordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWordsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWordsResponseMultiError) AllErrors() []error { return m }

// ListWordsResponseValidationError is the validation error returned by
// ListWordsResponse.Validate if the designated constraints aren't met.
type ListWordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordsResponseValidationError) ErrorName() string {
	return "ListWordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordsResponseValidationError{}

// Validate checks the field values on LookupWordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LookupWordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupWordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupWordRequestMultiError, or nil if none found.
func (m *LookupWordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupWordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWord()) < 1 {
		err := LookupWordRequestValidationError{
			field:  "Word",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Language

	if len(errors) > 0 {
		return LookupWordRequestMultiError(errors)
	}

	return nil
}

// LookupWordRequestMultiError is an error wrapping multiple validation errors
// returned by LookupWordRequest.ValidateAll() if the designated constraints
// aren't met.
type LookupWordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupWordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupWordRequestMultiError) AllErrors() []error { return m }

// LookupWordRequestValidationError is the validation error returned by
// LookupWordRequest.Validate if the designated constraints aren't met.
type LookupWordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupWordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupWordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupWordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupWordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupWordRequestValidationError) ErrorName() string {
	return "LookupWordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookupWordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupWordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupWordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupWordRequestValidationError{}
