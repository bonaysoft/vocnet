// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dict/v1/word.proto

package dictv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/eslsoft/vocnet/pkg/api/common/v1"
	v1 "github.com/eslsoft/vocnet/pkg/api/dict/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WordServiceName is the fully-qualified name of the WordService service.
	WordServiceName = "dict.v1.WordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WordServiceCreateWordProcedure is the fully-qualified name of the WordService's CreateWord RPC.
	WordServiceCreateWordProcedure = "/dict.v1.WordService/CreateWord"
	// WordServiceUpdateWordProcedure is the fully-qualified name of the WordService's UpdateWord RPC.
	WordServiceUpdateWordProcedure = "/dict.v1.WordService/UpdateWord"
	// WordServiceGetWordProcedure is the fully-qualified name of the WordService's GetWord RPC.
	WordServiceGetWordProcedure = "/dict.v1.WordService/GetWord"
	// WordServiceListWordsProcedure is the fully-qualified name of the WordService's ListWords RPC.
	WordServiceListWordsProcedure = "/dict.v1.WordService/ListWords"
	// WordServiceLookupWordProcedure is the fully-qualified name of the WordService's LookupWord RPC.
	WordServiceLookupWordProcedure = "/dict.v1.WordService/LookupWord"
	// WordServiceDeleteWordProcedure is the fully-qualified name of the WordService's DeleteWord RPC.
	WordServiceDeleteWordProcedure = "/dict.v1.WordService/DeleteWord"
)

// WordServiceClient is a client for the dict.v1.WordService service.
type WordServiceClient interface {
	// Create a new wordabulary entry (admin/system use)
	CreateWord(context.Context, *connect.Request[v1.CreateWordRequest]) (*connect.Response[v1.Word], error)
	// Update a wordabulary entry by id (admin/system use)
	UpdateWord(context.Context, *connect.Request[v1.Word]) (*connect.Response[v1.Word], error)
	// Get wordabulary entry details by id or composite key
	GetWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[v1.Word], error)
	// List wordabulary entries with filtering and pagination
	ListWords(context.Context, *connect.Request[v1.ListWordsRequest]) (*connect.Response[v1.ListWordsResponse], error)
	// Lookup wordabulary entry by exact text match in specified language
	LookupWord(context.Context, *connect.Request[v1.LookupWordRequest]) (*connect.Response[v1.Word], error)
	// Delete a wordabulary entry by id (admin/system use)
	DeleteWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewWordServiceClient constructs a client for the dict.v1.WordService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	wordServiceMethods := v1.File_dict_v1_word_proto.Services().ByName("WordService").Methods()
	return &wordServiceClient{
		createWord: connect.NewClient[v1.CreateWordRequest, v1.Word](
			httpClient,
			baseURL+WordServiceCreateWordProcedure,
			connect.WithSchema(wordServiceMethods.ByName("CreateWord")),
			connect.WithClientOptions(opts...),
		),
		updateWord: connect.NewClient[v1.Word, v1.Word](
			httpClient,
			baseURL+WordServiceUpdateWordProcedure,
			connect.WithSchema(wordServiceMethods.ByName("UpdateWord")),
			connect.WithClientOptions(opts...),
		),
		getWord: connect.NewClient[v11.IDRequest, v1.Word](
			httpClient,
			baseURL+WordServiceGetWordProcedure,
			connect.WithSchema(wordServiceMethods.ByName("GetWord")),
			connect.WithClientOptions(opts...),
		),
		listWords: connect.NewClient[v1.ListWordsRequest, v1.ListWordsResponse](
			httpClient,
			baseURL+WordServiceListWordsProcedure,
			connect.WithSchema(wordServiceMethods.ByName("ListWords")),
			connect.WithClientOptions(opts...),
		),
		lookupWord: connect.NewClient[v1.LookupWordRequest, v1.Word](
			httpClient,
			baseURL+WordServiceLookupWordProcedure,
			connect.WithSchema(wordServiceMethods.ByName("LookupWord")),
			connect.WithClientOptions(opts...),
		),
		deleteWord: connect.NewClient[v11.IDRequest, emptypb.Empty](
			httpClient,
			baseURL+WordServiceDeleteWordProcedure,
			connect.WithSchema(wordServiceMethods.ByName("DeleteWord")),
			connect.WithClientOptions(opts...),
		),
	}
}

// wordServiceClient implements WordServiceClient.
type wordServiceClient struct {
	createWord *connect.Client[v1.CreateWordRequest, v1.Word]
	updateWord *connect.Client[v1.Word, v1.Word]
	getWord    *connect.Client[v11.IDRequest, v1.Word]
	listWords  *connect.Client[v1.ListWordsRequest, v1.ListWordsResponse]
	lookupWord *connect.Client[v1.LookupWordRequest, v1.Word]
	deleteWord *connect.Client[v11.IDRequest, emptypb.Empty]
}

// CreateWord calls dict.v1.WordService.CreateWord.
func (c *wordServiceClient) CreateWord(ctx context.Context, req *connect.Request[v1.CreateWordRequest]) (*connect.Response[v1.Word], error) {
	return c.createWord.CallUnary(ctx, req)
}

// UpdateWord calls dict.v1.WordService.UpdateWord.
func (c *wordServiceClient) UpdateWord(ctx context.Context, req *connect.Request[v1.Word]) (*connect.Response[v1.Word], error) {
	return c.updateWord.CallUnary(ctx, req)
}

// GetWord calls dict.v1.WordService.GetWord.
func (c *wordServiceClient) GetWord(ctx context.Context, req *connect.Request[v11.IDRequest]) (*connect.Response[v1.Word], error) {
	return c.getWord.CallUnary(ctx, req)
}

// ListWords calls dict.v1.WordService.ListWords.
func (c *wordServiceClient) ListWords(ctx context.Context, req *connect.Request[v1.ListWordsRequest]) (*connect.Response[v1.ListWordsResponse], error) {
	return c.listWords.CallUnary(ctx, req)
}

// LookupWord calls dict.v1.WordService.LookupWord.
func (c *wordServiceClient) LookupWord(ctx context.Context, req *connect.Request[v1.LookupWordRequest]) (*connect.Response[v1.Word], error) {
	return c.lookupWord.CallUnary(ctx, req)
}

// DeleteWord calls dict.v1.WordService.DeleteWord.
func (c *wordServiceClient) DeleteWord(ctx context.Context, req *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteWord.CallUnary(ctx, req)
}

// WordServiceHandler is an implementation of the dict.v1.WordService service.
type WordServiceHandler interface {
	// Create a new wordabulary entry (admin/system use)
	CreateWord(context.Context, *connect.Request[v1.CreateWordRequest]) (*connect.Response[v1.Word], error)
	// Update a wordabulary entry by id (admin/system use)
	UpdateWord(context.Context, *connect.Request[v1.Word]) (*connect.Response[v1.Word], error)
	// Get wordabulary entry details by id or composite key
	GetWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[v1.Word], error)
	// List wordabulary entries with filtering and pagination
	ListWords(context.Context, *connect.Request[v1.ListWordsRequest]) (*connect.Response[v1.ListWordsResponse], error)
	// Lookup wordabulary entry by exact text match in specified language
	LookupWord(context.Context, *connect.Request[v1.LookupWordRequest]) (*connect.Response[v1.Word], error)
	// Delete a wordabulary entry by id (admin/system use)
	DeleteWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewWordServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWordServiceHandler(svc WordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wordServiceMethods := v1.File_dict_v1_word_proto.Services().ByName("WordService").Methods()
	wordServiceCreateWordHandler := connect.NewUnaryHandler(
		WordServiceCreateWordProcedure,
		svc.CreateWord,
		connect.WithSchema(wordServiceMethods.ByName("CreateWord")),
		connect.WithHandlerOptions(opts...),
	)
	wordServiceUpdateWordHandler := connect.NewUnaryHandler(
		WordServiceUpdateWordProcedure,
		svc.UpdateWord,
		connect.WithSchema(wordServiceMethods.ByName("UpdateWord")),
		connect.WithHandlerOptions(opts...),
	)
	wordServiceGetWordHandler := connect.NewUnaryHandler(
		WordServiceGetWordProcedure,
		svc.GetWord,
		connect.WithSchema(wordServiceMethods.ByName("GetWord")),
		connect.WithHandlerOptions(opts...),
	)
	wordServiceListWordsHandler := connect.NewUnaryHandler(
		WordServiceListWordsProcedure,
		svc.ListWords,
		connect.WithSchema(wordServiceMethods.ByName("ListWords")),
		connect.WithHandlerOptions(opts...),
	)
	wordServiceLookupWordHandler := connect.NewUnaryHandler(
		WordServiceLookupWordProcedure,
		svc.LookupWord,
		connect.WithSchema(wordServiceMethods.ByName("LookupWord")),
		connect.WithHandlerOptions(opts...),
	)
	wordServiceDeleteWordHandler := connect.NewUnaryHandler(
		WordServiceDeleteWordProcedure,
		svc.DeleteWord,
		connect.WithSchema(wordServiceMethods.ByName("DeleteWord")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dict.v1.WordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WordServiceCreateWordProcedure:
			wordServiceCreateWordHandler.ServeHTTP(w, r)
		case WordServiceUpdateWordProcedure:
			wordServiceUpdateWordHandler.ServeHTTP(w, r)
		case WordServiceGetWordProcedure:
			wordServiceGetWordHandler.ServeHTTP(w, r)
		case WordServiceListWordsProcedure:
			wordServiceListWordsHandler.ServeHTTP(w, r)
		case WordServiceLookupWordProcedure:
			wordServiceLookupWordHandler.ServeHTTP(w, r)
		case WordServiceDeleteWordProcedure:
			wordServiceDeleteWordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWordServiceHandler struct{}

func (UnimplementedWordServiceHandler) CreateWord(context.Context, *connect.Request[v1.CreateWordRequest]) (*connect.Response[v1.Word], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dict.v1.WordService.CreateWord is not implemented"))
}

func (UnimplementedWordServiceHandler) UpdateWord(context.Context, *connect.Request[v1.Word]) (*connect.Response[v1.Word], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dict.v1.WordService.UpdateWord is not implemented"))
}

func (UnimplementedWordServiceHandler) GetWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[v1.Word], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dict.v1.WordService.GetWord is not implemented"))
}

func (UnimplementedWordServiceHandler) ListWords(context.Context, *connect.Request[v1.ListWordsRequest]) (*connect.Response[v1.ListWordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dict.v1.WordService.ListWords is not implemented"))
}

func (UnimplementedWordServiceHandler) LookupWord(context.Context, *connect.Request[v1.LookupWordRequest]) (*connect.Response[v1.Word], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dict.v1.WordService.LookupWord is not implemented"))
}

func (UnimplementedWordServiceHandler) DeleteWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dict.v1.WordService.DeleteWord is not implemented"))
}
