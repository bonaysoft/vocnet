// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vocnet/v1/vocnet_service.proto

package vocnetv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CollectWordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectWordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectWordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectWordRequestMultiError, or nil if none found.
func (m *CollectWordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectWordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectWordRequestValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectWordRequestValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectWordRequestValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectWordRequestMultiError(errors)
	}

	return nil
}

// CollectWordRequestMultiError is an error wrapping multiple validation errors
// returned by CollectWordRequest.ValidateAll() if the designated constraints
// aren't met.
type CollectWordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectWordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectWordRequestMultiError) AllErrors() []error { return m }

// CollectWordRequestValidationError is the validation error returned by
// CollectWordRequest.Validate if the designated constraints aren't met.
type CollectWordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectWordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectWordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectWordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectWordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectWordRequestValidationError) ErrorName() string {
	return "CollectWordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectWordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectWordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectWordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectWordRequestValidationError{}

// Validate checks the field values on UpdateUserWordMasteryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserWordMasteryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserWordMasteryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserWordMasteryRequestMultiError, or nil if none found.
func (m *UpdateUserWordMasteryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserWordMasteryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWordId() <= 0 {
		err := UpdateUserWordMasteryRequestValidationError{
			field:  "WordId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMastery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserWordMasteryRequestValidationError{
					field:  "Mastery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserWordMasteryRequestValidationError{
					field:  "Mastery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMastery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserWordMasteryRequestValidationError{
				field:  "Mastery",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Notes

	if len(errors) > 0 {
		return UpdateUserWordMasteryRequestMultiError(errors)
	}

	return nil
}

// UpdateUserWordMasteryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserWordMasteryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserWordMasteryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserWordMasteryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserWordMasteryRequestMultiError) AllErrors() []error { return m }

// UpdateUserWordMasteryRequestValidationError is the validation error returned
// by UpdateUserWordMasteryRequest.Validate if the designated constraints
// aren't met.
type UpdateUserWordMasteryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserWordMasteryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserWordMasteryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserWordMasteryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserWordMasteryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserWordMasteryRequestValidationError) ErrorName() string {
	return "UpdateUserWordMasteryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserWordMasteryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserWordMasteryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserWordMasteryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserWordMasteryRequestValidationError{}

// Validate checks the field values on ListUserWordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserWordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserWordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserWordsRequestMultiError, or nil if none found.
func (m *ListUserWordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserWordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserWordsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserWordsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserWordsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Filter

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return ListUserWordsRequestMultiError(errors)
	}

	return nil
}

// ListUserWordsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserWordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserWordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserWordsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserWordsRequestMultiError) AllErrors() []error { return m }

// ListUserWordsRequestValidationError is the validation error returned by
// ListUserWordsRequest.Validate if the designated constraints aren't met.
type ListUserWordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserWordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserWordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserWordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserWordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserWordsRequestValidationError) ErrorName() string {
	return "ListUserWordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserWordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserWordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserWordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserWordsRequestValidationError{}

// Validate checks the field values on ListUserWordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserWordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserWordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserWordsResponseMultiError, or nil if none found.
func (m *ListUserWordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserWordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserWordsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserWordsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserWordsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUserWords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserWordsResponseValidationError{
						field:  fmt.Sprintf("UserWords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserWordsResponseValidationError{
						field:  fmt.Sprintf("UserWords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserWordsResponseValidationError{
					field:  fmt.Sprintf("UserWords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserWordsResponseMultiError(errors)
	}

	return nil
}

// ListUserWordsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserWordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserWordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserWordsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserWordsResponseMultiError) AllErrors() []error { return m }

// ListUserWordsResponseValidationError is the validation error returned by
// ListUserWordsResponse.Validate if the designated constraints aren't met.
type ListUserWordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserWordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserWordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserWordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserWordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserWordsResponseValidationError) ErrorName() string {
	return "ListUserWordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserWordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserWordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserWordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserWordsResponseValidationError{}
