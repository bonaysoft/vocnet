// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vocnet/v1/vocnet_service.proto

package vocnetv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/eslsoft/vocnet/pkg/api/common/v1"
	v1 "github.com/eslsoft/vocnet/pkg/api/vocnet/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserWordServiceName is the fully-qualified name of the UserWordService service.
	UserWordServiceName = "vocnet.v1.UserWordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserWordServiceCollectWordProcedure is the fully-qualified name of the UserWordService's
	// CollectWord RPC.
	UserWordServiceCollectWordProcedure = "/vocnet.v1.UserWordService/CollectWord"
	// UserWordServiceUpdateUserWordMasteryProcedure is the fully-qualified name of the
	// UserWordService's UpdateUserWordMastery RPC.
	UserWordServiceUpdateUserWordMasteryProcedure = "/vocnet.v1.UserWordService/UpdateUserWordMastery"
	// UserWordServiceListUserWordsProcedure is the fully-qualified name of the UserWordService's
	// ListUserWords RPC.
	UserWordServiceListUserWordsProcedure = "/vocnet.v1.UserWordService/ListUserWords"
	// UserWordServiceDeleteUserWordProcedure is the fully-qualified name of the UserWordService's
	// DeleteUserWord RPC.
	UserWordServiceDeleteUserWordProcedure = "/vocnet.v1.UserWordService/DeleteUserWord"
)

// UserWordServiceClient is a client for the vocnet.v1.UserWordService service.
type UserWordServiceClient interface {
	// Collect/add a word to user's vocabulary (creates global word if needed)
	CollectWord(context.Context, *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.UserWord], error)
	// Update mastery level and learning status
	UpdateUserWordMastery(context.Context, *connect.Request[v1.UpdateUserWordMasteryRequest]) (*connect.Response[v1.UserWord], error)
	// List user's words with filtering and sorting
	ListUserWords(context.Context, *connect.Request[v1.ListUserWordsRequest]) (*connect.Response[v1.ListUserWordsResponse], error)
	// Delete/deactivate a user word
	DeleteUserWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUserWordServiceClient constructs a client for the vocnet.v1.UserWordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserWordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserWordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userWordServiceMethods := v1.File_vocnet_v1_vocnet_service_proto.Services().ByName("UserWordService").Methods()
	return &userWordServiceClient{
		collectWord: connect.NewClient[v1.CollectWordRequest, v1.UserWord](
			httpClient,
			baseURL+UserWordServiceCollectWordProcedure,
			connect.WithSchema(userWordServiceMethods.ByName("CollectWord")),
			connect.WithClientOptions(opts...),
		),
		updateUserWordMastery: connect.NewClient[v1.UpdateUserWordMasteryRequest, v1.UserWord](
			httpClient,
			baseURL+UserWordServiceUpdateUserWordMasteryProcedure,
			connect.WithSchema(userWordServiceMethods.ByName("UpdateUserWordMastery")),
			connect.WithClientOptions(opts...),
		),
		listUserWords: connect.NewClient[v1.ListUserWordsRequest, v1.ListUserWordsResponse](
			httpClient,
			baseURL+UserWordServiceListUserWordsProcedure,
			connect.WithSchema(userWordServiceMethods.ByName("ListUserWords")),
			connect.WithClientOptions(opts...),
		),
		deleteUserWord: connect.NewClient[v11.IDRequest, emptypb.Empty](
			httpClient,
			baseURL+UserWordServiceDeleteUserWordProcedure,
			connect.WithSchema(userWordServiceMethods.ByName("DeleteUserWord")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userWordServiceClient implements UserWordServiceClient.
type userWordServiceClient struct {
	collectWord           *connect.Client[v1.CollectWordRequest, v1.UserWord]
	updateUserWordMastery *connect.Client[v1.UpdateUserWordMasteryRequest, v1.UserWord]
	listUserWords         *connect.Client[v1.ListUserWordsRequest, v1.ListUserWordsResponse]
	deleteUserWord        *connect.Client[v11.IDRequest, emptypb.Empty]
}

// CollectWord calls vocnet.v1.UserWordService.CollectWord.
func (c *userWordServiceClient) CollectWord(ctx context.Context, req *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.UserWord], error) {
	return c.collectWord.CallUnary(ctx, req)
}

// UpdateUserWordMastery calls vocnet.v1.UserWordService.UpdateUserWordMastery.
func (c *userWordServiceClient) UpdateUserWordMastery(ctx context.Context, req *connect.Request[v1.UpdateUserWordMasteryRequest]) (*connect.Response[v1.UserWord], error) {
	return c.updateUserWordMastery.CallUnary(ctx, req)
}

// ListUserWords calls vocnet.v1.UserWordService.ListUserWords.
func (c *userWordServiceClient) ListUserWords(ctx context.Context, req *connect.Request[v1.ListUserWordsRequest]) (*connect.Response[v1.ListUserWordsResponse], error) {
	return c.listUserWords.CallUnary(ctx, req)
}

// DeleteUserWord calls vocnet.v1.UserWordService.DeleteUserWord.
func (c *userWordServiceClient) DeleteUserWord(ctx context.Context, req *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUserWord.CallUnary(ctx, req)
}

// UserWordServiceHandler is an implementation of the vocnet.v1.UserWordService service.
type UserWordServiceHandler interface {
	// Collect/add a word to user's vocabulary (creates global word if needed)
	CollectWord(context.Context, *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.UserWord], error)
	// Update mastery level and learning status
	UpdateUserWordMastery(context.Context, *connect.Request[v1.UpdateUserWordMasteryRequest]) (*connect.Response[v1.UserWord], error)
	// List user's words with filtering and sorting
	ListUserWords(context.Context, *connect.Request[v1.ListUserWordsRequest]) (*connect.Response[v1.ListUserWordsResponse], error)
	// Delete/deactivate a user word
	DeleteUserWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUserWordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserWordServiceHandler(svc UserWordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userWordServiceMethods := v1.File_vocnet_v1_vocnet_service_proto.Services().ByName("UserWordService").Methods()
	userWordServiceCollectWordHandler := connect.NewUnaryHandler(
		UserWordServiceCollectWordProcedure,
		svc.CollectWord,
		connect.WithSchema(userWordServiceMethods.ByName("CollectWord")),
		connect.WithHandlerOptions(opts...),
	)
	userWordServiceUpdateUserWordMasteryHandler := connect.NewUnaryHandler(
		UserWordServiceUpdateUserWordMasteryProcedure,
		svc.UpdateUserWordMastery,
		connect.WithSchema(userWordServiceMethods.ByName("UpdateUserWordMastery")),
		connect.WithHandlerOptions(opts...),
	)
	userWordServiceListUserWordsHandler := connect.NewUnaryHandler(
		UserWordServiceListUserWordsProcedure,
		svc.ListUserWords,
		connect.WithSchema(userWordServiceMethods.ByName("ListUserWords")),
		connect.WithHandlerOptions(opts...),
	)
	userWordServiceDeleteUserWordHandler := connect.NewUnaryHandler(
		UserWordServiceDeleteUserWordProcedure,
		svc.DeleteUserWord,
		connect.WithSchema(userWordServiceMethods.ByName("DeleteUserWord")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vocnet.v1.UserWordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserWordServiceCollectWordProcedure:
			userWordServiceCollectWordHandler.ServeHTTP(w, r)
		case UserWordServiceUpdateUserWordMasteryProcedure:
			userWordServiceUpdateUserWordMasteryHandler.ServeHTTP(w, r)
		case UserWordServiceListUserWordsProcedure:
			userWordServiceListUserWordsHandler.ServeHTTP(w, r)
		case UserWordServiceDeleteUserWordProcedure:
			userWordServiceDeleteUserWordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserWordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserWordServiceHandler struct{}

func (UnimplementedUserWordServiceHandler) CollectWord(context.Context, *connect.Request[v1.CollectWordRequest]) (*connect.Response[v1.UserWord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vocnet.v1.UserWordService.CollectWord is not implemented"))
}

func (UnimplementedUserWordServiceHandler) UpdateUserWordMastery(context.Context, *connect.Request[v1.UpdateUserWordMasteryRequest]) (*connect.Response[v1.UserWord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vocnet.v1.UserWordService.UpdateUserWordMastery is not implemented"))
}

func (UnimplementedUserWordServiceHandler) ListUserWords(context.Context, *connect.Request[v1.ListUserWordsRequest]) (*connect.Response[v1.ListUserWordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vocnet.v1.UserWordService.ListUserWords is not implemented"))
}

func (UnimplementedUserWordServiceHandler) DeleteUserWord(context.Context, *connect.Request[v11.IDRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vocnet.v1.UserWordService.DeleteUserWord is not implemented"))
}
